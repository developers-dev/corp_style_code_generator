[
  {
    "type": "ClassDef",
    "name": "DN_Config",
    "content": "from typing import Optional\n\nconfig_file_path = \"config.txt\"\nvalue = config.dn_get_config_value(\"key_name\")\nconfig = DN_Config(config_file_path)\n\n\n# Config 클래스\nclass DN_Config:\n    def __init__(self, config_file: str):\n        self.config_file = config_file\n        self.config_data = {}\n\n    # Config 파일 읽기\n    def dn_read_config(self):\n        try:\n            with open(self.config_file, 'r') as file:\n                for line in file:\n                    key, value = line.strip().split('=')\n                    self.config_data[key.strip()] = value.strip()\n        except FileNotFoundError:\n            print(f\"Error: Config file '{self.config_file}' not found.\")\n\n    # Config 값 가져오기\n    def dn_get_config_value(self, key: str) -> Optional[str]:\n        return self.config_data.get(key, None)\n\n    # Config 값 설정\n    def dn_set_config_value(self, key: str, value: str):\n        self.config_data[key] = value",
    "file_path": "sofia.mendez/dn_config_4.py",
    "start_line": 4,
    "end_line": 27,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 1,
      "globals_count": 3
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, config_file: str):\n        self.config_file = config_file\n        self.config_data = {}",
    "file_path": "sofia.mendez/dn_config_4.py",
    "start_line": 7,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_read_config",
    "content": "config_file_path = \"config.txt\"\nvalue = config.dn_get_config_value(\"key_name\")\nconfig = DN_Config(config_file_path)\n\n\n    # Config 파일 읽기\n    def dn_read_config(self):\n        try:\n            with open(self.config_file, 'r') as file:\n                for line in file:\n                    key, value = line.strip().split('=')\n                    self.config_data[key.strip()] = value.strip()\n        except FileNotFoundError:\n            print(f\"Error: Config file '{self.config_file}' not found.\")",
    "file_path": "sofia.mendez/dn_config_4.py",
    "start_line": 10,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 3
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_config_value",
    "content": "from typing import Optional\n\n\n    # Config 값 가져오기\n    def dn_get_config_value(self, key: str) -> Optional[str]:\n        return self.config_data.get(key, None)",
    "file_path": "sofia.mendez/dn_config_4.py",
    "start_line": 20,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_set_config_value",
    "content": "config_file_path = \"config.txt\"\nvalue = config.dn_get_config_value(\"key_name\")\nconfig = DN_Config(config_file_path)\n\n\n    # Config 값 설정\n    def dn_set_config_value(self, key: str, value: str):\n        self.config_data[key] = value",
    "file_path": "sofia.mendez/dn_config_4.py",
    "start_line": 24,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 3
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "ClassDef",
    "name": "DN_Deployment",
    "content": "import os\n\n\nclass DN_Deployment:\n    def __init__(self, project_name):\n        self.project_name = project_name\n\n    def dn_check_environment(self):\n        environment = os.getenv('ENVIRONMENT')\n        if environment == 'production':\n            print(f\"Deployment for {self.project_name} will be in production environment.\")\n        elif environment == 'staging':\n            print(f\"Deployment for {self.project_name} will be in staging environment.\")\n        else:\n            print(f\"Unknown environment for deployment.\")\n\n    def dn_run_tests(self):\n        print(f\"Running tests for {self.project_name} before deployment.\")\n\n    def dn_deploy(self):\n        print(f\"Deploying {self.project_name} to the server.\")",
    "file_path": "sofia.mendez/dn_deployment_5.py",
    "start_line": 5,
    "end_line": 23,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_prepare_deployment",
    "content": "\ndef dn_prepare_deployment(project_name):\n    print(f\"Preparing deployment for {project_name}.\")",
    "file_path": "sofia.mendez/dn_deployment_5.py",
    "start_line": 24,
    "end_line": 26,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_cleanup",
    "content": "\ndef dn_cleanup():\n    print(\"Cleaning up deployment artifacts.\")",
    "file_path": "sofia.mendez/dn_deployment_5.py",
    "start_line": 27,
    "end_line": 29,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, project_name):\n        self.project_name = project_name",
    "file_path": "sofia.mendez/dn_deployment_5.py",
    "start_line": 7,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_environment",
    "content": "import os\n\n\n    def dn_check_environment(self):\n        environment = os.getenv('ENVIRONMENT')\n        if environment == 'production':\n            print(f\"Deployment for {self.project_name} will be in production environment.\")\n        elif environment == 'staging':\n            print(f\"Deployment for {self.project_name} will be in staging environment.\")\n        else:\n            print(f\"Unknown environment for deployment.\")",
    "file_path": "sofia.mendez/dn_deployment_5.py",
    "start_line": 9,
    "end_line": 17,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_run_tests",
    "content": "\n    def dn_run_tests(self):\n        print(f\"Running tests for {self.project_name} before deployment.\")",
    "file_path": "sofia.mendez/dn_deployment_5.py",
    "start_line": 18,
    "end_line": 20,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_deploy",
    "content": "\n    def dn_deploy(self):\n        print(f\"Deploying {self.project_name} to the server.\")",
    "file_path": "sofia.mendez/dn_deployment_5.py",
    "start_line": 21,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "ClassDef",
    "name": "DN_Monitoring",
    "content": "import requests\nimport time\nimport json\n\n\nclass DN_Monitoring:\n    def __init__(self, url):\n        self.url = url\n\n    def dn_get_data(self):\n        response = requests.get(self.url)\n        data = response.json()\n        return data\n\n    def dn_analyze_data(self, data):\n        # 데이터 분석 로직 구현\n        pass",
    "file_path": "sofia.mendez/dn_monitoring_2.py",
    "start_line": 7,
    "end_line": 19,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 3,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_send_alert",
    "content": "\ndef dn_send_alert(message):\n    # 경고 메시지를 관리자에게 보내는 함수\n    pass",
    "file_path": "sofia.mendez/dn_monitoring_2.py",
    "start_line": 20,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_monitor",
    "content": "import requests\nimport time\nimport json\n\n\ndef dn_monitor(url):\n    monitoring = DN_Monitoring(url)\n    \n    while True:\n        data = monitoring.dn_get_data()\n        result = monitoring.dn_analyze_data(data)\n\n        if result == \"error\":\n            dn_send_alert(\"An error occurred in monitoring\")\n\n        time.sleep(60)  # 1분마다 모니터링",
    "file_path": "sofia.mendez/dn_monitoring_2.py",
    "start_line": 24,
    "end_line": 35,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 3,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, url):\n        self.url = url",
    "file_path": "sofia.mendez/dn_monitoring_2.py",
    "start_line": 9,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_data",
    "content": "import requests\nimport time\nimport json\n\n\n    def dn_get_data(self):\n        response = requests.get(self.url)\n        data = response.json()\n        return data",
    "file_path": "sofia.mendez/dn_monitoring_2.py",
    "start_line": 11,
    "end_line": 15,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 3,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_analyze_data",
    "content": "\n    def dn_analyze_data(self, data):\n        # 데이터 분석 로직 구현\n        pass",
    "file_path": "sofia.mendez/dn_monitoring_2.py",
    "start_line": 16,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "ClassDef",
    "name": "DN_ConfigManager",
    "content": "# This Python file contains configurations for the 'config' feature in Danal's codebase.\n\nclass DN_ConfigManager:\n    def __init__(self, config_file):\n        self.config_file = config_file\n        self.config_data = {}\n\n    def dn_read_config(self):\n        # Read configuration data from the specified file\n        try:\n            with open(self.config_file, 'r') as file:\n                self.config_data = json.load(file)\n        except FileNotFoundError:\n            print(\"Config file not found.\")\n        except json.JSONDecodeError:\n            print(\"Error decoding JSON from config file.\")\n\n    def dn_get_config(self, key):\n        # Get the value for a specific key from the configuration data\n        return self.config_data.get(key, None)\n\n    def dn_update_config(self, key, value):\n        # Update the value for a specific key in the configuration data\n        self.config_data[key] = value\n\n    def dn_save_config(self):\n        # Save the updated configuration data back to the file\n        with open(self.config_file, 'w') as file:\n            json.dump(self.config_data, file, indent=4)",
    "file_path": "sofia.mendez/dn_config_1.py",
    "start_line": 2,
    "end_line": 30,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_config",
    "content": "\ndef dn_validate_config(config_data):\n    # Validate the configuration data before using it\n    if 'username' not in config_data or 'password' not in config_data:\n        raise ValueError(\"Username and/or password not found in config data.\")\n    if not isinstance(config_data['port'], int) or config_data['port'] < 0:\n        raise ValueError(\"Port number in config data is invalid.\")",
    "file_path": "sofia.mendez/dn_config_1.py",
    "start_line": 31,
    "end_line": 37,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, config_file):\n        self.config_file = config_file\n        self.config_data = {}",
    "file_path": "sofia.mendez/dn_config_1.py",
    "start_line": 5,
    "end_line": 7,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_read_config",
    "content": "\n    def dn_read_config(self):\n        # Read configuration data from the specified file\n        try:\n            with open(self.config_file, 'r') as file:\n                self.config_data = json.load(file)\n        except FileNotFoundError:\n            print(\"Config file not found.\")\n        except json.JSONDecodeError:\n            print(\"Error decoding JSON from config file.\")",
    "file_path": "sofia.mendez/dn_config_1.py",
    "start_line": 8,
    "end_line": 17,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_config",
    "content": "\n    def dn_get_config(self, key):\n        # Get the value for a specific key from the configuration data\n        return self.config_data.get(key, None)",
    "file_path": "sofia.mendez/dn_config_1.py",
    "start_line": 18,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_update_config",
    "content": "\n    def dn_update_config(self, key, value):\n        # Update the value for a specific key in the configuration data\n        self.config_data[key] = value",
    "file_path": "sofia.mendez/dn_config_1.py",
    "start_line": 22,
    "end_line": 25,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_save_config",
    "content": "\n    def dn_save_config(self):\n        # Save the updated configuration data back to the file\n        with open(self.config_file, 'w') as file:\n            json.dump(self.config_data, file, indent=4)",
    "file_path": "sofia.mendez/dn_config_1.py",
    "start_line": 26,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "ClassDef",
    "name": "DN_ConfigManager",
    "content": "# This file contains functions related to configuration settings\n# Written by Sofia Mendez\n\nclass DN_ConfigManager:\n    def __init__(self, config_file):\n        self.config_file = config_file\n\n    def dn_load_config(self):\n        # Load configuration settings from file\n        pass\n\n    def dn_save_config(self):\n        # Save configuration settings to file\n        pass",
    "file_path": "sofia.mendez/dn_config_5.py",
    "start_line": 2,
    "end_line": 15,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "ClassDef",
    "name": "DN_ConfigValidator",
    "content": "\nclass DN_ConfigValidator:\n    def __init__(self, config_data):\n        self.config_data = config_data\n\n    def dn_validate_config(self):\n        # Validate the configuration settings\n        pass",
    "file_path": "sofia.mendez/dn_config_5.py",
    "start_line": 16,
    "end_line": 23,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_update_config",
    "content": "\ndef dn_update_config(key, value):\n    # Update a specific configuration setting\n    pass",
    "file_path": "sofia.mendez/dn_config_5.py",
    "start_line": 24,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_reset_config",
    "content": "\ndef dn_reset_config():\n    # Reset all configuration settings to default\n    pass",
    "file_path": "sofia.mendez/dn_config_5.py",
    "start_line": 28,
    "end_line": 31,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, config_file):\n        self.config_file = config_file",
    "file_path": "sofia.mendez/dn_config_5.py",
    "start_line": 6,
    "end_line": 7,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_load_config",
    "content": "\n    def dn_load_config(self):\n        # Load configuration settings from file\n        pass",
    "file_path": "sofia.mendez/dn_config_5.py",
    "start_line": 8,
    "end_line": 11,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_save_config",
    "content": "\n    def dn_save_config(self):\n        # Save configuration settings to file\n        pass",
    "file_path": "sofia.mendez/dn_config_5.py",
    "start_line": 12,
    "end_line": 15,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, config_data):\n        self.config_data = config_data",
    "file_path": "sofia.mendez/dn_config_5.py",
    "start_line": 18,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_config",
    "content": "\n    def dn_validate_config(self):\n        # Validate the configuration settings\n        pass",
    "file_path": "sofia.mendez/dn_config_5.py",
    "start_line": 20,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_input",
    "content": "# Written by sofia.mendez\n\ndef dn_validate_input(input_data):\n    # Function to validate the input data before deployment\n    pass",
    "file_path": "sofia.mendez/dn_deployment_4.py",
    "start_line": 2,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "ClassDef",
    "name": "DNDeployment",
    "content": "\nclass DNDeployment:\n    def __init__(self, project_name):\n        self.project_name = project_name\n        self.deployed = False\n\n    def dn_prepare_environment(self):\n        # Method to prepare the deployment environment\n        pass\n\n    def dn_deploy_code(self, code):\n        # Method to deploy the code to the specified environment\n        pass\n\n    def dn_verify_deployment(self):\n        # Method to verify if the deployment was successful\n        pass",
    "file_path": "sofia.mendez/dn_deployment_4.py",
    "start_line": 7,
    "end_line": 23,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_run_deployment",
    "content": "\ndef dn_run_deployment(project_name, code):\n    # Function to run the deployment process\n    pass",
    "file_path": "sofia.mendez/dn_deployment_4.py",
    "start_line": 24,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, project_name):\n        self.project_name = project_name\n        self.deployed = False",
    "file_path": "sofia.mendez/dn_deployment_4.py",
    "start_line": 9,
    "end_line": 11,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_prepare_environment",
    "content": "\n    def dn_prepare_environment(self):\n        # Method to prepare the deployment environment\n        pass",
    "file_path": "sofia.mendez/dn_deployment_4.py",
    "start_line": 12,
    "end_line": 15,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_deploy_code",
    "content": "\n    def dn_deploy_code(self, code):\n        # Method to deploy the code to the specified environment\n        pass",
    "file_path": "sofia.mendez/dn_deployment_4.py",
    "start_line": 16,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_verify_deployment",
    "content": "\n    def dn_verify_deployment(self):\n        # Method to verify if the deployment was successful\n        pass",
    "file_path": "sofia.mendez/dn_deployment_4.py",
    "start_line": 20,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "ClassDef",
    "name": "DN_Monitor",
    "content": "# This file contains the monitoring functionalities for Danal's codebase\n\n# Monitor class for tracking various metrics\nclass DN_Monitor:\n    def __init__(self, name):\n        self.name = name\n\n    def start_monitoring(self):\n        print(f\"Monitoring started for {self.name}\")\n\n    def stop_monitoring(self):\n        print(f\"Monitoring stopped for {self.name}\")",
    "file_path": "sofia.mendez/dn_monitoring_4.py",
    "start_line": 2,
    "end_line": 13,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_calculate_avg_response_time",
    "content": "\n# Function to calculate average response time\ndef dn_calculate_avg_response_time(data):\n    total_time = sum(data)\n    avg_time = total_time / len(data)\n    return avg_time",
    "file_path": "sofia.mendez/dn_monitoring_4.py",
    "start_line": 14,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_server_status",
    "content": "\n# Function to check server status\ndef dn_check_server_status(server):\n    print(f\"Checking status of server {server}\")\n    # Code to ping server and get response\n    if response == 200:\n        print(\"Server is up and running\")\n    else:\n        print(\"Server is experiencing issues\")",
    "file_path": "sofia.mendez/dn_monitoring_4.py",
    "start_line": 20,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_send_alert",
    "content": "\n# Function to send alert\ndef dn_send_alert(alert_type):\n    print(f\"Alert sent: {alert_type}\")",
    "file_path": "sofia.mendez/dn_monitoring_4.py",
    "start_line": 29,
    "end_line": 32,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_main",
    "content": "\n# Main function to run monitoring functions\ndef dn_main():\n    monitor = DN_Monitor(\"Main Server\")\n    monitor.start_monitoring()\n\n    response_times = [10, 15, 20, 12, 18]\n    avg_response_time = dn_calculate_avg_response_time(response_times)\n    print(f\"Average response time: {avg_response_time}\")\n\n    dn_check_server_status(\"Web Server\")\n\n    dn_send_alert(\"CPU Usage High\")\n\n    monitor.stop_monitoring()",
    "file_path": "sofia.mendez/dn_monitoring_4.py",
    "start_line": 33,
    "end_line": 47,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, name):\n        self.name = name",
    "file_path": "sofia.mendez/dn_monitoring_4.py",
    "start_line": 6,
    "end_line": 7,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "start_monitoring",
    "content": "\n    def start_monitoring(self):\n        print(f\"Monitoring started for {self.name}\")",
    "file_path": "sofia.mendez/dn_monitoring_4.py",
    "start_line": 8,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "stop_monitoring",
    "content": "\n    def stop_monitoring(self):\n        print(f\"Monitoring stopped for {self.name}\")",
    "file_path": "sofia.mendez/dn_monitoring_4.py",
    "start_line": 11,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "ClassDef",
    "name": "DN_Monitoring",
    "content": "\nclass DN_Monitoring:\n    def __init__(self, service_name):\n        self.service_name = service_name\n        self.status = \"OK\"\n\n    def dn_check_status(self):\n        # Simulating status check\n        if self.service_name == \"database\":\n            self.status = \"ERROR\"\n        else:\n            self.status = \"OK\"\n    \n    def dn_display_status(self):\n        print(f\"Service '{self.service_name}' is currently {self.status}\")",
    "file_path": "sofia.mendez/dn_monitoring_5.py",
    "start_line": 5,
    "end_line": 19,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_send_notification",
    "content": "\ndef dn_send_notification(service_name, status):\n    # Sending notification based on service status\n    if status == \"ERROR\":\n        print(f\"ALERT: Service '{service_name}' is down! Please investigate.\")\n    else:\n        print(f\"INFO: Service '{service_name}' is up and running.\")",
    "file_path": "sofia.mendez/dn_monitoring_5.py",
    "start_line": 20,
    "end_line": 26,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_monitor_service",
    "content": "import time\n\n\ndef dn_monitor_service(service_name):\n    # Monitoring service status\n    service = DN_Monitoring(service_name)\n    while True:\n        service.dn_check_status()\n        service.dn_display_status()\n        dn_send_notification(service.service_name, service.status)\n        time.sleep(5)",
    "file_path": "sofia.mendez/dn_monitoring_5.py",
    "start_line": 27,
    "end_line": 35,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, service_name):\n        self.service_name = service_name\n        self.status = \"OK\"",
    "file_path": "sofia.mendez/dn_monitoring_5.py",
    "start_line": 7,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_status",
    "content": "\n    def dn_check_status(self):\n        # Simulating status check\n        if self.service_name == \"database\":\n            self.status = \"ERROR\"\n        else:\n            self.status = \"OK\"",
    "file_path": "sofia.mendez/dn_monitoring_5.py",
    "start_line": 10,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_display_status",
    "content": "    \n    def dn_display_status(self):\n        print(f\"Service '{self.service_name}' is currently {self.status}\")",
    "file_path": "sofia.mendez/dn_monitoring_5.py",
    "start_line": 17,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "ClassDef",
    "name": "DN_Config",
    "content": "# @dn- Config 관련 기능을 다루는 Python 파일\n\n# Config 클래스\nclass DN_Config:\n    def __init__(self, config_file):\n        self.config_file = config_file\n        self.config_data = self.load_config()\n\n    def load_config(self):\n        # Config 파일을 읽어서 데이터를 반환하는 함수\n        pass\n\n    def save_config(self):\n        # 변경된 Config 데이터를 파일에 저장하는 함수\n        pass",
    "file_path": "sofia.mendez/dn_config_3.py",
    "start_line": 2,
    "end_line": 16,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_config",
    "content": "\n# Config 데이터를 처리하는 함수\ndef dn_process_config(config_data):\n    # Config 데이터를 가공하는 함수\n    pass",
    "file_path": "sofia.mendez/dn_config_3.py",
    "start_line": 17,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_update_config",
    "content": "\n# Config 설정을 업데이트하는 함수\ndef dn_update_config(key, value):\n    # 지정된 키에 대한 값을 업데이트하는 함수\n    pass",
    "file_path": "sofia.mendez/dn_config_3.py",
    "start_line": 22,
    "end_line": 26,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, config_file):\n        self.config_file = config_file\n        self.config_data = self.load_config()",
    "file_path": "sofia.mendez/dn_config_3.py",
    "start_line": 6,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "load_config",
    "content": "\n    def load_config(self):\n        # Config 파일을 읽어서 데이터를 반환하는 함수\n        pass",
    "file_path": "sofia.mendez/dn_config_3.py",
    "start_line": 9,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "save_config",
    "content": "\n    def save_config(self):\n        # 변경된 Config 데이터를 파일에 저장하는 함수\n        pass",
    "file_path": "sofia.mendez/dn_config_3.py",
    "start_line": 13,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "ClassDef",
    "name": "DN_MonitoringInfo",
    "content": "# @dn- Monitoring 기능을 담당하는 Python 파일\n\n# dn- 모니터링 관련 정보를 저장하는 클래스\nclass DN_MonitoringInfo:\n    def __init__(self, name, threshold):\n        self.name = name\n        self.threshold = threshold",
    "file_path": "sofia.mendez/dn_monitoring_1.py",
    "start_line": 2,
    "end_line": 8,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_monitor",
    "content": "\n# dn- 모니터링을 수행하는 함수\ndef dn_monitor(data):\n    if data > 100:\n        print(\"Threshold exceeded!\")\n    else:\n        print(\"Monitoring within threshold.\")",
    "file_path": "sofia.mendez/dn_monitoring_1.py",
    "start_line": 9,
    "end_line": 15,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "ClassDef",
    "name": "DN_MonitoringResult",
    "content": "\n# dn- 모니터링 결과를 처리하는 클래스\nclass DN_MonitoringResult:\n    def __init__(self, result):\n        self.result = result\n        \n    def dn_display_result(self):\n        print(\"Monitoring Result: {}\".format(self.result))",
    "file_path": "sofia.mendez/dn_monitoring_1.py",
    "start_line": 16,
    "end_line": 23,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_execute_monitoring",
    "content": "\n# dn- 모니터링을 실행하는 함수\ndef dn_execute_monitoring(data, threshold):\n    if data > threshold:\n        result = \"Threshold exceeded!\"\n    else:\n        result = \"Monitoring within threshold.\"\n    \n    monitoring_result = DN_MonitoringResult(result)\n    monitoring_result.dn_display_result()",
    "file_path": "sofia.mendez/dn_monitoring_1.py",
    "start_line": 24,
    "end_line": 33,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, name, threshold):\n        self.name = name\n        self.threshold = threshold",
    "file_path": "sofia.mendez/dn_monitoring_1.py",
    "start_line": 6,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, result):\n        self.result = result",
    "file_path": "sofia.mendez/dn_monitoring_1.py",
    "start_line": 19,
    "end_line": 20,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "FunctionDef",
    "name": "dn_display_result",
    "content": "        \n    def dn_display_result(self):\n        print(\"Monitoring Result: {}\".format(self.result))",
    "file_path": "sofia.mendez/dn_monitoring_1.py",
    "start_line": 21,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "sofia.mendez"
  },
  {
    "type": "ClassDef",
    "name": "DN_Audit",
    "content": "# Author: neha.sharma\n\nclass DN_Audit:\n    def __init__(self, username, timestamp):\n        self.username = username\n        self.timestamp = timestamp\n        self.audit_logs = []\n\n    def dn_add_audit_log(self, action):\n        log = f\"{self.username} performed {action} at {self.timestamp}\"\n        self.audit_logs.append(log)\n\n    def dn_display_audit_logs(self):\n        for log in self.audit_logs:\n            print(log)",
    "file_path": "neha.sharma/dn_audit_5.py",
    "start_line": 2,
    "end_line": 16,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_permission",
    "content": "\ndef dn_check_permission(user_role):\n    if user_role == 'admin':\n        return True\n    else:\n        return False",
    "file_path": "neha.sharma/dn_audit_5.py",
    "start_line": 17,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_run_audit",
    "content": "\ndef dn_run_audit():\n    username = input(\"Enter your username: \")\n    user_role = input(\"Enter your role: \")\n    action = input(\"Enter the action you want to audit: \")\n    timestamp = dn_get_timestamp()\n    \n    if dn_check_permission(user_role):\n        audit = DN_Audit(username, timestamp)\n        audit.dn_add_audit_log(action)\n        audit.dn_display_audit_logs()\n    else:\n        print(\"Permission denied.\")",
    "file_path": "neha.sharma/dn_audit_5.py",
    "start_line": 23,
    "end_line": 35,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_timestamp",
    "content": "\ndef dn_get_timestamp():\n    # Implement logic to get current timestamp\n    pass",
    "file_path": "neha.sharma/dn_audit_5.py",
    "start_line": 36,
    "end_line": 39,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, username, timestamp):\n        self.username = username\n        self.timestamp = timestamp\n        self.audit_logs = []",
    "file_path": "neha.sharma/dn_audit_5.py",
    "start_line": 5,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_add_audit_log",
    "content": "\n    def dn_add_audit_log(self, action):\n        log = f\"{self.username} performed {action} at {self.timestamp}\"\n        self.audit_logs.append(log)",
    "file_path": "neha.sharma/dn_audit_5.py",
    "start_line": 9,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_display_audit_logs",
    "content": "\n    def dn_display_audit_logs(self):\n        for log in self.audit_logs:\n            print(log)",
    "file_path": "neha.sharma/dn_audit_5.py",
    "start_line": 13,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_authenticate_user",
    "content": "\n# @dn- 인증 및 권한 부여 메서드\ndef dn_authenticate_user(username, password):\n    # 사용자 인증 작업 수행\n    return True",
    "file_path": "neha.sharma/dn_audit_1.py",
    "start_line": 5,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DNAuditLogger",
    "content": "import logging\n\n\n# @dn- 감사 로깅 클래스\nclass DNAuditLogger:\n    def __init__(self, filename):\n        self.filename = filename\n        self.logger = logging.getLogger(__name__)\n        self.logger.setLevel(logging.INFO)\n        self.handler = logging.FileHandler(filename)\n        self.formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n        self.handler.setFormatter(self.formatter)\n        self.logger.addHandler(self.handler)\n    \n    def dn_log_event(self, event):\n        self.logger.info(event)",
    "file_path": "neha.sharma/dn_audit_1.py",
    "start_line": 10,
    "end_line": 23,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DNAudit",
    "content": "\n# @dn- 감사 기능 클래스\nclass DNAudit:\n    def __init__(self):\n        self.logger = DNAuditLogger('audit_log.txt')\n    \n    def dn_run_audit(self, username, action):\n        if dn_authenticate_user(username, 'password123'):\n            self.logger.dn_log_event(f'User {username} performed action: {action}')\n        else:\n            self.logger.dn_log_event(f'Unauthorized access attempt by user {username}')",
    "file_path": "neha.sharma/dn_audit_1.py",
    "start_line": 24,
    "end_line": 34,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "import logging\n\n    def __init__(self, filename):\n        self.filename = filename\n        self.logger = logging.getLogger(__name__)\n        self.logger.setLevel(logging.INFO)\n        self.handler = logging.FileHandler(filename)\n        self.formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n        self.handler.setFormatter(self.formatter)\n        self.logger.addHandler(self.handler)",
    "file_path": "neha.sharma/dn_audit_1.py",
    "start_line": 13,
    "end_line": 20,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_log_event",
    "content": "    \n    def dn_log_event(self, event):\n        self.logger.info(event)",
    "file_path": "neha.sharma/dn_audit_1.py",
    "start_line": 21,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.logger = DNAuditLogger('audit_log.txt')",
    "file_path": "neha.sharma/dn_audit_1.py",
    "start_line": 27,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_run_audit",
    "content": "    \n    def dn_run_audit(self, username, action):\n        if dn_authenticate_user(username, 'password123'):\n            self.logger.dn_log_event(f'User {username} performed action: {action}')\n        else:\n            self.logger.dn_log_event(f'Unauthorized access attempt by user {username}')",
    "file_path": "neha.sharma/dn_audit_1.py",
    "start_line": 29,
    "end_line": 34,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DNAuditEvent",
    "content": "\n# audit 이벤트 관리 클래스\nclass DNAuditEvent:\n    def __init__(self, event_id, event_type, user_id, timestamp):\n        self.event_id = event_id\n        self.event_type = event_type\n        self.user_id = user_id\n        self.timestamp = timestamp",
    "file_path": "neha.sharma/dn_audit_4.py",
    "start_line": 10,
    "end_line": 17,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DNAuditLog",
    "content": "import logging\nimport datetime\n\n\n# audit 로그 관리 클래스\nclass DNAuditLog:\n    def __init__(self):\n        self.events = []\n\n    def add_event(self, event_id, event_type, user_id):\n        timestamp = datetime.datetime.now()\n        event = DNAuditEvent(event_id, event_type, user_id, timestamp)\n        self.events.append(event)\n        logging.info(f'Added event {event_id}: {event_type} by {user_id}')\n\n    def display_logs(self):\n        for event in self.events:\n            logging.info(f'Event ID: {event.event_id}, Type: {event.event_type}, User: {event.user_id}, Time: {event.timestamp}')",
    "file_path": "neha.sharma/dn_audit_4.py",
    "start_line": 18,
    "end_line": 32,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_manage_audit",
    "content": "\n# audit 관리 함수\ndef dn_manage_audit():\n    audit_log = DNAuditLog()\n\n    audit_log.add_event(1, 'Login', 'admin')\n    audit_log.add_event(2, 'View', 'user1')\n    audit_log.add_event(3, 'Edit', 'user2')\n\n    audit_log.display_logs()",
    "file_path": "neha.sharma/dn_audit_4.py",
    "start_line": 33,
    "end_line": 42,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, event_id, event_type, user_id, timestamp):\n        self.event_id = event_id\n        self.event_type = event_type\n        self.user_id = user_id\n        self.timestamp = timestamp",
    "file_path": "neha.sharma/dn_audit_4.py",
    "start_line": 13,
    "end_line": 17,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.events = []",
    "file_path": "neha.sharma/dn_audit_4.py",
    "start_line": 21,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "add_event",
    "content": "import logging\nimport datetime\n\n\n    def add_event(self, event_id, event_type, user_id):\n        timestamp = datetime.datetime.now()\n        event = DNAuditEvent(event_id, event_type, user_id, timestamp)\n        self.events.append(event)\n        logging.info(f'Added event {event_id}: {event_type} by {user_id}')",
    "file_path": "neha.sharma/dn_audit_4.py",
    "start_line": 23,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "display_logs",
    "content": "import logging\nimport datetime\n\n\n    def display_logs(self):\n        for event in self.events:\n            logging.info(f'Event ID: {event.event_id}, Type: {event.event_type}, User: {event.user_id}, Time: {event.timestamp}')",
    "file_path": "neha.sharma/dn_audit_4.py",
    "start_line": 29,
    "end_line": 32,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_salt",
    "content": "import hashlib\nimport random\n\n\n# Function to generate a random salt value\ndef dn_generate_salt(length=16):\n    chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()\"\n    salt = \"\"\n    for _ in range(length):\n        salt += random.choice(chars)\n    return salt",
    "file_path": "neha.sharma/dn_auth_5.py",
    "start_line": 7,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DNAuthenticator",
    "content": "import hashlib\nimport random\n\n\n# Class for managing user authentication\nclass DNAuthenticator:\n    def __init__(self):\n        self.users = {}\n\n    # Method to register a new user\n    def dn_register_user(self, username, password):\n        salt = dn_generate_salt()\n        hashed_password = hashlib.sha256((password + salt).encode()).hexdigest()\n        self.users[username] = {'salt': salt, 'password': hashed_password}\n\n    # Method to authenticate a user\n    def dn_authenticate_user(self, username, password):\n        if username not in self.users:\n            return False\n        stored_salt = self.users[username]['salt']\n        stored_password = self.users[username]['password']\n        hashed_password = hashlib.sha256((password + stored_salt).encode()).hexdigest()\n        return hashed_password == stored_password",
    "file_path": "neha.sharma/dn_auth_5.py",
    "start_line": 15,
    "end_line": 34,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_update_password",
    "content": "import hashlib\nimport random\n\n\n# Function to update user password\ndef dn_update_password(username, new_password):\n    salt = dn_generate_salt()\n    hashed_password = hashlib.sha256((new_password + salt).encode()).hexdigest()\n    DNAuthenticator.users[username]['salt'] = salt\n    DNAuthenticator.users[username]['password'] = hashed_password",
    "file_path": "neha.sharma/dn_auth_5.py",
    "start_line": 35,
    "end_line": 41,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "main",
    "content": "\n# Main function to test the authentication functionality\ndef main():\n    auth = DNAuthenticator()\n    auth.dn_register_user('john_doe', 'password123')\n\n    if auth.dn_authenticate_user('john_doe', 'password123'):\n        print(\"Authentication successful\")\n    else:\n        print(\"Authentication failed\")\n\n    dn_update_password('john_doe', 'newpassword456')",
    "file_path": "neha.sharma/dn_auth_5.py",
    "start_line": 42,
    "end_line": 53,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.users = {}",
    "file_path": "neha.sharma/dn_auth_5.py",
    "start_line": 18,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_register_user",
    "content": "import hashlib\nimport random\n\n\n    # Method to register a new user\n    def dn_register_user(self, username, password):\n        salt = dn_generate_salt()\n        hashed_password = hashlib.sha256((password + salt).encode()).hexdigest()\n        self.users[username] = {'salt': salt, 'password': hashed_password}",
    "file_path": "neha.sharma/dn_auth_5.py",
    "start_line": 20,
    "end_line": 25,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_authenticate_user",
    "content": "import hashlib\nimport random\n\n\n    # Method to authenticate a user\n    def dn_authenticate_user(self, username, password):\n        if username not in self.users:\n            return False\n        stored_salt = self.users[username]['salt']\n        stored_password = self.users[username]['password']\n        hashed_password = hashlib.sha256((password + stored_salt).encode()).hexdigest()\n        return hashed_password == stored_password",
    "file_path": "neha.sharma/dn_auth_5.py",
    "start_line": 26,
    "end_line": 34,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_key",
    "content": "\ndef dn_generate_key():\n    key = os.urandom(16)\n    return key",
    "file_path": "neha.sharma/dn_encryption_2.py",
    "start_line": 5,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_encrypt",
    "content": "\ndef dn_encrypt(data, key):\n    cipher = AES.new(key, AES.MODE_CBC)\n    ct_bytes = cipher.encrypt(pad(data, AES.block_size))\n    return ct_bytes",
    "file_path": "neha.sharma/dn_encryption_2.py",
    "start_line": 9,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_decrypt",
    "content": "\ndef dn_decrypt(ciphertext, key):\n    cipher = AES.new(key, AES.MODE_CBC)\n    pt = unpad(cipher.decrypt(ciphertext), AES.block_size)\n    return pt",
    "file_path": "neha.sharma/dn_encryption_2.py",
    "start_line": 14,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DN_Encryption",
    "content": "\nclass DN_Encryption:\n    def __init__(self):\n        self.key = dn_generate_key()\n    \n    def dn_encrypt_data(self, data):\n        # Perform encryption\n        encrypted_data = dn_encrypt(data.encode(), self.key)\n        return encrypted_data\n\n    def dn_decrypt_data(self, encrypted_data):\n        # Perform decryption\n        decrypted_data = dn_decrypt(encrypted_data, self.key)\n        return decrypted_data",
    "file_path": "neha.sharma/dn_encryption_2.py",
    "start_line": 19,
    "end_line": 32,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.key = dn_generate_key()",
    "file_path": "neha.sharma/dn_encryption_2.py",
    "start_line": 21,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_encrypt_data",
    "content": "    \n    def dn_encrypt_data(self, data):\n        # Perform encryption\n        encrypted_data = dn_encrypt(data.encode(), self.key)\n        return encrypted_data",
    "file_path": "neha.sharma/dn_encryption_2.py",
    "start_line": 23,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_decrypt_data",
    "content": "\n    def dn_decrypt_data(self, encrypted_data):\n        # Perform decryption\n        decrypted_data = dn_decrypt(encrypted_data, self.key)\n        return decrypted_data",
    "file_path": "neha.sharma/dn_encryption_2.py",
    "start_line": 28,
    "end_line": 32,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_hash_password",
    "content": "import hashlib\n\n\n# Function to hash password using SHA256\ndef dn_hash_password(password):\n    hashed_password = hashlib.sha256(password.encode()).hexdigest()\n    return hashed_password",
    "file_path": "neha.sharma/dn_auth_1.py",
    "start_line": 5,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DNAuthenticator",
    "content": "\n# Class to handle user authentication\nclass DNAuthenticator:\n    def __init__(self):\n        self.users = {}\n\n    def dn_register_user(self, username, password):\n        if username in self.users:\n            return False\n        hashed_password = dn_hash_password(password)\n        self.users[username] = hashed_password\n        return True\n\n    def dn_login(self, username, password):\n        if username not in self.users:\n            return False\n        hashed_password = dn_hash_password(password)\n        if self.users[username] == hashed_password:\n            return True\n        return False",
    "file_path": "neha.sharma/dn_auth_1.py",
    "start_line": 10,
    "end_line": 29,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_token",
    "content": "import hashlib\n\n\n# Function to generate random token for user session\ndef dn_generate_token():\n    token = hashlib.sha256(os.urandom(32)).hexdigest()\n    return token",
    "file_path": "neha.sharma/dn_auth_1.py",
    "start_line": 30,
    "end_line": 34,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DNSession",
    "content": "\n# Class for user sessions\nclass DNSession:\n    def __init__(self):\n        self.active_sessions = {}\n\n    def dn_create_session(self, username):\n        token = dn_generate_token()\n        self.active_sessions[token] = username\n        return token\n\n    def dn_validate_session(self, token):\n        if token in self.active_sessions:\n            return True\n        return False",
    "file_path": "neha.sharma/dn_auth_1.py",
    "start_line": 35,
    "end_line": 49,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.users = {}",
    "file_path": "neha.sharma/dn_auth_1.py",
    "start_line": 13,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_register_user",
    "content": "\n    def dn_register_user(self, username, password):\n        if username in self.users:\n            return False\n        hashed_password = dn_hash_password(password)\n        self.users[username] = hashed_password\n        return True",
    "file_path": "neha.sharma/dn_auth_1.py",
    "start_line": 15,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_login",
    "content": "\n    def dn_login(self, username, password):\n        if username not in self.users:\n            return False\n        hashed_password = dn_hash_password(password)\n        if self.users[username] == hashed_password:\n            return True\n        return False",
    "file_path": "neha.sharma/dn_auth_1.py",
    "start_line": 22,
    "end_line": 29,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.active_sessions = {}",
    "file_path": "neha.sharma/dn_auth_1.py",
    "start_line": 38,
    "end_line": 39,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_create_session",
    "content": "\n    def dn_create_session(self, username):\n        token = dn_generate_token()\n        self.active_sessions[token] = username\n        return token",
    "file_path": "neha.sharma/dn_auth_1.py",
    "start_line": 40,
    "end_line": 44,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_session",
    "content": "\n    def dn_validate_session(self, token):\n        if token in self.active_sessions:\n            return True\n        return False",
    "file_path": "neha.sharma/dn_auth_1.py",
    "start_line": 45,
    "end_line": 49,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_salt",
    "content": "\ndef dn_generate_salt():\n    \"\"\"Generate a random salt for encryption\"\"\"\n    pass",
    "file_path": "neha.sharma/dn_encryption_3.py",
    "start_line": 7,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_hash_password",
    "content": "\ndef dn_hash_password(password, salt):\n    \"\"\"Hash the password using a salt\"\"\"\n    pass",
    "file_path": "neha.sharma/dn_encryption_3.py",
    "start_line": 11,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DN_AES_Encryption",
    "content": "\nclass DN_AES_Encryption:\n    def __init__(self, key):\n        self.key = key\n    \n    def encrypt(self, data):\n        \"\"\"Encrypt data using AES encryption\"\"\"\n        pass\n    \n    def decrypt(self, encrypted_data):\n        \"\"\"Decrypt data using AES encryption\"\"\"\n        pass",
    "file_path": "neha.sharma/dn_encryption_3.py",
    "start_line": 15,
    "end_line": 26,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DN_RSA_Encryption",
    "content": "\nclass DN_RSA_Encryption:\n    def __init__(self, public_key, private_key):\n        self.public_key = public_key\n        self.private_key = private_key\n    \n    def encrypt(self, data):\n        \"\"\"Encrypt data using RSA encryption\"\"\"\n        pass\n    \n    def decrypt(self, encrypted_data):\n        \"\"\"Decrypt data using RSA encryption\"\"\"\n        pass",
    "file_path": "neha.sharma/dn_encryption_3.py",
    "start_line": 27,
    "end_line": 39,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, key):\n        self.key = key",
    "file_path": "neha.sharma/dn_encryption_3.py",
    "start_line": 17,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "encrypt",
    "content": "    \n    def encrypt(self, data):\n        \"\"\"Encrypt data using AES encryption\"\"\"\n        pass",
    "file_path": "neha.sharma/dn_encryption_3.py",
    "start_line": 19,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "decrypt",
    "content": "    \n    def decrypt(self, encrypted_data):\n        \"\"\"Decrypt data using AES encryption\"\"\"\n        pass",
    "file_path": "neha.sharma/dn_encryption_3.py",
    "start_line": 23,
    "end_line": 26,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, public_key, private_key):\n        self.public_key = public_key\n        self.private_key = private_key",
    "file_path": "neha.sharma/dn_encryption_3.py",
    "start_line": 29,
    "end_line": 31,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "encrypt",
    "content": "    \n    def encrypt(self, data):\n        \"\"\"Encrypt data using RSA encryption\"\"\"\n        pass",
    "file_path": "neha.sharma/dn_encryption_3.py",
    "start_line": 32,
    "end_line": 35,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "decrypt",
    "content": "    \n    def decrypt(self, encrypted_data):\n        \"\"\"Decrypt data using RSA encryption\"\"\"\n        pass",
    "file_path": "neha.sharma/dn_encryption_3.py",
    "start_line": 36,
    "end_line": 39,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_token",
    "content": "# This Python script contains authentication functionalities for Danal company codebase\n\n# Helper function to generate a random token\ndef dn_generate_token():\n    pass",
    "file_path": "neha.sharma/dn_auth_4.py",
    "start_line": 2,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DNAuthentication",
    "content": "\n# Class to handle user authentication\nclass DNAuthentication:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n\n    def dn_validate_credentials(self):\n        pass\n\n    def dn_generate_session_id(self):\n        pass",
    "file_path": "neha.sharma/dn_auth_4.py",
    "start_line": 7,
    "end_line": 18,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DNSession",
    "content": "\n# Class to manage user sessions\nclass DNSession:\n    sessions = {}\n\n    def __init__(self, session_id, user_id):\n        self.session_id = session_id\n        self.user_id = user_id\n\n    def dn_add_session(self):\n        pass\n\n    def dn_remove_session(self):\n        pass",
    "file_path": "neha.sharma/dn_auth_4.py",
    "start_line": 19,
    "end_line": 32,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_verify_session",
    "content": "\n# Function to verify user session\ndef dn_verify_session(session_id):\n    pass",
    "file_path": "neha.sharma/dn_auth_4.py",
    "start_line": 33,
    "end_line": 36,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_logout",
    "content": "\n# Function to log user out\ndef dn_logout(session_id):\n    pass",
    "file_path": "neha.sharma/dn_auth_4.py",
    "start_line": 37,
    "end_line": 40,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, username, password):\n        self.username = username\n        self.password = password",
    "file_path": "neha.sharma/dn_auth_4.py",
    "start_line": 10,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_credentials",
    "content": "\n    def dn_validate_credentials(self):\n        pass",
    "file_path": "neha.sharma/dn_auth_4.py",
    "start_line": 13,
    "end_line": 15,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_session_id",
    "content": "\n    def dn_generate_session_id(self):\n        pass",
    "file_path": "neha.sharma/dn_auth_4.py",
    "start_line": 16,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "\n    def __init__(self, session_id, user_id):\n        self.session_id = session_id\n        self.user_id = user_id",
    "file_path": "neha.sharma/dn_auth_4.py",
    "start_line": 23,
    "end_line": 26,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_add_session",
    "content": "\n    def dn_add_session(self):\n        pass",
    "file_path": "neha.sharma/dn_auth_4.py",
    "start_line": 27,
    "end_line": 29,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_remove_session",
    "content": "\n    def dn_remove_session(self):\n        pass",
    "file_path": "neha.sharma/dn_auth_4.py",
    "start_line": 30,
    "end_line": 32,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DN_AuthManager",
    "content": "# Author: neha.sharma\n\nclass DN_AuthManager:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n        \n    def dn_login(self):\n        # Perform login operation\n        if self.username == \"admin\" and self.password == \"password\":\n            return True\n        else:\n            return False",
    "file_path": "neha.sharma/dn_auth_3.py",
    "start_line": 2,
    "end_line": 14,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_token",
    "content": "\ndef dn_generate_token(user_id):\n    # Generate authentication token for the user\n    token = \"TOKEN_\" + str(user_id)\n    return token",
    "file_path": "neha.sharma/dn_auth_3.py",
    "start_line": 15,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DN_AuthValidator",
    "content": "\nclass DN_AuthValidator:\n    def __init__(self, token):\n        self.token = token\n        \n    def dn_validate_token(self):\n        # Validate the authentication token\n        if self.token.startswith(\"TOKEN_\"):\n            return True\n        else:\n            return False",
    "file_path": "neha.sharma/dn_auth_3.py",
    "start_line": 20,
    "end_line": 30,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_reset_password",
    "content": "\ndef dn_reset_password(username, new_password):\n    # Reset the password for the user\n    # Code implementation for password reset\n    pass",
    "file_path": "neha.sharma/dn_auth_3.py",
    "start_line": 31,
    "end_line": 35,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, username, password):\n        self.username = username\n        self.password = password",
    "file_path": "neha.sharma/dn_auth_3.py",
    "start_line": 5,
    "end_line": 7,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_login",
    "content": "        \n    def dn_login(self):\n        # Perform login operation\n        if self.username == \"admin\" and self.password == \"password\":\n            return True\n        else:\n            return False",
    "file_path": "neha.sharma/dn_auth_3.py",
    "start_line": 8,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, token):\n        self.token = token",
    "file_path": "neha.sharma/dn_auth_3.py",
    "start_line": 22,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_token",
    "content": "        \n    def dn_validate_token(self):\n        # Validate the authentication token\n        if self.token.startswith(\"TOKEN_\"):\n            return True\n        else:\n            return False",
    "file_path": "neha.sharma/dn_auth_3.py",
    "start_line": 24,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DN_Encryption",
    "content": "import base64\nimport hashlib\n\n\n# Encryption class\nclass DN_Encryption:\n    def __init__(self):\n        pass\n\n    # Function to encrypt data using MD5 hash\n    def dn_encrypt_md5(self, data):\n        encrypted_data = hashlib.md5(data.encode()).hexdigest()\n        return encrypted_data\n\n    # Function to encrypt data using Base64 encoding\n    def dn_encrypt_base64(self, data):\n        encrypted_data = base64.b64encode(data.encode()).decode()\n        return encrypted_data",
    "file_path": "neha.sharma/dn_encryption_4.py",
    "start_line": 7,
    "end_line": 21,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_main",
    "content": "\n# Main function to demonstrate encryption functionalities\ndef dn_main():\n    data = \"Hello, this is a secret message.\"\n\n    # Initialize encryption object\n    encryption = DN_Encryption()\n\n    # Encrypt data using MD5\n    md5_encrypted = encryption.dn_encrypt_md5(data)\n    print(f\"MD5 Encrypted Data: {md5_encrypted}\")\n\n    # Encrypt data using Base64\n    base64_encrypted = encryption.dn_encrypt_base64(data)\n    print(f\"Base64 Encrypted Data: {base64_encrypted}\")",
    "file_path": "neha.sharma/dn_encryption_4.py",
    "start_line": 22,
    "end_line": 36,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        pass",
    "file_path": "neha.sharma/dn_encryption_4.py",
    "start_line": 10,
    "end_line": 11,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_encrypt_md5",
    "content": "import base64\nimport hashlib\n\n\n    # Function to encrypt data using MD5 hash\n    def dn_encrypt_md5(self, data):\n        encrypted_data = hashlib.md5(data.encode()).hexdigest()\n        return encrypted_data",
    "file_path": "neha.sharma/dn_encryption_4.py",
    "start_line": 12,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_encrypt_base64",
    "content": "import base64\nimport hashlib\n\n\n    # Function to encrypt data using Base64 encoding\n    def dn_encrypt_base64(self, data):\n        encrypted_data = base64.b64encode(data.encode()).decode()\n        return encrypted_data",
    "file_path": "neha.sharma/dn_encryption_4.py",
    "start_line": 17,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DN_Encryption",
    "content": "import base64\nimport hashlib\n\n\n# 대칭키를 이용한 암호화 및 복호화 기능 제공\nclass DN_Encryption:\n    \n    def __init__(self, key):\n        self.key = hashlib.sha256(key.encode()).digest()\n\n    # 문자열을 암호화하여 반환\n    def dn_encrypt(self, data):\n        data = data.encode()\n        cipher = AES.new(self.key, AES.MODE_EAX)\n        ciphertext, tag = cipher.encrypt_and_digest(data)\n        return base64.b64encode(cipher.nonce + tag + ciphertext)\n\n    # 암호화된 문자열을 복호화하여 반환\n    def dn_decrypt(self, enc_data):\n        enc_data = base64.b64decode(enc_data)\n        nonce = enc_data[:16]\n        tag = enc_data[16:32]\n        ciphertext = enc_data[32:]\n        cipher = AES.new(self.key, AES.MODE_EAX, nonce)\n        data = cipher.decrypt_and_verify(ciphertext, tag)\n        return data.decode()",
    "file_path": "neha.sharma/dn_encryption_5.py",
    "start_line": 6,
    "end_line": 28,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_hash_message",
    "content": "import base64\nimport hashlib\n\n\n# 해시함수를 이용한 메시지 인증 기능 제공\ndef dn_hash_message(message):\n    return hashlib.sha256(message.encode()).hexdigest()",
    "file_path": "neha.sharma/dn_encryption_5.py",
    "start_line": 29,
    "end_line": 32,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_random_key",
    "content": "import base64\nimport hashlib\n\n\n# 랜덤 키 생성 기능 제공\ndef dn_generate_random_key():\n    return base64.urlsafe_b64encode(os.urandom(32))",
    "file_path": "neha.sharma/dn_encryption_5.py",
    "start_line": 33,
    "end_line": 36,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "import base64\nimport hashlib\n\n    \n    def __init__(self, key):\n        self.key = hashlib.sha256(key.encode()).digest()",
    "file_path": "neha.sharma/dn_encryption_5.py",
    "start_line": 9,
    "end_line": 11,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_encrypt",
    "content": "import base64\nimport hashlib\n\n\n    # 문자열을 암호화하여 반환\n    def dn_encrypt(self, data):\n        data = data.encode()\n        cipher = AES.new(self.key, AES.MODE_EAX)\n        ciphertext, tag = cipher.encrypt_and_digest(data)\n        return base64.b64encode(cipher.nonce + tag + ciphertext)",
    "file_path": "neha.sharma/dn_encryption_5.py",
    "start_line": 12,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_decrypt",
    "content": "import base64\nimport hashlib\n\n\n    # 암호화된 문자열을 복호화하여 반환\n    def dn_decrypt(self, enc_data):\n        enc_data = base64.b64decode(enc_data)\n        nonce = enc_data[:16]\n        tag = enc_data[16:32]\n        ciphertext = enc_data[32:]\n        cipher = AES.new(self.key, AES.MODE_EAX, nonce)\n        data = cipher.decrypt_and_verify(ciphertext, tag)\n        return data.decode()",
    "file_path": "neha.sharma/dn_encryption_5.py",
    "start_line": 19,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_encrypt_string",
    "content": "import base64\nimport hashlib\n\n\n# @dn- 문자열을 암호화하는 함수\ndef dn_encrypt_string(input_string):\n    hash_object = hashlib.md5(input_string.encode())\n    return hash_object.hexdigest()",
    "file_path": "neha.sharma/dn_encryption_1.py",
    "start_line": 6,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_decrypt_string",
    "content": "import base64\nimport hashlib\n\n\n# @dn- 암호화된 문자열을 복호화하는 함수\ndef dn_decrypt_string(encrypted_string):\n    return base64.b64decode(encrypted_string).decode('utf-8')",
    "file_path": "neha.sharma/dn_encryption_1.py",
    "start_line": 11,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DN_SymmetricEncryption",
    "content": "\n# @dn- 대칭키 암호화 클래스\nclass DN_SymmetricEncryption:\n    def __init__(self, key):\n        self.key = key\n\n    def encrypt(self, plaintext):\n        cipher = AES.new(self.key, AES.MODE_CBC)\n        ct_bytes = cipher.encrypt(pad(plaintext, AES.block_size))\n        iv = b64encode(cipher.iv).decode('utf-8')\n        ct = b64encode(ct_bytes).decode('utf-8')\n        return iv, ct\n\n    def decrypt(self, iv, ciphertext):\n        iv = b64decode(iv)\n        ct = b64decode(ciphertext)\n        cipher = AES.new(self.key, AES.MODE_CBC, iv)\n        pt = unpad(cipher.decrypt(ct), AES.block_size)\n        return pt.decode('utf-8')",
    "file_path": "neha.sharma/dn_encryption_1.py",
    "start_line": 15,
    "end_line": 33,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DN_AsymmetricEncryption",
    "content": "import base64\nimport hashlib\n\n        \n# @dn- 공개키/개인키 암호화 클래스\nclass DN_AsymmetricEncryption:\n    def __init__(self, public_key, private_key):\n        self.public_key = public_key\n        self.private_key = private_key\n\n    def encrypt(self, plaintext):\n        public_key = RSA.import_key(self.public_key)\n        cipher = PKCS1_OAEP.new(public_key)\n        ciphertext = cipher.encrypt(plaintext.encode())\n        return base64.b64encode(ciphertext).decode('utf-8')\n\n    def decrypt(self, ciphertext):\n        private_key = RSA.import_key(self.private_key)\n        cipher = PKCS1_OAEP.new(private_key)\n        plaintext = cipher.decrypt(base64.b64decode(ciphertext))\n        return plaintext.decode('utf-8')",
    "file_path": "neha.sharma/dn_encryption_1.py",
    "start_line": 34,
    "end_line": 51,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, key):\n        self.key = key",
    "file_path": "neha.sharma/dn_encryption_1.py",
    "start_line": 18,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "encrypt",
    "content": "\n    def encrypt(self, plaintext):\n        cipher = AES.new(self.key, AES.MODE_CBC)\n        ct_bytes = cipher.encrypt(pad(plaintext, AES.block_size))\n        iv = b64encode(cipher.iv).decode('utf-8')\n        ct = b64encode(ct_bytes).decode('utf-8')\n        return iv, ct",
    "file_path": "neha.sharma/dn_encryption_1.py",
    "start_line": 20,
    "end_line": 26,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "decrypt",
    "content": "\n    def decrypt(self, iv, ciphertext):\n        iv = b64decode(iv)\n        ct = b64decode(ciphertext)\n        cipher = AES.new(self.key, AES.MODE_CBC, iv)\n        pt = unpad(cipher.decrypt(ct), AES.block_size)\n        return pt.decode('utf-8')",
    "file_path": "neha.sharma/dn_encryption_1.py",
    "start_line": 27,
    "end_line": 33,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, public_key, private_key):\n        self.public_key = public_key\n        self.private_key = private_key",
    "file_path": "neha.sharma/dn_encryption_1.py",
    "start_line": 37,
    "end_line": 39,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "encrypt",
    "content": "import base64\nimport hashlib\n\n\n    def encrypt(self, plaintext):\n        public_key = RSA.import_key(self.public_key)\n        cipher = PKCS1_OAEP.new(public_key)\n        ciphertext = cipher.encrypt(plaintext.encode())\n        return base64.b64encode(ciphertext).decode('utf-8')",
    "file_path": "neha.sharma/dn_encryption_1.py",
    "start_line": 40,
    "end_line": 45,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "decrypt",
    "content": "import base64\nimport hashlib\n\n\n    def decrypt(self, ciphertext):\n        private_key = RSA.import_key(self.private_key)\n        cipher = PKCS1_OAEP.new(private_key)\n        plaintext = cipher.decrypt(base64.b64decode(ciphertext))\n        return plaintext.decode('utf-8')",
    "file_path": "neha.sharma/dn_encryption_1.py",
    "start_line": 46,
    "end_line": 51,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_salt",
    "content": "\ndef dn_generate_salt():\n    \"\"\"\n    Generate a random salt for password hashing\n    \"\"\"\n    # implementation of generating a random salt\n    pass",
    "file_path": "neha.sharma/dn_auth_2.py",
    "start_line": 4,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_hash_password",
    "content": "import hashlib\n\n\ndef dn_hash_password(password, salt):\n    \"\"\"\n    Hash the password using SHA-256 algorithm and the given salt\n    \"\"\"\n    password = password.encode('utf-8')\n    salt = salt.encode('utf-8')\n    \n    hash_object = hashlib.sha256()\n    hash_object.update(password + salt)\n    return hash_object.hexdigest()",
    "file_path": "neha.sharma/dn_auth_2.py",
    "start_line": 11,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DNUser",
    "content": "\nclass DNUser:\n    def __init__(self, username, password):\n        self.username = username\n        self.salt = dn_generate_salt()\n        self.hashed_password = dn_hash_password(password, self.salt)\n    \n    def authenticate(self, password):\n        \"\"\"\n        Check if the input password matches the user's password\n        \"\"\"\n        return self.hashed_password == dn_hash_password(password, self.salt)",
    "file_path": "neha.sharma/dn_auth_2.py",
    "start_line": 22,
    "end_line": 33,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DNAuthManager",
    "content": "\nclass DNAuthManager:\n    def __init__(self):\n        self.users = {}\n    \n    def add_user(self, username, password):\n        if username not in self.users:\n            self.users[username] = DNUser(username, password)\n    \n    def authenticate_user(self, username, password):\n        if username in self.users:\n            return self.users[username].authenticate(password)\n        return False",
    "file_path": "neha.sharma/dn_auth_2.py",
    "start_line": 34,
    "end_line": 46,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, username, password):\n        self.username = username\n        self.salt = dn_generate_salt()\n        self.hashed_password = dn_hash_password(password, self.salt)",
    "file_path": "neha.sharma/dn_auth_2.py",
    "start_line": 24,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "authenticate",
    "content": "    \n    def authenticate(self, password):\n        \"\"\"\n        Check if the input password matches the user's password\n        \"\"\"\n        return self.hashed_password == dn_hash_password(password, self.salt)",
    "file_path": "neha.sharma/dn_auth_2.py",
    "start_line": 28,
    "end_line": 33,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.users = {}",
    "file_path": "neha.sharma/dn_auth_2.py",
    "start_line": 36,
    "end_line": 37,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "add_user",
    "content": "    \n    def add_user(self, username, password):\n        if username not in self.users:\n            self.users[username] = DNUser(username, password)",
    "file_path": "neha.sharma/dn_auth_2.py",
    "start_line": 38,
    "end_line": 41,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "authenticate_user",
    "content": "    \n    def authenticate_user(self, username, password):\n        if username in self.users:\n            return self.users[username].authenticate(password)\n        return False",
    "file_path": "neha.sharma/dn_auth_2.py",
    "start_line": 42,
    "end_line": 46,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DNAuditEngine",
    "content": "import logging\nimport os\n\n\n# 보안 감사 관련 기능을 하는 클래스\nclass DNAuditEngine:\n    \n    def __init__(self, path):\n        self.path = path\n        self.files = self._get_files()\n    \n    def _get_files(self):\n        files = []\n        for file in os.listdir(self.path):\n            if file.endswith(\".py\"):\n                files.append(os.path.join(self.path, file))\n        return files\n    \n    def dn_run_audit(self):\n        logging.info(\"보안 감사가 시작되었습니다.\")\n        for file in self.files:\n            self._audit_file(file)\n    \n    def _audit_file(self, file):\n        logging.info(f\"{file} 파일을 검사 중입니다.\")\n        with open(file, 'r') as f:\n            lines = f.readlines()\n            for line in lines:\n                if \"password\" in line:\n                    logging.warning(\"패스워드 관련 정보가 포함되어 있습니다.\")\n                if \"secret_key\" in line:\n                    logging.warning(\"시크릿 키가 노출되어 있습니다.\")",
    "file_path": "neha.sharma/dn_audit_3.py",
    "start_line": 10,
    "end_line": 38,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    \n    def __init__(self, path):\n        self.path = path\n        self.files = self._get_files()",
    "file_path": "neha.sharma/dn_audit_3.py",
    "start_line": 13,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "_get_files",
    "content": "import logging\nimport os\n\n    \n    def _get_files(self):\n        files = []\n        for file in os.listdir(self.path):\n            if file.endswith(\".py\"):\n                files.append(os.path.join(self.path, file))\n        return files",
    "file_path": "neha.sharma/dn_audit_3.py",
    "start_line": 17,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "dn_run_audit",
    "content": "import logging\nimport os\n\n    \n    def dn_run_audit(self):\n        logging.info(\"보안 감사가 시작되었습니다.\")\n        for file in self.files:\n            self._audit_file(file)",
    "file_path": "neha.sharma/dn_audit_3.py",
    "start_line": 24,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "FunctionDef",
    "name": "_audit_file",
    "content": "import logging\nimport os\n\n    \n    def _audit_file(self, file):\n        logging.info(f\"{file} 파일을 검사 중입니다.\")\n        with open(file, 'r') as f:\n            lines = f.readlines()\n            for line in lines:\n                if \"password\" in line:\n                    logging.warning(\"패스워드 관련 정보가 포함되어 있습니다.\")\n                if \"secret_key\" in line:\n                    logging.warning(\"시크릿 키가 노출되어 있습니다.\")",
    "file_path": "neha.sharma/dn_audit_3.py",
    "start_line": 29,
    "end_line": 38,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "neha.sharma"
  },
  {
    "type": "ClassDef",
    "name": "DNStorageManager",
    "content": "# This file contains functions and classes related to storage in Danal's codebase\n\nclass DNStorageManager:\n    def __init__(self):\n        self.data = {}\n\n    def dn_add_data(self, key, value):\n        self.data[key] = value\n\n    def dn_get_data(self, key):\n        return self.data.get(key, None)\n\n    def dn_remove_data(self, key):\n        if key in self.data:\n            del self.data[key]",
    "file_path": "jun.kim/dn_storage_1.py",
    "start_line": 2,
    "end_line": 16,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_storage",
    "content": "\ndef dn_process_storage():\n    storage_manager = DNStorageManager()\n    \n    storage_manager.dn_add_data(\"username\", \"jun.kim\")\n    storage_manager.dn_add_data(\"email\", \"jun.kim@email.com\")\n    \n    print(storage_manager.dn_get_data(\"username\"))\n    print(storage_manager.dn_get_data(\"email\"))\n    \n    storage_manager.dn_remove_data(\"email\")\n    print(storage_manager.dn_get_data(\"email\"))  # This should print None as the email data has been removed",
    "file_path": "jun.kim/dn_storage_1.py",
    "start_line": 17,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.data = {}",
    "file_path": "jun.kim/dn_storage_1.py",
    "start_line": 5,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_add_data",
    "content": "\n    def dn_add_data(self, key, value):\n        self.data[key] = value",
    "file_path": "jun.kim/dn_storage_1.py",
    "start_line": 7,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_data",
    "content": "\n    def dn_get_data(self, key):\n        return self.data.get(key, None)",
    "file_path": "jun.kim/dn_storage_1.py",
    "start_line": 10,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_remove_data",
    "content": "\n    def dn_remove_data(self, key):\n        if key in self.data:\n            del self.data[key]",
    "file_path": "jun.kim/dn_storage_1.py",
    "start_line": 13,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNStorage",
    "content": "import sqlite3\n\n\n# 데이터 저장소 클래스\nclass DNStorage:\n    def __init__(self, db_name):\n        self.conn = sqlite3.connect(db_name)\n        self.cursor = self.conn.cursor()\n\n    def dn_create_table(self, table_name, columns):\n        query = f\"CREATE TABLE IF NOT EXISTS {table_name} ({columns})\"\n        self.cursor.execute(query)\n        self.conn.commit()\n\n    def dn_insert_data(self, table_name, data):\n        placeholders = ', '.join(['?' for _ in range(len(data))])\n        query = f\"INSERT INTO {table_name} VALUES ({placeholders})\"\n        self.cursor.execute(query, data)\n        self.conn.commit()\n\n    def dn_get_data(self, table_name, condition=None):\n        query = f\"SELECT * FROM {table_name}\"\n        if condition:\n            query += f\" WHERE {condition}\"\n        self.cursor.execute(query)\n        return self.cursor.fetchall()\n\n    def dn_delete_data(self, table_name, condition):\n        query = f\"DELETE FROM {table_name} WHERE {condition}\"\n        self.cursor.execute(query)\n        self.conn.commit()\n\n    def dn_close_connection(self):\n        self.conn.close()",
    "file_path": "jun.kim/dn_storage_5.py",
    "start_line": 6,
    "end_line": 37,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "import sqlite3\n\n    def __init__(self, db_name):\n        self.conn = sqlite3.connect(db_name)\n        self.cursor = self.conn.cursor()",
    "file_path": "jun.kim/dn_storage_5.py",
    "start_line": 9,
    "end_line": 11,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_create_table",
    "content": "\n    def dn_create_table(self, table_name, columns):\n        query = f\"CREATE TABLE IF NOT EXISTS {table_name} ({columns})\"\n        self.cursor.execute(query)\n        self.conn.commit()",
    "file_path": "jun.kim/dn_storage_5.py",
    "start_line": 12,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_insert_data",
    "content": "\n    def dn_insert_data(self, table_name, data):\n        placeholders = ', '.join(['?' for _ in range(len(data))])\n        query = f\"INSERT INTO {table_name} VALUES ({placeholders})\"\n        self.cursor.execute(query, data)\n        self.conn.commit()",
    "file_path": "jun.kim/dn_storage_5.py",
    "start_line": 17,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_data",
    "content": "\n    def dn_get_data(self, table_name, condition=None):\n        query = f\"SELECT * FROM {table_name}\"\n        if condition:\n            query += f\" WHERE {condition}\"\n        self.cursor.execute(query)\n        return self.cursor.fetchall()",
    "file_path": "jun.kim/dn_storage_5.py",
    "start_line": 23,
    "end_line": 29,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_delete_data",
    "content": "\n    def dn_delete_data(self, table_name, condition):\n        query = f\"DELETE FROM {table_name} WHERE {condition}\"\n        self.cursor.execute(query)\n        self.conn.commit()",
    "file_path": "jun.kim/dn_storage_5.py",
    "start_line": 30,
    "end_line": 34,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_close_connection",
    "content": "\n    def dn_close_connection(self):\n        self.conn.close()",
    "file_path": "jun.kim/dn_storage_5.py",
    "start_line": 35,
    "end_line": 37,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNMobileUIUpdater",
    "content": "# 작성자: jun.kim\n# 작성일: 2021-07-22\n\n# dn- 모바일 UI 업데이트를 위한 클래스\nclass DNMobileUIUpdater:\n    def __init__(self, app_version):\n        self.app_version = app_version\n\n    def dn_check_update(self):\n        # 업데이트 확인 로직\n        pass\n\n    def dn_download_update(self):\n        # 업데이트 다운로드 로직\n        pass",
    "file_path": "jun.kim/dn_mobile_ui_2.py",
    "start_line": 2,
    "end_line": 16,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNMobileUIManager",
    "content": "\n# dn- 모바일 UI 관리를 위한 클래스\nclass DNMobileUIManager:\n    def __init__(self, theme):\n        self.theme = theme\n\n    def dn_set_theme(self, new_theme):\n        # 테마 설정 로직\n        pass\n\n    def dn_change_font_size(self, size):\n        # 폰트 사이즈 변경 로직\n        pass",
    "file_path": "jun.kim/dn_mobile_ui_2.py",
    "start_line": 17,
    "end_line": 29,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNMobileUIElements",
    "content": "\n# dn- 모바일 UI 요소들을 관리하는 클래스\nclass DNMobileUIElements:\n    def __init__(self, elements):\n        self.elements = elements\n\n    def dn_show_element(self, element_id):\n        # 요소 보이기 로직\n        pass\n\n    def dn_hide_element(self, element_id):\n        # 요소 숨기기 로직\n        pass",
    "file_path": "jun.kim/dn_mobile_ui_2.py",
    "start_line": 30,
    "end_line": 42,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_run_mobile_ui",
    "content": "\n# dn- 메인 실행 함수\ndef dn_run_mobile_ui():\n    ui_updater = DNMobileUIUpdater(\"1.2.3\")\n    ui_updater.dn_check_update()\n\n    ui_manager = DNMobileUIManager(\"light\")\n    ui_manager.dn_set_theme(\"dark\")\n\n    ui_elements = DNMobileUIElements([\"button\", \"input\", \"text\"])\n    ui_elements.dn_show_element(\"button\")",
    "file_path": "jun.kim/dn_mobile_ui_2.py",
    "start_line": 43,
    "end_line": 53,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, app_version):\n        self.app_version = app_version",
    "file_path": "jun.kim/dn_mobile_ui_2.py",
    "start_line": 7,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_update",
    "content": "\n    def dn_check_update(self):\n        # 업데이트 확인 로직\n        pass",
    "file_path": "jun.kim/dn_mobile_ui_2.py",
    "start_line": 9,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_download_update",
    "content": "\n    def dn_download_update(self):\n        # 업데이트 다운로드 로직\n        pass",
    "file_path": "jun.kim/dn_mobile_ui_2.py",
    "start_line": 13,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, theme):\n        self.theme = theme",
    "file_path": "jun.kim/dn_mobile_ui_2.py",
    "start_line": 20,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_set_theme",
    "content": "\n    def dn_set_theme(self, new_theme):\n        # 테마 설정 로직\n        pass",
    "file_path": "jun.kim/dn_mobile_ui_2.py",
    "start_line": 22,
    "end_line": 25,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_change_font_size",
    "content": "\n    def dn_change_font_size(self, size):\n        # 폰트 사이즈 변경 로직\n        pass",
    "file_path": "jun.kim/dn_mobile_ui_2.py",
    "start_line": 26,
    "end_line": 29,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, elements):\n        self.elements = elements",
    "file_path": "jun.kim/dn_mobile_ui_2.py",
    "start_line": 33,
    "end_line": 34,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_show_element",
    "content": "\n    def dn_show_element(self, element_id):\n        # 요소 보이기 로직\n        pass",
    "file_path": "jun.kim/dn_mobile_ui_2.py",
    "start_line": 35,
    "end_line": 38,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_hide_element",
    "content": "\n    def dn_hide_element(self, element_id):\n        # 요소 숨기기 로직\n        pass",
    "file_path": "jun.kim/dn_mobile_ui_2.py",
    "start_line": 39,
    "end_line": 42,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNStorage",
    "content": "# This Python script is related to the storage functionality for Danal\n\nclass DNStorage:\n    def __init__(self):\n        self.data = {}\n\n    def dn_store_data(self, key, value):\n        self.data[key] = value\n        print(f\"Stored data: {key} - {value}\")\n\n    def dn_get_data(self, key):\n        if key in self.data:\n            print(f\"Retrieved data: {key} - {self.data[key]}\")\n            return self.data[key]\n        else:\n            print(\"Data not found\")\n            return None",
    "file_path": "jun.kim/dn_storage_4.py",
    "start_line": 2,
    "end_line": 18,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_encrypt_data",
    "content": "\ndef dn_encrypt_data(data):\n    # Encryption logic here\n    encrypted_data = data[::-1]\n    return encrypted_data",
    "file_path": "jun.kim/dn_storage_4.py",
    "start_line": 19,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_decrypt_data",
    "content": "\ndef dn_decrypt_data(data):\n    # Decryption logic here\n    decrypted_data = data[::-1]\n    return decrypted_data",
    "file_path": "jun.kim/dn_storage_4.py",
    "start_line": 24,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.data = {}",
    "file_path": "jun.kim/dn_storage_4.py",
    "start_line": 5,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_store_data",
    "content": "\n    def dn_store_data(self, key, value):\n        self.data[key] = value\n        print(f\"Stored data: {key} - {value}\")",
    "file_path": "jun.kim/dn_storage_4.py",
    "start_line": 7,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_data",
    "content": "\n    def dn_get_data(self, key):\n        if key in self.data:\n            print(f\"Retrieved data: {key} - {self.data[key]}\")\n            return self.data[key]\n        else:\n            print(\"Data not found\")\n            return None",
    "file_path": "jun.kim/dn_storage_4.py",
    "start_line": 11,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNButton",
    "content": "\n# 기능 1: 버튼 클래스\nclass DNButton:\n    def __init__(self, text):\n        self.text = text\n\n    def click(self):\n        print(f'{self.text} 버튼이 클릭되었습니다.')",
    "file_path": "jun.kim/dn_mobile_ui_3.py",
    "start_line": 5,
    "end_line": 12,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNLayout",
    "content": "\n# 기능 2: 레이아웃 클래스\nclass DNLayout:\n    def __init__(self, orientation):\n        self.orientation = orientation\n        self.components = []\n\n    def add_component(self, component):\n        self.components.append(component)",
    "file_path": "jun.kim/dn_mobile_ui_3.py",
    "start_line": 13,
    "end_line": 21,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNTextField",
    "content": "\n# 기능 3: 텍스트 필드 클래스\nclass DNTextField:\n    def __init__(self):\n        self.text = ''\n\n    def set_text(self, text):\n        self.text = text\n\n    def get_text(self):\n        return self.text",
    "file_path": "jun.kim/dn_mobile_ui_3.py",
    "start_line": 22,
    "end_line": 32,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_main",
    "content": "dn_theme = 'light'\n\n\n# 메인 함수\ndef dn_main():\n    button1 = DNButton('확인')\n    button2 = DNButton('취소')\n    \n    layout = DNLayout('vertical')\n    layout.add_component(button1)\n    layout.add_component(button2)\n    \n    text_field = DNTextField()\n    text_field.set_text('안녕하세요')\n    \n    print('테마 설정:', dn_theme)\n    for component in layout.components:\n        component.click()\n    \n    print('텍스트 필드 내용:', text_field.get_text())",
    "file_path": "jun.kim/dn_mobile_ui_3.py",
    "start_line": 33,
    "end_line": 50,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 1
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, text):\n        self.text = text",
    "file_path": "jun.kim/dn_mobile_ui_3.py",
    "start_line": 8,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "click",
    "content": "\n    def click(self):\n        print(f'{self.text} 버튼이 클릭되었습니다.')",
    "file_path": "jun.kim/dn_mobile_ui_3.py",
    "start_line": 10,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, orientation):\n        self.orientation = orientation\n        self.components = []",
    "file_path": "jun.kim/dn_mobile_ui_3.py",
    "start_line": 16,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "add_component",
    "content": "\n    def add_component(self, component):\n        self.components.append(component)",
    "file_path": "jun.kim/dn_mobile_ui_3.py",
    "start_line": 19,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.text = ''",
    "file_path": "jun.kim/dn_mobile_ui_3.py",
    "start_line": 25,
    "end_line": 26,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "set_text",
    "content": "\n    def set_text(self, text):\n        self.text = text",
    "file_path": "jun.kim/dn_mobile_ui_3.py",
    "start_line": 27,
    "end_line": 29,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "get_text",
    "content": "\n    def get_text(self):\n        return self.text",
    "file_path": "jun.kim/dn_mobile_ui_3.py",
    "start_line": 30,
    "end_line": 32,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DN_DeviceManager",
    "content": "device_info = device_manager.dn_get_device_info(device_id)\nis_active = dn_check_device_status(device_info)\ndevice_manager = DN_DeviceManager(devices)\nnew_data = {'status': 'inactive'}\ndevices = [\n    {'id': 1, 'name': 'Phone', 'status': 'active'},\n    {'id': 2, 'name': 'Tablet', 'status': 'inactive'}\n]\nupdated_device_info = dn_update_device_info(device_info, new_data)\ndevice_id = 1\n\n\n# 기기 관련 기능을 다루는 클래스\nclass DN_DeviceManager:\n    def __init__(self, device_list):\n        self.device_list = device_list\n\n    def dn_get_device_info(self, device_id):\n        for device in self.device_list:\n            if device['id'] == device_id:\n                return device\n        return None",
    "file_path": "jun.kim/dn_device_5.py",
    "start_line": 2,
    "end_line": 12,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 7
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_device_status",
    "content": "device_info = device_manager.dn_get_device_info(device_id)\nis_active = dn_check_device_status(device_info)\ndevice_manager = DN_DeviceManager(devices)\nnew_data = {'status': 'inactive'}\ndevices = [\n    {'id': 1, 'name': 'Phone', 'status': 'active'},\n    {'id': 2, 'name': 'Tablet', 'status': 'inactive'}\n]\nupdated_device_info = dn_update_device_info(device_info, new_data)\ndevice_id = 1\n\n\n# 기기 관련 함수들\ndef dn_check_device_status(device_info):\n    if device_info['status'] == 'active':\n        return True\n    else:\n        return False",
    "file_path": "jun.kim/dn_device_5.py",
    "start_line": 13,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 7
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_update_device_info",
    "content": "device_info = device_manager.dn_get_device_info(device_id)\nis_active = dn_check_device_status(device_info)\ndevice_manager = DN_DeviceManager(devices)\nnew_data = {'status': 'inactive'}\ndevices = [\n    {'id': 1, 'name': 'Phone', 'status': 'active'},\n    {'id': 2, 'name': 'Tablet', 'status': 'inactive'}\n]\nupdated_device_info = dn_update_device_info(device_info, new_data)\ndevice_id = 1\n\n\ndef dn_update_device_info(device_info, new_data):\n    for key, value in new_data.items():\n        device_info[key] = value\n    return device_info",
    "file_path": "jun.kim/dn_device_5.py",
    "start_line": 20,
    "end_line": 24,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 7
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, device_list):\n        self.device_list = device_list",
    "file_path": "jun.kim/dn_device_5.py",
    "start_line": 5,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_device_info",
    "content": "device_info = device_manager.dn_get_device_info(device_id)\nis_active = dn_check_device_status(device_info)\ndevice_manager = DN_DeviceManager(devices)\nnew_data = {'status': 'inactive'}\ndevices = [\n    {'id': 1, 'name': 'Phone', 'status': 'active'},\n    {'id': 2, 'name': 'Tablet', 'status': 'inactive'}\n]\nupdated_device_info = dn_update_device_info(device_info, new_data)\ndevice_id = 1\n\n\n    def dn_get_device_info(self, device_id):\n        for device in self.device_list:\n            if device['id'] == device_id:\n                return device\n        return None",
    "file_path": "jun.kim/dn_device_5.py",
    "start_line": 7,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 7
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DN_Device",
    "content": "# 작성자: Jun Kim\n# 작성일: 2022년 11월 15일\n\nclass DN_Device:\n    def __init__(self, name):\n        self.name = name\n        self.status = \"off\"\n    \n    def dn_turn_on(self):\n        self.status = \"on\"\n        print(f\"{self.name}이(가) 켜졌습니다.\")\n    \n    def dn_turn_off(self):\n        self.status = \"off\"\n        print(f\"{self.name}이(가) 꺼졌습니다.\")",
    "file_path": "jun.kim/dn_device_1.py",
    "start_line": 2,
    "end_line": 16,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_device_status",
    "content": "\ndef dn_check_device_status(device):\n    if device.status == \"on\":\n        print(f\"{device.name}이(가) 현재 켜져 있습니다.\")\n    else:\n        print(f\"{device.name}이(가) 현재 꺼져 있습니다.\")",
    "file_path": "jun.kim/dn_device_1.py",
    "start_line": 17,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_calculate_battery_life",
    "content": "dn_phone = DN_Device(\"Smartphone\")\nremaining_battery_life = dn_calculate_battery_life(battery_capacity, usage)\nusage = 500\nbattery_capacity = 3000\n\n\ndef dn_calculate_battery_life(battery_capacity, usage):\n    battery_life = battery_capacity - usage\n    return battery_life",
    "file_path": "jun.kim/dn_device_1.py",
    "start_line": 23,
    "end_line": 26,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 4
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, name):\n        self.name = name\n        self.status = \"off\"",
    "file_path": "jun.kim/dn_device_1.py",
    "start_line": 6,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_turn_on",
    "content": "    \n    def dn_turn_on(self):\n        self.status = \"on\"\n        print(f\"{self.name}이(가) 켜졌습니다.\")",
    "file_path": "jun.kim/dn_device_1.py",
    "start_line": 9,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_turn_off",
    "content": "    \n    def dn_turn_off(self):\n        self.status = \"off\"\n        print(f\"{self.name}이(가) 꺼졌습니다.\")",
    "file_path": "jun.kim/dn_device_1.py",
    "start_line": 13,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNMobileUI",
    "content": "# 이 파일은 'Danal' 회사의 코드베이스에서 mobile_ui 기능과 관련된 기능들을 담고 있습니다.\n\n# 모바일 UI 요소를 다루는 클래스\nclass DNMobileUI:\n    def __init__(self, name):\n        self.name = name\n\n    def dn_display_message(self, message):\n        print(message)",
    "file_path": "jun.kim/dn_mobile_ui_4.py",
    "start_line": 2,
    "end_line": 10,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_format_text",
    "content": "\n# 모바일 UI 관련 유틸리티 함수\ndef dn_format_text(text):\n    return text.upper()",
    "file_path": "jun.kim/dn_mobile_ui_4.py",
    "start_line": 11,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_calculate_layout",
    "content": "\ndef dn_calculate_layout(width, height):\n    return width * height",
    "file_path": "jun.kim/dn_mobile_ui_4.py",
    "start_line": 15,
    "end_line": 17,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNUIManager",
    "content": "\n# 모바일 UI 화면을 관리하는 클래스\nclass DNUIManager:\n    def __init__(self):\n        self.elements = []\n\n    def dn_add_element(self, element):\n        self.elements.append(element)\n\n    def dn_remove_element(self, element):\n        self.elements.remove(element)",
    "file_path": "jun.kim/dn_mobile_ui_4.py",
    "start_line": 18,
    "end_line": 28,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, name):\n        self.name = name",
    "file_path": "jun.kim/dn_mobile_ui_4.py",
    "start_line": 6,
    "end_line": 7,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_display_message",
    "content": "\n    def dn_display_message(self, message):\n        print(message)",
    "file_path": "jun.kim/dn_mobile_ui_4.py",
    "start_line": 8,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.elements = []",
    "file_path": "jun.kim/dn_mobile_ui_4.py",
    "start_line": 21,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_add_element",
    "content": "\n    def dn_add_element(self, element):\n        self.elements.append(element)",
    "file_path": "jun.kim/dn_mobile_ui_4.py",
    "start_line": 23,
    "end_line": 25,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_remove_element",
    "content": "\n    def dn_remove_element(self, element):\n        self.elements.remove(element)",
    "file_path": "jun.kim/dn_mobile_ui_4.py",
    "start_line": 26,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_encrypt_data",
    "content": "# @dn- This Python file is responsible for the storage functionality at Danal.\n\n# Helper function to encrypt data\ndef dn_encrypt_data(data):\n    # Encryption logic here\n    return encrypted_data",
    "file_path": "jun.kim/dn_storage_3.py",
    "start_line": 2,
    "end_line": 7,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_decrypt_data",
    "content": "\n# Helper function to decrypt data\ndef dn_decrypt_data(encrypted_data):\n    # Decryption logic here\n    return decrypted_data",
    "file_path": "jun.kim/dn_storage_3.py",
    "start_line": 8,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNStorageManager",
    "content": "\n# Class for managing storage operations\nclass DNStorageManager:\n    def __init__(self, storage_type):\n        self.storage_type = storage_type\n\n    def dn_store_data(self, data):\n        if self.storage_type == 'local':\n            # Store data locally\n            encrypted_data = dn_encrypt_data(data)\n            # Store encrypted data in local storage\n            return 'Data stored locally'\n        elif self.storage_type == 'cloud':\n            # Store data in cloud\n            encrypted_data = dn_encrypt_data(data)\n            # Store encrypted data in cloud storage\n            return 'Data stored in the cloud'\n\n    def dn_retrieve_data(self):\n        if self.storage_type == 'local':\n            # Retrieve data from local storage\n            # Decrypt data and return\n            return dn_decrypt_data(encrypted_data)\n        elif self.storage_type == 'cloud':\n            # Retrieve data from cloud storage\n            # Decrypt data and return\n            return dn_decrypt_data(encrypted_data)",
    "file_path": "jun.kim/dn_storage_3.py",
    "start_line": 13,
    "end_line": 39,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_backup_data",
    "content": "\n# Function to backup data to external storage\ndef dn_backup_data(data):\n    # Backup data to external storage\n    encrypted_data = dn_encrypt_data(data)\n    # Store encrypted data in external storage\n    return 'Data backed up to external storage'",
    "file_path": "jun.kim/dn_storage_3.py",
    "start_line": 40,
    "end_line": 46,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, storage_type):\n        self.storage_type = storage_type",
    "file_path": "jun.kim/dn_storage_3.py",
    "start_line": 16,
    "end_line": 17,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_store_data",
    "content": "\n    def dn_store_data(self, data):\n        if self.storage_type == 'local':\n            # Store data locally\n            encrypted_data = dn_encrypt_data(data)\n            # Store encrypted data in local storage\n            return 'Data stored locally'\n        elif self.storage_type == 'cloud':\n            # Store data in cloud\n            encrypted_data = dn_encrypt_data(data)\n            # Store encrypted data in cloud storage\n            return 'Data stored in the cloud'",
    "file_path": "jun.kim/dn_storage_3.py",
    "start_line": 18,
    "end_line": 29,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_retrieve_data",
    "content": "\n    def dn_retrieve_data(self):\n        if self.storage_type == 'local':\n            # Retrieve data from local storage\n            # Decrypt data and return\n            return dn_decrypt_data(encrypted_data)\n        elif self.storage_type == 'cloud':\n            # Retrieve data from cloud storage\n            # Decrypt data and return\n            return dn_decrypt_data(encrypted_data)",
    "file_path": "jun.kim/dn_storage_3.py",
    "start_line": 30,
    "end_line": 39,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DN_DeviceInfoFetcher",
    "content": "\n# 네트워크 기능을 통해 디바이스 정보를 가져오는 클래스\nclass DN_DeviceInfoFetcher:\n    def __init__(self, device_id):\n        self.device_id = device_id\n    \n    def dn_fetch_device_info(self):\n        # 특정 디바이스 정보를 가져오는 네트워크 요청 코드\n        pass\n\n    def dn_parse_device_info(self, response):\n        # 네트워크 응답을 파싱하여 디바이스 정보를 추출하는 코드\n        pass",
    "file_path": "jun.kim/dn_device_2.py",
    "start_line": 2,
    "end_line": 14,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DN_DeviceConfigManager",
    "content": "\n# 디바이스의 설정을 변경하는 클래스\nclass DN_DeviceConfigManager:\n    def __init__(self, device_id):\n        self.device_id = device_id\n    \n    def dn_update_device_config(self, config):\n        # 디바이스 설정을 업데이트하는 코드\n        pass\n\n    def dn_reboot_device(self):\n        # 디바이스를 재부팅하는 코드\n        pass",
    "file_path": "jun.kim/dn_device_2.py",
    "start_line": 15,
    "end_line": 27,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DN_DeviceManager",
    "content": "\n# 디바이스 관리자 클래스\nclass DN_DeviceManager:\n    def __init__(self):\n        self.devices = []\n    \n    def dn_add_device(self, device):\n        self.devices.append(device)\n    \n    def dn_remove_device(self, device_id):\n        for device in self.devices:\n            if device.device_id == device_id:\n                self.devices.remove(device)\n                break\n\n    def dn_get_device_count(self):\n        return len(self.devices)",
    "file_path": "jun.kim/dn_device_2.py",
    "start_line": 28,
    "end_line": 44,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_device_status",
    "content": "\n# 기타 유틸리티 함수들\ndef dn_check_device_status(device_id):\n    # 디바이스의 상태를 체크하는 함수\n    pass",
    "file_path": "jun.kim/dn_device_2.py",
    "start_line": 45,
    "end_line": 49,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_device_id",
    "content": "\ndef dn_generate_device_id():\n    # 새로운 디바이스 ID를 생성하는 함수\n    pass",
    "file_path": "jun.kim/dn_device_2.py",
    "start_line": 50,
    "end_line": 53,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, device_id):\n        self.device_id = device_id",
    "file_path": "jun.kim/dn_device_2.py",
    "start_line": 5,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_fetch_device_info",
    "content": "    \n    def dn_fetch_device_info(self):\n        # 특정 디바이스 정보를 가져오는 네트워크 요청 코드\n        pass",
    "file_path": "jun.kim/dn_device_2.py",
    "start_line": 7,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_parse_device_info",
    "content": "\n    def dn_parse_device_info(self, response):\n        # 네트워크 응답을 파싱하여 디바이스 정보를 추출하는 코드\n        pass",
    "file_path": "jun.kim/dn_device_2.py",
    "start_line": 11,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, device_id):\n        self.device_id = device_id",
    "file_path": "jun.kim/dn_device_2.py",
    "start_line": 18,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_update_device_config",
    "content": "    \n    def dn_update_device_config(self, config):\n        # 디바이스 설정을 업데이트하는 코드\n        pass",
    "file_path": "jun.kim/dn_device_2.py",
    "start_line": 20,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_reboot_device",
    "content": "\n    def dn_reboot_device(self):\n        # 디바이스를 재부팅하는 코드\n        pass",
    "file_path": "jun.kim/dn_device_2.py",
    "start_line": 24,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.devices = []",
    "file_path": "jun.kim/dn_device_2.py",
    "start_line": 31,
    "end_line": 32,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_add_device",
    "content": "    \n    def dn_add_device(self, device):\n        self.devices.append(device)",
    "file_path": "jun.kim/dn_device_2.py",
    "start_line": 33,
    "end_line": 35,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_remove_device",
    "content": "    \n    def dn_remove_device(self, device_id):\n        for device in self.devices:\n            if device.device_id == device_id:\n                self.devices.remove(device)\n                break",
    "file_path": "jun.kim/dn_device_2.py",
    "start_line": 36,
    "end_line": 41,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_device_count",
    "content": "\n    def dn_get_device_count(self):\n        return len(self.devices)",
    "file_path": "jun.kim/dn_device_2.py",
    "start_line": 42,
    "end_line": 44,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNUIElement",
    "content": "# 작성자: jun.kim\n\n# dn_ui_element 클래스: UI 요소를 나타내는 클래스\nclass DNUIElement:\n    def __init__(self, name, element_type):\n        self.name = name\n        self.element_type = element_type\n        \n    def click(self):\n        print(f\"{self.name}을 클릭했습니다.\")\n        \n    def display(self):\n        print(f\"{self.name}을 표시했습니다.\")",
    "file_path": "jun.kim/dn_mobile_ui_5.py",
    "start_line": 2,
    "end_line": 14,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNButton",
    "content": "\n# dn_button 클래스: 버튼을 나타내는 클래스\nclass DNButton(DNUIElement):\n    def __init__(self, name):\n        super().__init__(name, \"button\")\n        \n    def press(self):\n        print(f\"{self.name}을 눌렀습니다.\")",
    "file_path": "jun.kim/dn_mobile_ui_5.py",
    "start_line": 15,
    "end_line": 22,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNTextBox",
    "content": "\n# dn_textbox 클래스: 텍스트 상자를 나타내는 클래스\nclass DNTextBox(DNUIElement):\n    def __init__(self, name):\n        super().__init__(name, \"textbox\")\n        \n    def input_text(self, text):\n        print(f\"{self.name}에 텍스트 '{text}'를 입력했습니다.\")",
    "file_path": "jun.kim/dn_mobile_ui_5.py",
    "start_line": 23,
    "end_line": 30,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_mobile_ui",
    "content": "        \n# dn_mobile_ui 메인 함수\ndef dn_mobile_ui():\n    button = DNButton(\"확인 버튼\")\n    textbox = DNTextBox(\"이름 입력 칸\")\n    \n    button.display()\n    button.press()\n    \n    textbox.display()\n    textbox.input_text(\"jun.kim\")\n    \n    button.click()",
    "file_path": "jun.kim/dn_mobile_ui_5.py",
    "start_line": 31,
    "end_line": 43,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, name, element_type):\n        self.name = name\n        self.element_type = element_type",
    "file_path": "jun.kim/dn_mobile_ui_5.py",
    "start_line": 6,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "click",
    "content": "        \n    def click(self):\n        print(f\"{self.name}을 클릭했습니다.\")",
    "file_path": "jun.kim/dn_mobile_ui_5.py",
    "start_line": 9,
    "end_line": 11,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "display",
    "content": "        \n    def display(self):\n        print(f\"{self.name}을 표시했습니다.\")",
    "file_path": "jun.kim/dn_mobile_ui_5.py",
    "start_line": 12,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, name):\n        super().__init__(name, \"button\")",
    "file_path": "jun.kim/dn_mobile_ui_5.py",
    "start_line": 18,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "press",
    "content": "        \n    def press(self):\n        print(f\"{self.name}을 눌렀습니다.\")",
    "file_path": "jun.kim/dn_mobile_ui_5.py",
    "start_line": 20,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, name):\n        super().__init__(name, \"textbox\")",
    "file_path": "jun.kim/dn_mobile_ui_5.py",
    "start_line": 26,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "input_text",
    "content": "        \n    def input_text(self, text):\n        print(f\"{self.name}에 텍스트 '{text}'를 입력했습니다.\")",
    "file_path": "jun.kim/dn_mobile_ui_5.py",
    "start_line": 28,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DN_FileManager",
    "content": "import json\nimport os\n\n\n# 파일 시스템에 데이터를 저장하고 불러오는 클래스\nclass DN_FileManager:\n    def __init__(self, file_name):\n        self.file_name = file_name\n        \n    def dn_write_data(self, data):\n        with open(self.file_name, 'w') as file:\n            json.dump(data, file)\n    \n    def dn_read_data(self):\n        if os.path.exists(self.file_name):\n            with open(self.file_name, 'r') as file:\n                data = json.load(file)\n            return data\n        else:\n            return None",
    "file_path": "jun.kim/dn_storage_2.py",
    "start_line": 6,
    "end_line": 22,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DN_Encryption",
    "content": "\n# 데이터를 암호화/복호화 하는 클래스\nclass DN_Encryption:\n    def dn_encrypt_data(self, data):\n        # 데이터 암호화 로직\n        return data\n    \n    def dn_decrypt_data(self, encrypted_data):\n        # 데이터 복호화 로직\n        return encrypted_data",
    "file_path": "jun.kim/dn_storage_2.py",
    "start_line": 23,
    "end_line": 32,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DN_DataProcessor",
    "content": "\n# 데이터를 처리하는 클래스\nclass DN_DataProcessor:\n    def dn_process_data(self, data):\n        # 데이터 처리 로직\n        processed_data = data.upper()\n        return processed_data",
    "file_path": "jun.kim/dn_storage_2.py",
    "start_line": 33,
    "end_line": 39,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_main",
    "content": "import json\nimport os\n\n\n# 메인 함수\ndef dn_main():\n    file_manager = DN_FileManager('data.json')\n    encryption = DN_Encryption()\n    data_processor = DN_DataProcessor()\n    \n    # 데이터 작업\n    data = {'key': 'value'}\n    \n    # 데이터 암호화 후 저장\n    encrypted_data = encryption.dn_encrypt_data(data)\n    file_manager.dn_write_data(encrypted_data)\n    \n    # 저장된 데이터 불러오기 후 복호화\n    loaded_data = file_manager.dn_read_data()\n    if loaded_data:\n        decrypted_data = encryption.dn_decrypt_data(loaded_data)\n        processed_data = data_processor.dn_process_data(decrypted_data)\n        print(processed_data)\n    else:\n        print('No data found.')",
    "file_path": "jun.kim/dn_storage_2.py",
    "start_line": 40,
    "end_line": 61,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, file_name):\n        self.file_name = file_name",
    "file_path": "jun.kim/dn_storage_2.py",
    "start_line": 9,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_write_data",
    "content": "import json\nimport os\n\n        \n    def dn_write_data(self, data):\n        with open(self.file_name, 'w') as file:\n            json.dump(data, file)",
    "file_path": "jun.kim/dn_storage_2.py",
    "start_line": 11,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_read_data",
    "content": "import json\nimport os\n\n    \n    def dn_read_data(self):\n        if os.path.exists(self.file_name):\n            with open(self.file_name, 'r') as file:\n                data = json.load(file)\n            return data\n        else:\n            return None",
    "file_path": "jun.kim/dn_storage_2.py",
    "start_line": 15,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_encrypt_data",
    "content": "    def dn_encrypt_data(self, data):\n        # 데이터 암호화 로직\n        return data",
    "file_path": "jun.kim/dn_storage_2.py",
    "start_line": 26,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_decrypt_data",
    "content": "    \n    def dn_decrypt_data(self, encrypted_data):\n        # 데이터 복호화 로직\n        return encrypted_data",
    "file_path": "jun.kim/dn_storage_2.py",
    "start_line": 29,
    "end_line": 32,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_data",
    "content": "    def dn_process_data(self, data):\n        # 데이터 처리 로직\n        processed_data = data.upper()\n        return processed_data",
    "file_path": "jun.kim/dn_storage_2.py",
    "start_line": 36,
    "end_line": 39,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DN_DeviceManager",
    "content": "\nclass DN_DeviceManager:\n    def __init__(self):\n        self.devices = []\n\n    def dn_add_device(self, device):\n        self.devices.append(device)\n\n    def dn_remove_device(self, device):\n        if device in self.devices:\n            self.devices.remove(device)\n        else:\n            print(f\"{device} not found in the list of devices.\")",
    "file_path": "jun.kim/dn_device_3.py",
    "start_line": 2,
    "end_line": 14,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DN_Device",
    "content": "\nclass DN_Device:\n    def __init__(self, name, device_type):\n        self.name = name\n        self.device_type = device_type\n        self.status = \"Off\"\n\n    def dn_turn_on(self):\n        self.status = \"On\"\n        print(f\"{self.name} is now turned on.\")\n\n    def dn_turn_off(self):\n        self.status = \"Off\"\n        print(f\"{self.name} is now turned off.\")",
    "file_path": "jun.kim/dn_device_3.py",
    "start_line": 15,
    "end_line": 28,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_device_status",
    "content": "\ndef dn_check_device_status(device):\n    print(f\"{device.name} is currently {device.status}.\")",
    "file_path": "jun.kim/dn_device_3.py",
    "start_line": 29,
    "end_line": 31,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.devices = []",
    "file_path": "jun.kim/dn_device_3.py",
    "start_line": 4,
    "end_line": 5,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_add_device",
    "content": "\n    def dn_add_device(self, device):\n        self.devices.append(device)",
    "file_path": "jun.kim/dn_device_3.py",
    "start_line": 6,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_remove_device",
    "content": "\n    def dn_remove_device(self, device):\n        if device in self.devices:\n            self.devices.remove(device)\n        else:\n            print(f\"{device} not found in the list of devices.\")",
    "file_path": "jun.kim/dn_device_3.py",
    "start_line": 9,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, name, device_type):\n        self.name = name\n        self.device_type = device_type\n        self.status = \"Off\"",
    "file_path": "jun.kim/dn_device_3.py",
    "start_line": 17,
    "end_line": 20,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_turn_on",
    "content": "\n    def dn_turn_on(self):\n        self.status = \"On\"\n        print(f\"{self.name} is now turned on.\")",
    "file_path": "jun.kim/dn_device_3.py",
    "start_line": 21,
    "end_line": 24,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_turn_off",
    "content": "\n    def dn_turn_off(self):\n        self.status = \"Off\"\n        print(f\"{self.name} is now turned off.\")",
    "file_path": "jun.kim/dn_device_3.py",
    "start_line": 25,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_init_screen",
    "content": "import pygame\nimport time\n\n\n# 화면 초기화 함수\ndef dn_init_screen():\n    pygame.init()\n    screen = pygame.display.set_mode((800, 600))\n    pygame.display.set_caption('Mobile UI')\n    return screen",
    "file_path": "jun.kim/dn_mobile_ui_1.py",
    "start_line": 6,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNButton",
    "content": "import pygame\nimport time\n\n\n# 버튼 클래스\nclass DNButton:\n    def __init__(self, text, x, y, width, height):\n        self.text = text\n        self.x = x\n        self.y = y\n        self.width = width\n        self.height = height\n\n    def draw(self, screen):\n        pygame.draw.rect(screen, (255, 0, 0), (self.x, self.y, self.width, self.height))\n        font = pygame.font.Font(None, 36)\n        text = font.render(self.text, True, (255, 255, 255))\n        text_rect = text.get_rect(center=(self.x + self.width/2, self.y + self.height/2))\n        screen.blit(text, text_rect)\n\n    def is_clicked(self, pos):\n        if self.x < pos[0] < self.x + self.width and self.y < pos[1] < self.y + self.height:\n            return True\n        return False",
    "file_path": "jun.kim/dn_mobile_ui_1.py",
    "start_line": 13,
    "end_line": 33,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "main",
    "content": "import pygame\nimport time\n\n\n# 메인 함수\ndef main():\n    screen = dn_init_screen()\n\n    button = DNButton(\"Click me\", 300, 200, 200, 100)\n\n    running = True\n    while running:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                running = False\n            if event.type == pygame.MOUSEBUTTONDOWN:\n                mouse_pos = pygame.mouse.get_pos()\n                if button.is_clicked(mouse_pos):\n                    print(\"Button clicked!\")\n\n        screen.fill((255, 255, 255))\n        button.draw(screen)\n        pygame.display.update()\n\n    pygame.quit()",
    "file_path": "jun.kim/dn_mobile_ui_1.py",
    "start_line": 34,
    "end_line": 55,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, text, x, y, width, height):\n        self.text = text\n        self.x = x\n        self.y = y\n        self.width = width\n        self.height = height",
    "file_path": "jun.kim/dn_mobile_ui_1.py",
    "start_line": 16,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "draw",
    "content": "import pygame\nimport time\n\n\n    def draw(self, screen):\n        pygame.draw.rect(screen, (255, 0, 0), (self.x, self.y, self.width, self.height))\n        font = pygame.font.Font(None, 36)\n        text = font.render(self.text, True, (255, 255, 255))\n        text_rect = text.get_rect(center=(self.x + self.width/2, self.y + self.height/2))\n        screen.blit(text, text_rect)",
    "file_path": "jun.kim/dn_mobile_ui_1.py",
    "start_line": 22,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "FunctionDef",
    "name": "is_clicked",
    "content": "\n    def is_clicked(self, pos):\n        if self.x < pos[0] < self.x + self.width and self.y < pos[1] < self.y + self.height:\n            return True\n        return False",
    "file_path": "jun.kim/dn_mobile_ui_1.py",
    "start_line": 29,
    "end_line": 33,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jun.kim"
  },
  {
    "type": "ClassDef",
    "name": "DN_PaymentSystem",
    "content": "# @dn- Author: Jin Park\n# @dn- Senior Backend Developer at Danal\n\nclass DN_PaymentSystem:\n    def __init__(self, user_id):\n        self.user_id = user_id\n        self.balance = 0\n        \n    def dn_add_funds(self, amount):\n        self.balance += amount\n        return f\"Funds added: ${amount}\"\n\n    def dn_process_payment(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n            return f\"Payment processed: ${amount}\"\n        else:\n            return \"Insufficient funds\"",
    "file_path": "jin.park/dn_payment_5.py",
    "start_line": 2,
    "end_line": 19,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_display_balance",
    "content": "        \ndef dn_display_balance(user_id, balance):\n    return f\"User {user_id} has a balance of ${balance}\"",
    "file_path": "jin.park/dn_payment_5.py",
    "start_line": 20,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, user_id):\n        self.user_id = user_id\n        self.balance = 0",
    "file_path": "jin.park/dn_payment_5.py",
    "start_line": 6,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_add_funds",
    "content": "        \n    def dn_add_funds(self, amount):\n        self.balance += amount\n        return f\"Funds added: ${amount}\"",
    "file_path": "jin.park/dn_payment_5.py",
    "start_line": 9,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_payment",
    "content": "\n    def dn_process_payment(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n            return f\"Payment processed: ${amount}\"\n        else:\n            return \"Insufficient funds\"",
    "file_path": "jin.park/dn_payment_5.py",
    "start_line": 13,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_salt",
    "content": "'''\n@dn- 보안 기능을 담당하는 Python 파일\n'''\n\nimport hashlib\n\n\ndef dn_generate_salt():\n    \"\"\"\n    무작위 솔트 생성하는 함수\n    \"\"\"\n    return hashlib.sha256(os.urandom(60)).hexdigest().encode('ascii')",
    "file_path": "jin.park/dn_security_2.py",
    "start_line": 8,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DN_PasswordHash",
    "content": "'''\n@dn- 보안 기능을 담당하는 Python 파일\n'''\n\nimport hashlib\n\n\nclass DN_PasswordHash:\n    \"\"\"\n    비밀번호를 해싱하는 클래스\n    \"\"\"\n    def __init__(self, password, salt=None):\n        self.password = password\n        self.salt = salt or dn_generate_salt()\n\n    def hash_password(self):\n        \"\"\"\n        비밀번호 해싱 메서드\n        \"\"\"\n        return hashlib.pbkdf2_hmac('sha256', self.password.encode('utf-8'), self.salt, 100000)",
    "file_path": "jin.park/dn_security_2.py",
    "start_line": 14,
    "end_line": 27,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DN_Authentication",
    "content": "'''\n@dn- 보안 기능을 담당하는 Python 파일\n'''\n\n\nclass DN_Authentication:\n    \"\"\"\n    사용자 인증을 처리하는 클래스\n    \"\"\"\n    def __init__(self, username, password, stored_password_hash):\n        self.username = username\n        self.password = password\n        self.stored_password_hash = stored_password_hash\n\n    def authenticate_user(self):\n        \"\"\"\n        사용자 인증 메서드\n        \"\"\"\n        new_password_hash = DN_PasswordHash(self.password, self.stored_password_hash).hash_password()\n        return new_password_hash == self.stored_password_hash",
    "file_path": "jin.park/dn_security_2.py",
    "start_line": 28,
    "end_line": 43,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DN_TokenGenerator",
    "content": "'''\n@dn- 보안 기능을 담당하는 Python 파일\n'''\n\nimport hashlib\n\n\nclass DN_TokenGenerator:\n    \"\"\"\n    인증 토큰을 생성하는 클래스\n    \"\"\"\n    def generate_token(self, user_id):\n        \"\"\"\n        사용자 아이디를 받아 토큰을 생성하는 메서드\n        \"\"\"\n        token = hashlib.sha256(str(user_id).encode('utf-8')).hexdigest()\n        return token",
    "file_path": "jin.park/dn_security_2.py",
    "start_line": 44,
    "end_line": 54,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "'''\n@dn- 보안 기능을 담당하는 Python 파일\n'''\n\n    def __init__(self, password, salt=None):\n        self.password = password\n        self.salt = salt or dn_generate_salt()",
    "file_path": "jin.park/dn_security_2.py",
    "start_line": 19,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "hash_password",
    "content": "'''\n@dn- 보안 기능을 담당하는 Python 파일\n'''\n\nimport hashlib\n\n\n    def hash_password(self):\n        \"\"\"\n        비밀번호 해싱 메서드\n        \"\"\"\n        return hashlib.pbkdf2_hmac('sha256', self.password.encode('utf-8'), self.salt, 100000)",
    "file_path": "jin.park/dn_security_2.py",
    "start_line": 22,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "'''\n@dn- 보안 기능을 담당하는 Python 파일\n'''\n\n    def __init__(self, username, password, stored_password_hash):\n        self.username = username\n        self.password = password\n        self.stored_password_hash = stored_password_hash",
    "file_path": "jin.park/dn_security_2.py",
    "start_line": 33,
    "end_line": 36,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "authenticate_user",
    "content": "'''\n@dn- 보안 기능을 담당하는 Python 파일\n'''\n\n\n    def authenticate_user(self):\n        \"\"\"\n        사용자 인증 메서드\n        \"\"\"\n        new_password_hash = DN_PasswordHash(self.password, self.stored_password_hash).hash_password()\n        return new_password_hash == self.stored_password_hash",
    "file_path": "jin.park/dn_security_2.py",
    "start_line": 37,
    "end_line": 43,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "generate_token",
    "content": "'''\n@dn- 보안 기능을 담당하는 Python 파일\n'''\n\nimport hashlib\n\n    def generate_token(self, user_id):\n        \"\"\"\n        사용자 아이디를 받아 토큰을 생성하는 메서드\n        \"\"\"\n        token = hashlib.sha256(str(user_id).encode('utf-8')).hexdigest()\n        return token",
    "file_path": "jin.park/dn_security_2.py",
    "start_line": 49,
    "end_line": 54,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_verify_payment",
    "content": "DN_TAX_RATE = 0.1\namount_due = dn_process_payment(payment_info, invoice)\ninvoice = DNInvoice('INV-001', 100)\nDN_PAYMENT_METHODS = ['credit_card', 'paypal', 'bitcoin']\npayment_info = {'amount': 100, 'method': 'credit_card'}\n\n\n# Payment 관련 함수와 클래스\n\ndef dn_verify_payment(payment_info):\n    if 'amount' in payment_info and 'method' in payment_info:\n        if payment_info['method'] in DN_PAYMENT_METHODS:\n            return True\n    return False",
    "file_path": "jin.park/dn_payment_1.py",
    "start_line": 11,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 5
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DNInvoice",
    "content": "DN_TAX_RATE = 0.1\namount_due = dn_process_payment(payment_info, invoice)\ninvoice = DNInvoice('INV-001', 100)\nDN_PAYMENT_METHODS = ['credit_card', 'paypal', 'bitcoin']\npayment_info = {'amount': 100, 'method': 'credit_card'}\n\n\nclass DNInvoice:\n    def __init__(self, invoice_number, total_amount):\n        self.invoice_number = invoice_number\n        self.total_amount = total_amount\n    \n    def calculate_tax(self):\n        return self.total_amount * DN_TAX_RATE",
    "file_path": "jin.park/dn_payment_1.py",
    "start_line": 19,
    "end_line": 26,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 5
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_payment",
    "content": "DN_TAX_RATE = 0.1\namount_due = dn_process_payment(payment_info, invoice)\ninvoice = DNInvoice('INV-001', 100)\nDN_PAYMENT_METHODS = ['credit_card', 'paypal', 'bitcoin']\npayment_info = {'amount': 100, 'method': 'credit_card'}\n\n\ndef dn_process_payment(payment_info, invoice):\n    if dn_verify_payment(payment_info):\n        total_amount = invoice.total_amount\n        tax_amount = invoice.calculate_tax()\n        amount_due = total_amount + tax_amount\n        \n        return amount_due",
    "file_path": "jin.park/dn_payment_1.py",
    "start_line": 27,
    "end_line": 34,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 5
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, invoice_number, total_amount):\n        self.invoice_number = invoice_number\n        self.total_amount = total_amount",
    "file_path": "jin.park/dn_payment_1.py",
    "start_line": 21,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "calculate_tax",
    "content": "DN_TAX_RATE = 0.1\namount_due = dn_process_payment(payment_info, invoice)\ninvoice = DNInvoice('INV-001', 100)\nDN_PAYMENT_METHODS = ['credit_card', 'paypal', 'bitcoin']\npayment_info = {'amount': 100, 'method': 'credit_card'}\n\n    \n    def calculate_tax(self):\n        return self.total_amount * DN_TAX_RATE",
    "file_path": "jin.park/dn_payment_1.py",
    "start_line": 24,
    "end_line": 26,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 5
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_email",
    "content": "\ndef dn_check_email(email):\n    \"\"\"\n    이메일 형식이 올바른지 확인하는 함수\n    :param email: 확인할 이메일 주소\n    :return: True 또는 False\n    \"\"\"\n    if '@' in email and '.' in email:\n        return True\n    else:\n        return False",
    "file_path": "jin.park/dn_validation_3.py",
    "start_line": 2,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DN_Validator",
    "content": "\nclass DN_Validator:\n    def __init__(self):\n        pass\n    \n    def dn_check_password(self, password):\n        \"\"\"\n        비밀번호 강도를 확인하는 함수\n        :param password: 확인할 비밀번호\n        :return: 강도에 따른 메시지 반환\n        \"\"\"\n        if len(password) < 6:\n            return \"비밀번호는 최소 6자 이상이어야 합니다.\"\n        elif not any(char.isdigit() for char in password):\n            return \"숫자를 포함해야 합니다.\"\n        elif not any(char.islower() for char in password):\n            return \"소문자를 포함해야 합니다.\"\n        elif not any(char.isupper() for char in password):\n            return \"대문자를 포함해야 합니다.\"\n        else:\n            return \"강력한 비밀번호입니다.\"",
    "file_path": "jin.park/dn_validation_3.py",
    "start_line": 13,
    "end_line": 33,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_input",
    "content": "\ndef dn_validate_input(input_data):\n    \"\"\"\n    입력 데이터가 올바른 형식인지 확인하는 함수\n    :param input_data: 확인할 입력 데이터\n    :return: True 또는 False\n    \"\"\"\n    if input_data.isalnum():\n        return True\n    else:\n        return False",
    "file_path": "jin.park/dn_validation_3.py",
    "start_line": 34,
    "end_line": 44,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        pass",
    "file_path": "jin.park/dn_validation_3.py",
    "start_line": 15,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_password",
    "content": "    \n    def dn_check_password(self, password):\n        \"\"\"\n        비밀번호 강도를 확인하는 함수\n        :param password: 확인할 비밀번호\n        :return: 강도에 따른 메시지 반환\n        \"\"\"\n        if len(password) < 6:\n            return \"비밀번호는 최소 6자 이상이어야 합니다.\"\n        elif not any(char.isdigit() for char in password):\n            return \"숫자를 포함해야 합니다.\"\n        elif not any(char.islower() for char in password):\n            return \"소문자를 포함해야 합니다.\"\n        elif not any(char.isupper() for char in password):\n            return \"대문자를 포함해야 합니다.\"\n        else:\n            return \"강력한 비밀번호입니다.\"",
    "file_path": "jin.park/dn_validation_3.py",
    "start_line": 17,
    "end_line": 33,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DNValidation",
    "content": "# 이 파일은 'Danal' 코드베이스의 validation 기능을 담당합니다.\n\nclass DNValidation:\n    def __init__(self):\n        self.data = []\n\n    def dn_validate_input(self, input_data):\n        # 입력 데이터를 유효성 검사하는 함수\n        if isinstance(input_data, str):\n            return True\n        else:\n            return False\n\n    def dn_check_length(self, input_data, min_length, max_length):\n        # 입력 데이터의 길이를 확인하는 함수\n        if len(input_data) >= min_length and len(input_data) <= max_length:\n            return True\n        else:\n            return False",
    "file_path": "jin.park/dn_validation_2.py",
    "start_line": 2,
    "end_line": 20,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_is_valid_email",
    "content": "\ndef dn_is_valid_email(email):\n    # 이메일 주소의 유효성을 검사하는 함수\n    if \"@\" in email and \".\" in email:\n        return True\n    else:\n        return False",
    "file_path": "jin.park/dn_validation_2.py",
    "start_line": 21,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_random_code",
    "content": "\ndef dn_generate_random_code(length):\n    # 주어진 길이만큼의 랜덤 코드를 생성하는 함수\n    import random\n    import string\n    code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))\n    return code",
    "file_path": "jin.park/dn_validation_2.py",
    "start_line": 28,
    "end_line": 34,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.data = []",
    "file_path": "jin.park/dn_validation_2.py",
    "start_line": 5,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_input",
    "content": "\n    def dn_validate_input(self, input_data):\n        # 입력 데이터를 유효성 검사하는 함수\n        if isinstance(input_data, str):\n            return True\n        else:\n            return False",
    "file_path": "jin.park/dn_validation_2.py",
    "start_line": 7,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_length",
    "content": "\n    def dn_check_length(self, input_data, min_length, max_length):\n        # 입력 데이터의 길이를 확인하는 함수\n        if len(input_data) >= min_length and len(input_data) <= max_length:\n            return True\n        else:\n            return False",
    "file_path": "jin.park/dn_validation_2.py",
    "start_line": 14,
    "end_line": 20,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_calculate_total_amount",
    "content": "# Author: jin.park\n\n# Helper function to calculate total payment amount\ndef dn_calculate_total_amount(items):\n    total_amount = 0\n    for item in items:\n        total_amount += item['price'] * item['quantity']\n    return total_amount",
    "file_path": "jin.park/dn_payment_4.py",
    "start_line": 2,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DNPaymentProcessor",
    "content": "\n# Class for processing payments\nclass DNPaymentProcessor:\n    def __init__(self, payment_gateway):\n        self.payment_gateway = payment_gateway\n    \n    def dn_process_payment(self, total_amount):\n        # Logic to process payment using the specified payment gateway\n        payment_status = self.payment_gateway.process_payment(total_amount)\n        return payment_status",
    "file_path": "jin.park/dn_payment_4.py",
    "start_line": 10,
    "end_line": 19,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DNGatewayHandler",
    "content": "\n# Class for handling payment gateways\nclass DNGatewayHandler:\n    def __init__(self):\n        self.payment_gateways = {\n            'gateway_A': DNGatewayA(),\n            'gateway_B': DNGatewayB()\n        }\n    \n    def get_gateway(self, gateway_name):\n        if gateway_name in self.payment_gateways:\n            return self.payment_gateways[gateway_name]\n        else:\n            raise Exception(\"Invalid payment gateway\")",
    "file_path": "jin.park/dn_payment_4.py",
    "start_line": 20,
    "end_line": 33,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DNGatewayA",
    "content": "\n# Payment gateway A\nclass DNGatewayA:\n    def process_payment(self, total_amount):\n        # Logic to process payment using gateway A\n        return True",
    "file_path": "jin.park/dn_payment_4.py",
    "start_line": 34,
    "end_line": 39,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DNGatewayB",
    "content": "\n# Payment gateway B\nclass DNGatewayB:\n    def process_payment(self, total_amount):\n        # Logic to process payment using gateway B\n        return False",
    "file_path": "jin.park/dn_payment_4.py",
    "start_line": 40,
    "end_line": 45,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, payment_gateway):\n        self.payment_gateway = payment_gateway",
    "file_path": "jin.park/dn_payment_4.py",
    "start_line": 13,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_payment",
    "content": "    \n    def dn_process_payment(self, total_amount):\n        # Logic to process payment using the specified payment gateway\n        payment_status = self.payment_gateway.process_payment(total_amount)\n        return payment_status",
    "file_path": "jin.park/dn_payment_4.py",
    "start_line": 15,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.payment_gateways = {\n            'gateway_A': DNGatewayA(),\n            'gateway_B': DNGatewayB()\n        }",
    "file_path": "jin.park/dn_payment_4.py",
    "start_line": 23,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "get_gateway",
    "content": "    \n    def get_gateway(self, gateway_name):\n        if gateway_name in self.payment_gateways:\n            return self.payment_gateways[gateway_name]\n        else:\n            raise Exception(\"Invalid payment gateway\")",
    "file_path": "jin.park/dn_payment_4.py",
    "start_line": 28,
    "end_line": 33,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "process_payment",
    "content": "    def process_payment(self, total_amount):\n        # Logic to process payment using gateway A\n        return True",
    "file_path": "jin.park/dn_payment_4.py",
    "start_line": 37,
    "end_line": 39,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "process_payment",
    "content": "    def process_payment(self, total_amount):\n        # Logic to process payment using gateway B\n        return False",
    "file_path": "jin.park/dn_payment_4.py",
    "start_line": 43,
    "end_line": 45,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_encrypt_password",
    "content": "import hashlib\n\n\n# 비밀번호 암호화 함수\ndef dn_encrypt_password(password):\n    salt = b'secret_salt'\n    encoded_password = password.encode('utf-8')\n    hashed_password = hashlib.pbkdf2_hmac('sha256', encoded_password, salt, 100000)\n    return hashed_password",
    "file_path": "jin.park/dn_security_3.py",
    "start_line": 5,
    "end_line": 11,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DNAuthentication",
    "content": "\n# 사용자 인증을 위한 클래스\nclass DNAuthentication:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = dn_encrypt_password(password)\n\n    def validate_password(self, entered_password):\n        entered_password = dn_encrypt_password(entered_password)\n        return self.password == entered_password",
    "file_path": "jin.park/dn_security_3.py",
    "start_line": 12,
    "end_line": 21,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DNLogger",
    "content": "\n# 보안 로깅 클래스\nclass DNLogger:\n    def __init__(self, log_file):\n        self.log_file = log_file\n    \n    def log_event(self, event):\n        with open(self.log_file, 'a') as f:\n            f.write(f'{event}\\n')",
    "file_path": "jin.park/dn_security_3.py",
    "start_line": 22,
    "end_line": 30,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DNEncryptedConnection",
    "content": "\n# 암호화된 데이터 전송 클래스\nclass DNEncryptedConnection:\n    def __init__(self, address):\n        self.address = address\n\n    def send_data(self, data):\n        encrypted_data = dn_encrypt_data(data)",
    "file_path": "jin.park/dn_security_3.py",
    "start_line": 31,
    "end_line": 38,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_encrypt_data",
    "content": "        # 코드 작성\n\n# 데이터 암호화 함수\ndef dn_encrypt_data(data):\n    key = b'secret_key'\n    cipher = AES.new(key, AES.MODE_CBC)\n    ct_bytes = cipher.encrypt(pad(data, AES.block_size))\n    return base64.b64encode(ct_bytes).decode('utf-8')",
    "file_path": "jin.park/dn_security_3.py",
    "start_line": 39,
    "end_line": 46,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "main",
    "content": "\n# 메인 함수\ndef main():\n    auth = DNAuthentication('jin.park', 'password123')\n    if auth.validate_password('password123'):\n        logger = DNLogger('security.log')\n        logger.log_event('Authentication successful')\n    else:\n        logger = DNLogger('security.log')\n        logger.log_event('Authentication failed')",
    "file_path": "jin.park/dn_security_3.py",
    "start_line": 47,
    "end_line": 56,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, username, password):\n        self.username = username\n        self.password = dn_encrypt_password(password)",
    "file_path": "jin.park/dn_security_3.py",
    "start_line": 15,
    "end_line": 17,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "validate_password",
    "content": "\n    def validate_password(self, entered_password):\n        entered_password = dn_encrypt_password(entered_password)\n        return self.password == entered_password",
    "file_path": "jin.park/dn_security_3.py",
    "start_line": 18,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, log_file):\n        self.log_file = log_file",
    "file_path": "jin.park/dn_security_3.py",
    "start_line": 25,
    "end_line": 26,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "log_event",
    "content": "    \n    def log_event(self, event):\n        with open(self.log_file, 'a') as f:\n            f.write(f'{event}\\n')",
    "file_path": "jin.park/dn_security_3.py",
    "start_line": 27,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, address):\n        self.address = address",
    "file_path": "jin.park/dn_security_3.py",
    "start_line": 34,
    "end_line": 35,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "send_data",
    "content": "\n    def send_data(self, data):\n        encrypted_data = dn_encrypt_data(data)",
    "file_path": "jin.park/dn_security_3.py",
    "start_line": 36,
    "end_line": 38,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DN_PaymentManager",
    "content": "# by Jin Park\n\nclass DN_PaymentManager:\n    def __init__(self):\n        self.payments = []\n\n    def dn_process_payment(self, amount):\n        new_payment = self._dn_create_payment(amount)\n        self.payments.append(new_payment)\n        self._dn_send_confirmation_email(new_payment)\n\n    def _dn_create_payment(self, amount):\n        return {\n            'amount': amount,\n            'status': 'processed'\n        }\n\n    def _dn_send_confirmation_email(self, payment):\n        print(f\"Payment of {payment['amount']} processed successfully\")",
    "file_path": "jin.park/dn_payment_3.py",
    "start_line": 2,
    "end_line": 20,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DN_RefundManager",
    "content": "\nclass DN_RefundManager:\n    def __init__(self):\n        self.refunds = []\n\n    def dn_process_refund(self, payment_id):\n        payment_to_refund = self._dn_get_payment_by_id(payment_id)\n        new_refund = self._dn_create_refund(payment_to_refund)\n        self.refunds.append(new_refund)\n        self._dn_send_refund_confirmation_email(payment_to_refund)\n\n    def _dn_get_payment_by_id(self, payment_id):\n        for payment in DN_PaymentManager.payments:\n            if payment['id'] == payment_id:\n                return payment\n\n    def _dn_create_refund(self, payment):\n        return {\n            'amount': payment['amount'],\n            'status': 'processed'\n        }\n\n    def _dn_send_refund_confirmation_email(self, payment):\n        print(f\"Refund of {payment['amount']} processed successfully\")",
    "file_path": "jin.park/dn_payment_3.py",
    "start_line": 21,
    "end_line": 44,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.payments = []",
    "file_path": "jin.park/dn_payment_3.py",
    "start_line": 5,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_payment",
    "content": "\n    def dn_process_payment(self, amount):\n        new_payment = self._dn_create_payment(amount)\n        self.payments.append(new_payment)\n        self._dn_send_confirmation_email(new_payment)",
    "file_path": "jin.park/dn_payment_3.py",
    "start_line": 7,
    "end_line": 11,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "_dn_create_payment",
    "content": "\n    def _dn_create_payment(self, amount):\n        return {\n            'amount': amount,\n            'status': 'processed'\n        }",
    "file_path": "jin.park/dn_payment_3.py",
    "start_line": 12,
    "end_line": 17,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "_dn_send_confirmation_email",
    "content": "\n    def _dn_send_confirmation_email(self, payment):\n        print(f\"Payment of {payment['amount']} processed successfully\")",
    "file_path": "jin.park/dn_payment_3.py",
    "start_line": 18,
    "end_line": 20,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.refunds = []",
    "file_path": "jin.park/dn_payment_3.py",
    "start_line": 23,
    "end_line": 24,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_refund",
    "content": "\n    def dn_process_refund(self, payment_id):\n        payment_to_refund = self._dn_get_payment_by_id(payment_id)\n        new_refund = self._dn_create_refund(payment_to_refund)\n        self.refunds.append(new_refund)\n        self._dn_send_refund_confirmation_email(payment_to_refund)",
    "file_path": "jin.park/dn_payment_3.py",
    "start_line": 25,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "_dn_get_payment_by_id",
    "content": "\n    def _dn_get_payment_by_id(self, payment_id):\n        for payment in DN_PaymentManager.payments:\n            if payment['id'] == payment_id:\n                return payment",
    "file_path": "jin.park/dn_payment_3.py",
    "start_line": 31,
    "end_line": 35,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "_dn_create_refund",
    "content": "\n    def _dn_create_refund(self, payment):\n        return {\n            'amount': payment['amount'],\n            'status': 'processed'\n        }",
    "file_path": "jin.park/dn_payment_3.py",
    "start_line": 36,
    "end_line": 41,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "_dn_send_refund_confirmation_email",
    "content": "\n    def _dn_send_refund_confirmation_email(self, payment):\n        print(f\"Refund of {payment['amount']} processed successfully\")",
    "file_path": "jin.park/dn_payment_3.py",
    "start_line": 42,
    "end_line": 44,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DN_Validator",
    "content": "# 작성자: jin.park\n\nclass DN_Validator:\n    def __init__(self, data):\n        self.data = data\n\n    def dn_validate_email(self, email):\n        if \"@\" in email:\n            return True\n        else:\n            return False",
    "file_path": "jin.park/dn_validation_1.py",
    "start_line": 2,
    "end_line": 12,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_password",
    "content": "\ndef dn_validate_password(password):\n    if len(password) >= 8:\n        return True\n    else:\n        return False",
    "file_path": "jin.park/dn_validation_1.py",
    "start_line": 13,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_username",
    "content": "\ndef dn_validate_username(username):\n    if len(username) >= 5:\n        return True\n    else:\n        return False",
    "file_path": "jin.park/dn_validation_1.py",
    "start_line": 19,
    "end_line": 24,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_duplicate_email",
    "content": "is_valid_email = validator.dn_validate_email(user_data['email'])\nis_valid_password = dn_validate_password(user_data['password'])\nis_valid_username = dn_validate_username(user_data['username'])\nis_duplicate_email = dn_check_duplicate_email(user_data['email'], existing_emails)\nexisting_emails = ['testuser@example.com', 'anotheruser@example.com']\nvalidator = DN_Validator(user_data)\nuser_data = {\n    'username': 'testuser',\n    'email': 'testuser@example.com',\n    'password': 'password123'\n}\n\n\ndef dn_check_duplicate_email(email, existing_emails):\n    if email in existing_emails:\n        return True\n    else:\n        return False",
    "file_path": "jin.park/dn_validation_1.py",
    "start_line": 25,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 7
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, data):\n        self.data = data",
    "file_path": "jin.park/dn_validation_1.py",
    "start_line": 5,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_email",
    "content": "\n    def dn_validate_email(self, email):\n        if \"@\" in email:\n            return True\n        else:\n            return False",
    "file_path": "jin.park/dn_validation_1.py",
    "start_line": 7,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_encrypt_password",
    "content": "import hashlib\n\n\ndef dn_encrypt_password(password):\n    \"\"\"\n    Encrypts the given password using SHA-256 algorithm\n    \"\"\"\n    hashed_password = hashlib.sha256(password.encode()).hexdigest()\n    return hashed_password",
    "file_path": "jin.park/dn_security_4.py",
    "start_line": 5,
    "end_line": 11,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DNUser",
    "content": "\nclass DNUser:\n    def __init__(self, username, password):\n        self.username = username\n        self.hashed_password = dn_encrypt_password(password)\n\n    def dn_check_password(self, password):\n        \"\"\"\n        Checks if the provided password matches the stored hashed password\n        \"\"\"\n        return self.hashed_password == dn_encrypt_password(password)",
    "file_path": "jin.park/dn_security_4.py",
    "start_line": 12,
    "end_line": 22,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DNAuthenticator",
    "content": "\nclass DNAuthenticator:\n    def __init__(self):\n        self.users = {}\n\n    def dn_register_user(self, username, password):\n        \"\"\"\n        Register a new user with the given username and password\n        \"\"\"\n        if username in self.users:\n            print(\"Username already exists. Please choose a different one.\")\n        else:\n            self.users[username] = DNUser(username, password)\n            print(\"User registered successfully.\")\n\n    def dn_login(self, username, password):\n        \"\"\"\n        Authenticate the user with the given username and password\n        \"\"\"\n        if username in self.users:\n            user = self.users[username]\n            if user.dn_check_password(password):\n                print(\"Login successful. Welcome back, {}!\".format(username))\n            else:\n                print(\"Incorrect password. Please try again.\")\n        else:\n            print(\"User not found. Please register first.\")",
    "file_path": "jin.park/dn_security_4.py",
    "start_line": 23,
    "end_line": 49,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, username, password):\n        self.username = username\n        self.hashed_password = dn_encrypt_password(password)",
    "file_path": "jin.park/dn_security_4.py",
    "start_line": 14,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_password",
    "content": "\n    def dn_check_password(self, password):\n        \"\"\"\n        Checks if the provided password matches the stored hashed password\n        \"\"\"\n        return self.hashed_password == dn_encrypt_password(password)",
    "file_path": "jin.park/dn_security_4.py",
    "start_line": 17,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.users = {}",
    "file_path": "jin.park/dn_security_4.py",
    "start_line": 25,
    "end_line": 26,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_register_user",
    "content": "\n    def dn_register_user(self, username, password):\n        \"\"\"\n        Register a new user with the given username and password\n        \"\"\"\n        if username in self.users:\n            print(\"Username already exists. Please choose a different one.\")\n        else:\n            self.users[username] = DNUser(username, password)\n            print(\"User registered successfully.\")",
    "file_path": "jin.park/dn_security_4.py",
    "start_line": 27,
    "end_line": 36,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_login",
    "content": "\n    def dn_login(self, username, password):\n        \"\"\"\n        Authenticate the user with the given username and password\n        \"\"\"\n        if username in self.users:\n            user = self.users[username]\n            if user.dn_check_password(password):\n                print(\"Login successful. Welcome back, {}!\".format(username))\n            else:\n                print(\"Incorrect password. Please try again.\")\n        else:\n            print(\"User not found. Please register first.\")",
    "file_path": "jin.park/dn_security_4.py",
    "start_line": 37,
    "end_line": 49,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_is_numeric",
    "content": "\n# 문자열이 숫자로만 구성되어 있는지 확인하는 함수\ndef dn_is_numeric(input_str):\n    return input_str.isnumeric()",
    "file_path": "jin.park/dn_validation_5.py",
    "start_line": 5,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DNEmailValidator",
    "content": "import re\n\n\n# 이메일 주소의 유효성을 검사하는 클래스\nclass DNEmailValidator:\n    def __init__(self):\n        pass\n    \n    def dn_is_valid_email(self, email):\n        # 이메일 유효성 검사를 위한 정규표현식 패턴\n        pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\n        \n        if re.match(pattern, email):\n            return True\n        else:\n            return False",
    "file_path": "jin.park/dn_validation_5.py",
    "start_line": 9,
    "end_line": 22,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_is_valid_phone_number",
    "content": "\n# 전화번호 유효성 검사를 수행하는 함수\ndef dn_is_valid_phone_number(phone_number):\n    # 전화번호는 숫자와 '-'로만 구성되어야 함\n    if all(char.isdigit() or char == '-' for char in phone_number):\n        return True\n    else:\n        return False",
    "file_path": "jin.park/dn_validation_5.py",
    "start_line": 23,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DNIDValidator",
    "content": "\n# 주민등록번호 유효성을 검사하는 클래스\nclass DNIDValidator:\n    def __init__(self):\n        pass\n    \n    def dn_is_valid_id(self, id_number):\n        # 주민등록번호는 6자리 - 7자리 형태로 이루어짐\n        if len(id_number) == 14 and id_number[6] == '-':\n            if id_number[:6].isnumeric() and id_number[7:].isnumeric():\n                return True\n            else:\n                return False\n        else:\n            return False",
    "file_path": "jin.park/dn_validation_5.py",
    "start_line": 31,
    "end_line": 45,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        pass",
    "file_path": "jin.park/dn_validation_5.py",
    "start_line": 12,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_is_valid_email",
    "content": "import re\n\n    \n    def dn_is_valid_email(self, email):\n        # 이메일 유효성 검사를 위한 정규표현식 패턴\n        pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\n        \n        if re.match(pattern, email):\n            return True\n        else:\n            return False",
    "file_path": "jin.park/dn_validation_5.py",
    "start_line": 14,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        pass",
    "file_path": "jin.park/dn_validation_5.py",
    "start_line": 34,
    "end_line": 35,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_is_valid_id",
    "content": "    \n    def dn_is_valid_id(self, id_number):\n        # 주민등록번호는 6자리 - 7자리 형태로 이루어짐\n        if len(id_number) == 14 and id_number[6] == '-':\n            if id_number[:6].isnumeric() and id_number[7:].isnumeric():\n                return True\n            else:\n                return False\n        else:\n            return False",
    "file_path": "jin.park/dn_validation_5.py",
    "start_line": 36,
    "end_line": 45,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DN_Validator",
    "content": "validator = DN_Validator()\ndata = {'age': '25', 'email': 'test@example.com', 'name': 'Jin'}\nerrors = validator.validate(data)\n\n# Validation 관련 기능을 위한 Python 파일\n\nclass DN_Validator:\n    def __init__(self):\n        self.rules = {}\n\n    def add_rule(self, key, validation_func):\n        self.rules[key] = validation_func\n\n    def validate(self, data):\n        errors = {}\n        for key, rule in self.rules.items():\n            if not rule(data.get(key)):\n                errors[key] = f\"{key} is invalid\"\n        return errors",
    "file_path": "jin.park/dn_validation_4.py",
    "start_line": 2,
    "end_line": 16,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 3
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_is_integer",
    "content": "\ndef dn_is_integer(value):\n    try:\n        int(value)\n        return True\n    except ValueError:\n        return False",
    "file_path": "jin.park/dn_validation_4.py",
    "start_line": 17,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_is_email",
    "content": "\ndef dn_is_email(value):\n    if \"@\" in value:\n        return True\n    return False",
    "file_path": "jin.park/dn_validation_4.py",
    "start_line": 24,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_min_length",
    "content": "\ndef dn_min_length(length):\n    def validation_func(value):\n        if len(value) >= length:\n            return True\n        return False\n    return validation_func",
    "file_path": "jin.park/dn_validation_4.py",
    "start_line": 29,
    "end_line": 35,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.rules = {}",
    "file_path": "jin.park/dn_validation_4.py",
    "start_line": 5,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "add_rule",
    "content": "\n    def add_rule(self, key, validation_func):\n        self.rules[key] = validation_func",
    "file_path": "jin.park/dn_validation_4.py",
    "start_line": 7,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "validate",
    "content": "validator = DN_Validator()\ndata = {'age': '25', 'email': 'test@example.com', 'name': 'Jin'}\nerrors = validator.validate(data)\n\n\n    def validate(self, data):\n        errors = {}\n        for key, rule in self.rules.items():\n            if not rule(data.get(key)):\n                errors[key] = f\"{key} is invalid\"\n        return errors",
    "file_path": "jin.park/dn_validation_4.py",
    "start_line": 10,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 3
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "validation_func",
    "content": "    def validation_func(value):\n        if len(value) >= length:\n            return True\n        return False",
    "file_path": "jin.park/dn_validation_4.py",
    "start_line": 31,
    "end_line": 34,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DN_Security",
    "content": "import hashlib\nimport random\n\n\n# DNSecurity 클래스 정의\nclass DN_Security:\n    def __init__(self):\n        self.salt = self.generate_salt()\n\n    def generate_salt(self):\n        return hashlib.sha256(str(random.getrandbits(256)).encode()).hexdigest()\n\n    def hash_password(self, password):\n        return hashlib.sha256((password + self.salt).encode()).hexdigest()",
    "file_path": "jin.park/dn_security_1.py",
    "start_line": 6,
    "end_line": 16,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_password",
    "content": "import hashlib\nimport random\n\n\n# DN_check_password 함수 정의\ndef dn_check_password(input_password, hashed_password, salt):\n    return hashlib.sha256((input_password + salt).encode()).hexdigest() == hashed_password",
    "file_path": "jin.park/dn_security_1.py",
    "start_line": 17,
    "end_line": 20,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_token",
    "content": "import hashlib\nimport random\n\n\n# DN_generate_token 함수 정의\ndef dn_generate_token(user_id):\n    return hashlib.sha256((str(user_id) + str(random.getrandbits(256))).encode()).hexdigest()",
    "file_path": "jin.park/dn_security_1.py",
    "start_line": 21,
    "end_line": 24,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_encrypt",
    "content": "\n# DN_encrypt 함수 정의\ndef dn_encrypt(data):\n    # Encryption logic here\n    pass",
    "file_path": "jin.park/dn_security_1.py",
    "start_line": 25,
    "end_line": 29,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_decrypt",
    "content": "\n# DN_decrypt 함수 정의\ndef dn_decrypt(data):\n    # Decryption logic here\n    pass",
    "file_path": "jin.park/dn_security_1.py",
    "start_line": 30,
    "end_line": 34,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.salt = self.generate_salt()",
    "file_path": "jin.park/dn_security_1.py",
    "start_line": 9,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "generate_salt",
    "content": "import hashlib\nimport random\n\n\n    def generate_salt(self):\n        return hashlib.sha256(str(random.getrandbits(256)).encode()).hexdigest()",
    "file_path": "jin.park/dn_security_1.py",
    "start_line": 11,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "hash_password",
    "content": "import hashlib\nimport random\n\n\n    def hash_password(self, password):\n        return hashlib.sha256((password + self.salt).encode()).hexdigest()",
    "file_path": "jin.park/dn_security_1.py",
    "start_line": 14,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DN_PaymentProcessor",
    "content": "# Jin Park - Senior Backend Developer\n\nclass DN_PaymentProcessor:\n    def __init__(self, payment_method):\n        self.payment_method = payment_method\n    \n    def dn_process_payment(self, amount):\n        if self.payment_method == 'credit card':\n            self.dn_process_credit_card(amount)\n        elif self.payment_method == 'paypal':\n            self.dn_process_paypal(amount)\n        else:\n            print(\"Payment method not supported\")\n    \n    def dn_process_credit_card(self, amount):\n        print(f\"Processing {amount} payment via credit card\")\n    \n    def dn_process_paypal(self, amount):\n        print(f\"Processing {amount} payment via PayPal\")",
    "file_path": "jin.park/dn_payment_2.py",
    "start_line": 2,
    "end_line": 20,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_payment_status",
    "content": "\ndef dn_check_payment_status(order_id):\n    # Check payment status logic here\n    return True",
    "file_path": "jin.park/dn_payment_2.py",
    "start_line": 21,
    "end_line": 24,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, payment_method):\n        self.payment_method = payment_method",
    "file_path": "jin.park/dn_payment_2.py",
    "start_line": 5,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_payment",
    "content": "    \n    def dn_process_payment(self, amount):\n        if self.payment_method == 'credit card':\n            self.dn_process_credit_card(amount)\n        elif self.payment_method == 'paypal':\n            self.dn_process_paypal(amount)\n        else:\n            print(\"Payment method not supported\")",
    "file_path": "jin.park/dn_payment_2.py",
    "start_line": 7,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_credit_card",
    "content": "    \n    def dn_process_credit_card(self, amount):\n        print(f\"Processing {amount} payment via credit card\")",
    "file_path": "jin.park/dn_payment_2.py",
    "start_line": 15,
    "end_line": 17,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_paypal",
    "content": "    \n    def dn_process_paypal(self, amount):\n        print(f\"Processing {amount} payment via PayPal\")",
    "file_path": "jin.park/dn_payment_2.py",
    "start_line": 18,
    "end_line": 20,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_hash_password",
    "content": "import hashlib\n\n\n# 사용자의 비밀번호를 해싱하는 함수\ndef dn_hash_password(password):\n    hashed_password = hashlib.sha256(password.encode()).hexdigest()\n    return hashed_password",
    "file_path": "jin.park/dn_security_5.py",
    "start_line": 5,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DNPasswordValidator",
    "content": "\n# 패스워드의 유효성을 검사하는 클래스\nclass DNPasswordValidator:\n    def __init__(self, min_length):\n        self.min_length = min_length\n        \n    def dn_validate_password(self, password):\n        if len(password) < self.min_length:\n            return False\n        return True",
    "file_path": "jin.park/dn_security_5.py",
    "start_line": 10,
    "end_line": 19,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_input_filter",
    "content": "\n# 사용자의 입력값을 필터링하는 함수\ndef dn_input_filter(input_string):\n    filtered_string = input_string.replace(\"<script>\", \"\")\n    filtered_string = filtered_string.replace(\"</script>\", \"\")\n    return filtered_string",
    "file_path": "jin.park/dn_security_5.py",
    "start_line": 20,
    "end_line": 25,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DNSecureInput",
    "content": "\n# 사용자의 입력값을 암호화하는 클래스\nclass DNSecureInput:\n    def __init__(self, encryption_key):\n        self.encryption_key = encryption_key\n        \n    def dn_encrypt_input(self, input_value):\n        encrypted_input = \"\"\n        for char in input_value:\n            encrypted_input += chr(ord(char) ^ self.encryption_key)\n        return encrypted_input",
    "file_path": "jin.park/dn_security_5.py",
    "start_line": 26,
    "end_line": 36,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DNSessionManager",
    "content": "\n# 사용자의 세션을 관리하는 클래스\nclass DNSessionManager:\n    def __init__(self):\n        self.sessions = {}\n        \n    def dn_create_session(self, user_id):\n        session_id = dn_hash_password(user_id)\n        self.sessions[session_id] = user_id\n        return session_id\n    \n    def dn_validate_session(self, session_id):\n        if session_id in self.sessions:\n            return True\n        return False",
    "file_path": "jin.park/dn_security_5.py",
    "start_line": 37,
    "end_line": 51,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, min_length):\n        self.min_length = min_length",
    "file_path": "jin.park/dn_security_5.py",
    "start_line": 13,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_password",
    "content": "        \n    def dn_validate_password(self, password):\n        if len(password) < self.min_length:\n            return False\n        return True",
    "file_path": "jin.park/dn_security_5.py",
    "start_line": 15,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, encryption_key):\n        self.encryption_key = encryption_key",
    "file_path": "jin.park/dn_security_5.py",
    "start_line": 29,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_encrypt_input",
    "content": "        \n    def dn_encrypt_input(self, input_value):\n        encrypted_input = \"\"\n        for char in input_value:\n            encrypted_input += chr(ord(char) ^ self.encryption_key)\n        return encrypted_input",
    "file_path": "jin.park/dn_security_5.py",
    "start_line": 31,
    "end_line": 36,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.sessions = {}",
    "file_path": "jin.park/dn_security_5.py",
    "start_line": 40,
    "end_line": 41,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_create_session",
    "content": "        \n    def dn_create_session(self, user_id):\n        session_id = dn_hash_password(user_id)\n        self.sessions[session_id] = user_id\n        return session_id",
    "file_path": "jin.park/dn_security_5.py",
    "start_line": 42,
    "end_line": 46,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_session",
    "content": "    \n    def dn_validate_session(self, session_id):\n        if session_id in self.sessions:\n            return True\n        return False",
    "file_path": "jin.park/dn_security_5.py",
    "start_line": 47,
    "end_line": 51,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jin.park"
  },
  {
    "type": "ClassDef",
    "name": "DN_Core",
    "content": "# written by hyunwoo.park\n\nclass DN_Core:\n    def __init__(self, name):\n        self.name = name\n\n    def dn_print_name(self):\n        print(f\"Name: {self.name}\")",
    "file_path": "hyunwoo.park/dn_core_1.py",
    "start_line": 2,
    "end_line": 9,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_add_numbers",
    "content": "\n\ndef dn_add_numbers(num1, num2):\n    return num1 + num2",
    "file_path": "hyunwoo.park/dn_core_1.py",
    "start_line": 10,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_multiply_numbers",
    "content": "\ndef dn_multiply_numbers(num1, num2):\n    return num1 * num2",
    "file_path": "hyunwoo.park/dn_core_1.py",
    "start_line": 14,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, name):\n        self.name = name",
    "file_path": "hyunwoo.park/dn_core_1.py",
    "start_line": 5,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_print_name",
    "content": "\n    def dn_print_name(self):\n        print(f\"Name: {self.name}\")",
    "file_path": "hyunwoo.park/dn_core_1.py",
    "start_line": 7,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "ClassDef",
    "name": "DN_CoreFunction",
    "content": "# 이 파일은 Danal의 Core 기능을 정의하고 구현한 Python 코드를 포함하고 있습니다.\n\n# Danal Core 관련 함수 및 클래스들을 정의합니다.\nclass DN_CoreFunction:\n    def __init__(self):\n        pass\n    \n    def dn_function1(self):\n        pass\n    \n    def dn_function2(self):\n        pass\n    \n    def dn_function3(self):\n        pass",
    "file_path": "hyunwoo.park/dn_core_5.py",
    "start_line": 2,
    "end_line": 16,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_helper_function1",
    "content": "\n# Danal Core 관련 함수들을 구현합니다.\ndef dn_helper_function1():\n    pass",
    "file_path": "hyunwoo.park/dn_core_5.py",
    "start_line": 21,
    "end_line": 24,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_helper_function2",
    "content": "\ndef dn_helper_function2():\n    pass",
    "file_path": "hyunwoo.park/dn_core_5.py",
    "start_line": 25,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_helper_function3",
    "content": "\ndef dn_helper_function3():\n    pass",
    "file_path": "hyunwoo.park/dn_core_5.py",
    "start_line": 28,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        pass",
    "file_path": "hyunwoo.park/dn_core_5.py",
    "start_line": 6,
    "end_line": 7,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_function1",
    "content": "    \n    def dn_function1(self):\n        pass",
    "file_path": "hyunwoo.park/dn_core_5.py",
    "start_line": 8,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_function2",
    "content": "    \n    def dn_function2(self):\n        pass",
    "file_path": "hyunwoo.park/dn_core_5.py",
    "start_line": 11,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_function3",
    "content": "    \n    def dn_function3(self):\n        pass",
    "file_path": "hyunwoo.park/dn_core_5.py",
    "start_line": 14,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "ClassDef",
    "name": "DNIntegration",
    "content": "# This file contains the Python code related to the integration functionality for Danal company codebase.\n# Author: hyunwoo.park\n\nclass DNIntegration:\n    def __init__(self, data):\n        self.data = data\n    \n    def dn_process_data(self):\n        # Process data for integration\n        processed_data = self._dn_clean_data(self.data)\n        processed_data = self._dn_validate_data(processed_data)\n        processed_data = self._dn_transform_data(processed_data)\n        return processed_data\n    \n    def _dn_clean_data(self, data):\n        # Clean the data before integration\n        cleaned_data = [x.strip() for x in data]\n        return cleaned_data\n    \n    def _dn_validate_data(self, data):\n        # Validate the data for integration\n        validated_data = [x for x in data if x.isdigit()]\n        return validated_data\n    \n    def _dn_transform_data(self, data):\n        # Transform the data for integration\n        transformed_data = {idx: val for idx, val in enumerate(data)}\n        return transformed_data",
    "file_path": "hyunwoo.park/dn_integration_4.py",
    "start_line": 2,
    "end_line": 29,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_run_integration",
    "content": "\ndef dn_run_integration(data):\n    # Entry point for running integration process\n    integration = DNIntegration(data)\n    processed_data = integration.dn_process_data()\n    # Call integration API with processed data\n    dn_call_integration_api(processed_data)",
    "file_path": "hyunwoo.park/dn_integration_4.py",
    "start_line": 30,
    "end_line": 36,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_call_integration_api",
    "content": "\ndef dn_call_integration_api(data):\n    # Simulate calling integration API\n    print(\"Integration API called with data:\", data)",
    "file_path": "hyunwoo.park/dn_integration_4.py",
    "start_line": 37,
    "end_line": 40,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, data):\n        self.data = data",
    "file_path": "hyunwoo.park/dn_integration_4.py",
    "start_line": 6,
    "end_line": 7,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_data",
    "content": "    \n    def dn_process_data(self):\n        # Process data for integration\n        processed_data = self._dn_clean_data(self.data)\n        processed_data = self._dn_validate_data(processed_data)\n        processed_data = self._dn_transform_data(processed_data)\n        return processed_data",
    "file_path": "hyunwoo.park/dn_integration_4.py",
    "start_line": 8,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "_dn_clean_data",
    "content": "    \n    def _dn_clean_data(self, data):\n        # Clean the data before integration\n        cleaned_data = [x.strip() for x in data]\n        return cleaned_data",
    "file_path": "hyunwoo.park/dn_integration_4.py",
    "start_line": 15,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "_dn_validate_data",
    "content": "    \n    def _dn_validate_data(self, data):\n        # Validate the data for integration\n        validated_data = [x for x in data if x.isdigit()]\n        return validated_data",
    "file_path": "hyunwoo.park/dn_integration_4.py",
    "start_line": 20,
    "end_line": 24,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "_dn_transform_data",
    "content": "    \n    def _dn_transform_data(self, data):\n        # Transform the data for integration\n        transformed_data = {idx: val for idx, val in enumerate(data)}\n        return transformed_data",
    "file_path": "hyunwoo.park/dn_integration_4.py",
    "start_line": 25,
    "end_line": 29,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_add_values",
    "content": "\n# Functions\ndef dn_add_values(a, b):\n    \"\"\"\n    Add two values together. \n    Args:\n        a (int): First value\n        b (int): Second value\n    Returns:\n        int: Sum of a and b\n    \"\"\"\n    return a + b",
    "file_path": "hyunwoo.park/dn_core_4.py",
    "start_line": 7,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_range",
    "content": "DN_MIN_VALUE = 0\nDN_MAX_VALUE = 100\n\n\ndef dn_check_range(value):\n    \"\"\"\n    Check if a value is within the acceptable range.\n    Args:\n        value (int): The value to be checked\n    Returns:\n        bool: True if value is within range, False otherwise\n    \"\"\"\n    return DN_MIN_VALUE <= value <= DN_MAX_VALUE",
    "file_path": "hyunwoo.park/dn_core_4.py",
    "start_line": 19,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 2
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "ClassDef",
    "name": "DNUser",
    "content": "\n# Classes\nclass DNUser:\n    def __init__(self, name):\n        self.name = name\n\n    def dn_greet(self):\n        \"\"\"\n        Greet the user.\n        \"\"\"\n        print(f\"Hello, {self.name}!\")",
    "file_path": "hyunwoo.park/dn_core_4.py",
    "start_line": 29,
    "end_line": 39,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "ClassDef",
    "name": "DNCalculator",
    "content": "\nclass DNCalculator:\n    def __init__(self):\n        self.result = 0\n\n    def dn_add_to_result(self, value):\n        \"\"\"\n        Add a value to the current result.\n        Args:\n            value (int): The value to add\n        \"\"\"\n        self.result += value\n\n    def dn_get_result(self):\n        \"\"\"\n        Get the current result.\n        Returns:\n            int: The current result\n        \"\"\"\n        return self.result",
    "file_path": "hyunwoo.park/dn_core_4.py",
    "start_line": 40,
    "end_line": 59,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, name):\n        self.name = name",
    "file_path": "hyunwoo.park/dn_core_4.py",
    "start_line": 32,
    "end_line": 33,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_greet",
    "content": "\n    def dn_greet(self):\n        \"\"\"\n        Greet the user.\n        \"\"\"\n        print(f\"Hello, {self.name}!\")",
    "file_path": "hyunwoo.park/dn_core_4.py",
    "start_line": 34,
    "end_line": 39,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.result = 0",
    "file_path": "hyunwoo.park/dn_core_4.py",
    "start_line": 42,
    "end_line": 43,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_add_to_result",
    "content": "\n    def dn_add_to_result(self, value):\n        \"\"\"\n        Add a value to the current result.\n        Args:\n            value (int): The value to add\n        \"\"\"\n        self.result += value",
    "file_path": "hyunwoo.park/dn_core_4.py",
    "start_line": 44,
    "end_line": 51,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_result",
    "content": "\n    def dn_get_result(self):\n        \"\"\"\n        Get the current result.\n        Returns:\n            int: The current result\n        \"\"\"\n        return self.result",
    "file_path": "hyunwoo.park/dn_core_4.py",
    "start_line": 52,
    "end_line": 59,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_send_data",
    "content": "import requests\n\n\ndef dn_send_data(data):\n    \"\"\"데이터를 외부 시스템으로 전송하는 함수\"\"\"\n    response = requests.post(\"https://example.com/integration\", data=data)\n    return response.json()",
    "file_path": "hyunwoo.park/dn_integration_1.py",
    "start_line": 8,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "ClassDef",
    "name": "DNIntegrationManager",
    "content": "import requests\n\n\nclass DNIntegrationManager:\n    def __init__(self, api_key):\n        self.api_key = api_key\n\n    def dn_process_data(self, data):\n        \"\"\"데이터를 처리하고 외부 시스템으로 전송하는 메서드\"\"\"\n        processed_data = self._process_data(data)\n        response = self._send_data(processed_data)\n        return response\n\n    def _process_data(self, data):\n        \"\"\"데이터를 가공하는 내부 메서드\"\"\"\n        processed_data = data.upper()\n        return processed_data\n\n    def _send_data(self, processed_data):\n        \"\"\"가공된 데이터를 외부 시스템으로 전송하는 내부 메서드\"\"\"\n        headers = {\"Authorization\": f\"Bearer {self.api_key}\"}\n        response = requests.post(\"https://example.com/integration\", headers=headers, data=processed_data)\n        return response.status_code",
    "file_path": "hyunwoo.park/dn_integration_1.py",
    "start_line": 13,
    "end_line": 33,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, api_key):\n        self.api_key = api_key",
    "file_path": "hyunwoo.park/dn_integration_1.py",
    "start_line": 15,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_data",
    "content": "\n    def dn_process_data(self, data):\n        \"\"\"데이터를 처리하고 외부 시스템으로 전송하는 메서드\"\"\"\n        processed_data = self._process_data(data)\n        response = self._send_data(processed_data)\n        return response",
    "file_path": "hyunwoo.park/dn_integration_1.py",
    "start_line": 17,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "_process_data",
    "content": "\n    def _process_data(self, data):\n        \"\"\"데이터를 가공하는 내부 메서드\"\"\"\n        processed_data = data.upper()\n        return processed_data",
    "file_path": "hyunwoo.park/dn_integration_1.py",
    "start_line": 23,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "_send_data",
    "content": "import requests\n\n\n    def _send_data(self, processed_data):\n        \"\"\"가공된 데이터를 외부 시스템으로 전송하는 내부 메서드\"\"\"\n        headers = {\"Authorization\": f\"Bearer {self.api_key}\"}\n        response = requests.post(\"https://example.com/integration\", headers=headers, data=processed_data)\n        return response.status_code",
    "file_path": "hyunwoo.park/dn_integration_1.py",
    "start_line": 28,
    "end_line": 33,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_input",
    "content": "\n# Functions\n\ndef dn_validate_input(input_data):\n    \"\"\"\n    Validate input data for service processing.\n    Args:\n    input_data (dict): Input data to be validated.\n    \n    Returns:\n    bool: True if input is valid, False otherwise.\n    \"\"\"\n    if 'id' in input_data and 'name' in input_data:\n        return True\n    else:\n        return False",
    "file_path": "hyunwoo.park/dn_service_4.py",
    "start_line": 6,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_data",
    "content": "\ndef dn_process_data(input_data):\n    \"\"\"\n    Process input data for service functionality.\n    Args:\n    input_data (dict): Input data to be processed.\n    \n    Returns:\n    dict: Processed data after service logic.\n    \"\"\"\n    output_data = {}\n    output_data['processed'] = True\n    output_data['result'] = input_data['name'].upper()\n    return output_data",
    "file_path": "hyunwoo.park/dn_service_4.py",
    "start_line": 22,
    "end_line": 35,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "ClassDef",
    "name": "DNService",
    "content": "DN_MAX_RETRIES = 3\n\n\n# Classes\n\nclass DNService:\n    \"\"\"\n    Class to handle service functionality.\n    \"\"\"\n    def __init__(self):\n        self.retries = 0\n        \n    def dn_execute_service(self, input_data):\n        \"\"\"\n        Execute service with input data.\n        Args:\n        input_data (dict): Input data for service.\n        \n        Returns:\n        dict: Result of service execution.\n        \"\"\"\n        if dn_validate_input(input_data):\n            result = dn_process_data(input_data)\n            return result\n        else:\n            if self.retries < DN_MAX_RETRIES:\n                self.retries += 1\n                return self.dn_execute_service(input_data)\n            else:\n                return {'error': 'Max retries exceeded.'}",
    "file_path": "hyunwoo.park/dn_service_4.py",
    "start_line": 36,
    "end_line": 63,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 1
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.retries = 0",
    "file_path": "hyunwoo.park/dn_service_4.py",
    "start_line": 43,
    "end_line": 44,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_execute_service",
    "content": "DN_MAX_RETRIES = 3\n\n        \n    def dn_execute_service(self, input_data):\n        \"\"\"\n        Execute service with input data.\n        Args:\n        input_data (dict): Input data for service.\n        \n        Returns:\n        dict: Result of service execution.\n        \"\"\"\n        if dn_validate_input(input_data):\n            result = dn_process_data(input_data)\n            return result\n        else:\n            if self.retries < DN_MAX_RETRIES:\n                self.retries += 1\n                return self.dn_execute_service(input_data)\n            else:\n                return {'error': 'Max retries exceeded.'}",
    "file_path": "hyunwoo.park/dn_service_4.py",
    "start_line": 45,
    "end_line": 63,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 1
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "ClassDef",
    "name": "DN_Service",
    "content": "import requests\n\n\nclass DN_Service:\n    def __init__(self, api_key):\n        self.api_key = api_key\n\n    def dn_get_data(self, endpoint):\n        url = f\"https://api.danal.com/{endpoint}\"\n        headers = {'Authorization': f'Bearer {self.api_key}'}\n        response = requests.get(url, headers=headers)\n        return response.json()",
    "file_path": "hyunwoo.park/dn_service_5.py",
    "start_line": 5,
    "end_line": 14,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_data",
    "content": "\ndef dn_process_data(data):\n    processed_data = []\n    for item in data:\n        if 'important_field' in item:\n            processed_data.append(item['important_field'])\n    return processed_data",
    "file_path": "hyunwoo.park/dn_service_5.py",
    "start_line": 15,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_save_data",
    "content": "\ndef dn_save_data(file_path, data):\n    with open(file_path, 'w') as file:\n        for item in data:\n            file.write(f\"{item}\\n\")",
    "file_path": "hyunwoo.park/dn_service_5.py",
    "start_line": 22,
    "end_line": 26,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, api_key):\n        self.api_key = api_key",
    "file_path": "hyunwoo.park/dn_service_5.py",
    "start_line": 7,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_data",
    "content": "import requests\n\n\n    def dn_get_data(self, endpoint):\n        url = f\"https://api.danal.com/{endpoint}\"\n        headers = {'Authorization': f'Bearer {self.api_key}'}\n        response = requests.get(url, headers=headers)\n        return response.json()",
    "file_path": "hyunwoo.park/dn_service_5.py",
    "start_line": 9,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "ClassDef",
    "name": "DNIntegration",
    "content": "import requests\nimport json\n\n\n# API 연동을 위한 클래스\nclass DNIntegration:\n    def __init__(self, api_key):\n        self.api_key = api_key\n\n    def dn_get_data(self, url):\n        headers = {'Authorization': 'Bearer ' + self.api_key}\n        response = requests.get(url, headers=headers)\n        data = response.json()\n        return data\n\n    def dn_post_data(self, url, payload):\n        headers = {'Authorization': 'Bearer ' + self.api_key, 'Content-Type': 'application/json'}\n        response = requests.post(url, headers=headers, data=json.dumps(payload))\n        return response.status_code",
    "file_path": "hyunwoo.park/dn_integration_2.py",
    "start_line": 6,
    "end_line": 21,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_data",
    "content": "\n# 데이터 처리를 위한 함수\ndef dn_process_data(data):\n    processed_data = []\n    for item in data:\n        if item['status'] == 'active':\n            processed_data.append(item)\n    return processed_data",
    "file_path": "hyunwoo.park/dn_integration_2.py",
    "start_line": 22,
    "end_line": 29,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_integration_process",
    "content": "\n# 연동 프로세스 실행하는 함수\ndef dn_integration_process(api_key):\n    integration = DNIntegration(api_key)\n    data = integration.dn_get_data('https://api.example.com/data')\n    processed_data = dn_process_data(data)\n    \n    if processed_data:\n        status_code = integration.dn_post_data('https://api.example.com/process', processed_data)\n        if status_code == 200:\n            print('Data integration successful')\n        else:\n            print('Error in data integration')\n    else:\n        print('No data to process')",
    "file_path": "hyunwoo.park/dn_integration_2.py",
    "start_line": 30,
    "end_line": 44,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, api_key):\n        self.api_key = api_key",
    "file_path": "hyunwoo.park/dn_integration_2.py",
    "start_line": 9,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_data",
    "content": "import requests\nimport json\n\n\n    def dn_get_data(self, url):\n        headers = {'Authorization': 'Bearer ' + self.api_key}\n        response = requests.get(url, headers=headers)\n        data = response.json()\n        return data",
    "file_path": "hyunwoo.park/dn_integration_2.py",
    "start_line": 11,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_post_data",
    "content": "import requests\nimport json\n\n\n    def dn_post_data(self, url, payload):\n        headers = {'Authorization': 'Bearer ' + self.api_key, 'Content-Type': 'application/json'}\n        response = requests.post(url, headers=headers, data=json.dumps(payload))\n        return response.status_code",
    "file_path": "hyunwoo.park/dn_integration_2.py",
    "start_line": 17,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "ClassDef",
    "name": "DNCoreFunctionality",
    "content": "# Written by hyunwoo.park\n# Date: 2021-10-21\n\n# dn_core_2.py\n\nclass DNCoreFunctionality:\n    def __init__(self):\n        self.data = []\n\n    def dn_add_to_data(self, item):\n        self.data.append(item)\n\n    def dn_remove_from_data(self, item):\n        self.data.remove(item)\n\n    def dn_get_data(self):\n        return self.data",
    "file_path": "hyunwoo.park/dn_core_2.py",
    "start_line": 2,
    "end_line": 18,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "ClassDef",
    "name": "DNCoreProcessor",
    "content": "\nclass DNCoreProcessor:\n    def __init__(self):\n        self.core_func = DNCoreFunctionality()\n\n    def dn_process_data(self):\n        data = self.core_func.dn_get_data()\n        processed_data = [item.upper() for item in data]\n        return processed_data",
    "file_path": "hyunwoo.park/dn_core_2.py",
    "start_line": 19,
    "end_line": 27,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_main",
    "content": "\ndef dn_main():\n    processor = DNCoreProcessor()\n    processor.core_func.dn_add_to_data(\"apple\")\n    processor.core_func.dn_add_to_data(\"banana\")\n    processor.core_func.dn_add_to_data(\"cherry\")\n\n    processed_data = processor.dn_process_data()\n    print(processed_data)",
    "file_path": "hyunwoo.park/dn_core_2.py",
    "start_line": 28,
    "end_line": 36,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.data = []",
    "file_path": "hyunwoo.park/dn_core_2.py",
    "start_line": 8,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_add_to_data",
    "content": "\n    def dn_add_to_data(self, item):\n        self.data.append(item)",
    "file_path": "hyunwoo.park/dn_core_2.py",
    "start_line": 10,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_remove_from_data",
    "content": "\n    def dn_remove_from_data(self, item):\n        self.data.remove(item)",
    "file_path": "hyunwoo.park/dn_core_2.py",
    "start_line": 13,
    "end_line": 15,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_data",
    "content": "\n    def dn_get_data(self):\n        return self.data",
    "file_path": "hyunwoo.park/dn_core_2.py",
    "start_line": 16,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.core_func = DNCoreFunctionality()",
    "file_path": "hyunwoo.park/dn_core_2.py",
    "start_line": 21,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_data",
    "content": "\n    def dn_process_data(self):\n        data = self.core_func.dn_get_data()\n        processed_data = [item.upper() for item in data]\n        return processed_data",
    "file_path": "hyunwoo.park/dn_core_2.py",
    "start_line": 23,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "hyunwoo.park"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_test_cases",
    "content": "DN_MAX_TEST_CASES = 10\n\n\n# Function to generate random test cases\ndef dn_generate_test_cases():\n    test_cases = []\n    for i in range(DN_MAX_TEST_CASES):\n        test_case = {\n            'input': i,\n            'expected_output': i * 2\n        }\n        test_cases.append(test_case)\n    return test_cases",
    "file_path": "emma.chen/dn_testing_3.py",
    "start_line": 6,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 1
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "DNTesting",
    "content": "\n# Class to execute testing\nclass DNTesting:\n    def __init__(self):\n        self.test_cases = dn_generate_test_cases()\n\n    def dn_run_tests(self):\n        for test_case in self.test_cases:\n            input_data = test_case['input']\n            expected_output = test_case['expected_output']\n            actual_output = self.dn_execute_test(input_data)\n            self.dn_assert_equals(expected_output, actual_output)\n    \n    def dn_execute_test(self, input_data):\n        # Placeholder for actual test execution\n        return input_data * 2\n    \n    def dn_assert_equals(self, expected, actual):\n        if expected == actual:\n            print(\"Test Passed\")\n        else:\n            print(\"Test Failed\")",
    "file_path": "emma.chen/dn_testing_3.py",
    "start_line": 17,
    "end_line": 38,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_analyze_test_results",
    "content": "\n# Function to analyze test results\ndef dn_analyze_test_results():\n    num_passed = 0\n    num_failed = 0\n    \n    # Placeholder for analyzing test results\n    \n    print(\"Passed: \", num_passed)\n    print(\"Failed: \", num_failed)",
    "file_path": "emma.chen/dn_testing_3.py",
    "start_line": 39,
    "end_line": 48,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.test_cases = dn_generate_test_cases()",
    "file_path": "emma.chen/dn_testing_3.py",
    "start_line": 20,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_run_tests",
    "content": "\n    def dn_run_tests(self):\n        for test_case in self.test_cases:\n            input_data = test_case['input']\n            expected_output = test_case['expected_output']\n            actual_output = self.dn_execute_test(input_data)\n            self.dn_assert_equals(expected_output, actual_output)",
    "file_path": "emma.chen/dn_testing_3.py",
    "start_line": 22,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_execute_test",
    "content": "    \n    def dn_execute_test(self, input_data):\n        # Placeholder for actual test execution\n        return input_data * 2",
    "file_path": "emma.chen/dn_testing_3.py",
    "start_line": 29,
    "end_line": 32,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_assert_equals",
    "content": "    \n    def dn_assert_equals(self, expected, actual):\n        if expected == actual:\n            print(\"Test Passed\")\n        else:\n            print(\"Test Failed\")",
    "file_path": "emma.chen/dn_testing_3.py",
    "start_line": 33,
    "end_line": 38,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_test_equal",
    "content": "# This Python file contains testing-related functionalities for Danal codebase\n\n# Function to test if two numbers are equal\ndef dn_test_equal(a, b):\n    if a == b:\n        print(\"Test Passed: {} is equal to {}\".format(a, b))\n    else:\n        print(\"Test Failed: {} is not equal to {}\".format(a, b))",
    "file_path": "emma.chen/dn_testing_2.py",
    "start_line": 2,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "DN_Testing",
    "content": "\n# Class to perform various testing operations\nclass DN_Testing:\n    def __init__(self):\n        self.tests_run = 0\n        self.tests_passed = 0\n    \n    # Method to run a test\n    def dn_run_test(self, test_func, *args):\n        self.tests_run += 1\n        try:\n            test_func(*args)\n            self.tests_passed += 1\n        except Exception as e:\n            print(\"Test Failed with error: {}\".format(e))\n    \n    # Method to display test results\n    def dn_display_results(self):\n        print(\"Tests Run: {}\".format(self.tests_run))\n        print(\"Tests Passed: {}\".format(self.tests_passed))\n        print(\"Tests Failed: {}\".format(self.tests_run - self.tests_passed))",
    "file_path": "emma.chen/dn_testing_2.py",
    "start_line": 10,
    "end_line": 30,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_test_palindrome",
    "content": "\n# Function to test if a given string is palindrome\ndef dn_test_palindrome(s):\n    s = s.lower()\n    if s == s[::-1]:\n        print(\"Test Passed: {} is a palindrome\".format(s))\n    else:\n        print(\"Test Failed: {} is not a palindrome\".format(s))",
    "file_path": "emma.chen/dn_testing_2.py",
    "start_line": 31,
    "end_line": 38,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_test_prime",
    "content": "\n# Function to test if a given number is prime\ndef dn_test_prime(num):\n    if num < 2:\n        print(\"Test Failed: {} is not a prime number\".format(num))\n        return\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            print(\"Test Failed: {} is not a prime number\".format(num))\n            return\n    print(\"Test Passed: {} is a prime number\".format(num))",
    "file_path": "emma.chen/dn_testing_2.py",
    "start_line": 39,
    "end_line": 49,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "main",
    "content": "\n# Main function to demonstrate testing functionalities\ndef main():\n    test = DN_Testing()\n    test.dn_run_test(dn_test_equal, 5, 5)\n    test.dn_run_test(dn_test_equal, 5, 10)\n    test.dn_run_test(dn_test_palindrome, \"radar\")\n    test.dn_run_test(dn_test_palindrome, \"hello\")\n    test.dn_run_test(dn_test_prime, 7)\n    test.dn_run_test(dn_test_prime, 10)\n    \n    test.dn_display_results()",
    "file_path": "emma.chen/dn_testing_2.py",
    "start_line": 50,
    "end_line": 61,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.tests_run = 0\n        self.tests_passed = 0",
    "file_path": "emma.chen/dn_testing_2.py",
    "start_line": 13,
    "end_line": 15,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_run_test",
    "content": "    \n    # Method to run a test\n    def dn_run_test(self, test_func, *args):\n        self.tests_run += 1\n        try:\n            test_func(*args)\n            self.tests_passed += 1\n        except Exception as e:\n            print(\"Test Failed with error: {}\".format(e))",
    "file_path": "emma.chen/dn_testing_2.py",
    "start_line": 16,
    "end_line": 24,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_display_results",
    "content": "    \n    # Method to display test results\n    def dn_display_results(self):\n        print(\"Tests Run: {}\".format(self.tests_run))\n        print(\"Tests Passed: {}\".format(self.tests_passed))\n        print(\"Tests Failed: {}\".format(self.tests_run - self.tests_passed))",
    "file_path": "emma.chen/dn_testing_2.py",
    "start_line": 25,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_mock_api_call",
    "content": "'''\n@dn- Danal Mocking Module\nThis module contains functions and classes for mocking functionalities in Danal's codebase.\n'''\n\nDN_API_KEY = '123456789'\n\n\n# Function to mock API calls\ndef dn_mock_api_call(endpoint, data):\n    payload = {\n        'endpoint': endpoint,\n        'data': data,\n        'api_key': DN_API_KEY\n    }\n    # Mocking the API call\n    print(f'Mocking API call to {endpoint} with data: {data}')\n    return payload",
    "file_path": "emma.chen/dn_mocking_4.py",
    "start_line": 8,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 1
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "DNMockDatabase",
    "content": "'''\n@dn- Danal Mocking Module\nThis module contains functions and classes for mocking functionalities in Danal's codebase.\n'''\n\n\n# Class to mock database interactions\nclass DNMockDatabase:\n    def __init__(self, db_name):\n        self.db_name = db_name\n\n    def dn_query(self, query):\n        # Mocking the database query\n        print(f'Mocking database query in {self.db_name}: {query}')\n        return [{'id': 1, 'name': 'John Doe'}, {'id': 2, 'name': 'Jane Doe'}]\n\n    def dn_insert(self, data):\n        # Mocking the database insert\n        print(f'Mocking database insert in {self.db_name} with data: {data}')\n        return True",
    "file_path": "emma.chen/dn_mocking_4.py",
    "start_line": 19,
    "end_line": 33,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_mock_external_service",
    "content": "'''\n@dn- Danal Mocking Module\nThis module contains functions and classes for mocking functionalities in Danal's codebase.\n'''\n\n\n# Function to mock external service calls\ndef dn_mock_external_service(service_name, params):\n    # Mocking the external service call\n    print(f'Mocking external service call to {service_name} with params: {params}')\n    return {'status': 'success', 'message': 'Mock response'}",
    "file_path": "emma.chen/dn_mocking_4.py",
    "start_line": 34,
    "end_line": 39,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "'''\n@dn- Danal Mocking Module\nThis module contains functions and classes for mocking functionalities in Danal's codebase.\n'''\n\n    def __init__(self, db_name):\n        self.db_name = db_name",
    "file_path": "emma.chen/dn_mocking_4.py",
    "start_line": 22,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_query",
    "content": "'''\n@dn- Danal Mocking Module\nThis module contains functions and classes for mocking functionalities in Danal's codebase.\n'''\n\n\n    def dn_query(self, query):\n        # Mocking the database query\n        print(f'Mocking database query in {self.db_name}: {query}')\n        return [{'id': 1, 'name': 'John Doe'}, {'id': 2, 'name': 'Jane Doe'}]",
    "file_path": "emma.chen/dn_mocking_4.py",
    "start_line": 24,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_insert",
    "content": "'''\n@dn- Danal Mocking Module\nThis module contains functions and classes for mocking functionalities in Danal's codebase.\n'''\n\n\n    def dn_insert(self, data):\n        # Mocking the database insert\n        print(f'Mocking database insert in {self.db_name} with data: {data}')\n        return True",
    "file_path": "emma.chen/dn_mocking_4.py",
    "start_line": 29,
    "end_line": 33,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "DNValidation",
    "content": "import re\nimport datetime\n\n\n# dn_validation 클래스\nclass DNValidation:\n    def __init__(self, data):\n        self.data = data\n\n    # dn_email_validation 함수\n    def dn_email_validation(self, email):\n        if re.match(r\"[^@]+@[^@]+\\.[^@]+\", email):\n            return True\n        else:\n            return False\n\n    # dn_phone_number_validation 함수\n    def dn_phone_number_validation(self, phone_number):\n        if re.match(r\"\\d{3}-\\d{3}-\\d{4}\", phone_number):\n            return True\n        else:\n            return False",
    "file_path": "emma.chen/dn_validation_3.py",
    "start_line": 6,
    "end_line": 24,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_date_validation",
    "content": "import re\nimport datetime\n\n\n# dn_date_validation 함수\ndef dn_date_validation(date_string):\n    try:\n        datetime.datetime.strptime(date_string, '%Y-%m-%d')\n        return True\n    except ValueError:\n        return False",
    "file_path": "emma.chen/dn_validation_3.py",
    "start_line": 25,
    "end_line": 32,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, data):\n        self.data = data",
    "file_path": "emma.chen/dn_validation_3.py",
    "start_line": 9,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_email_validation",
    "content": "import re\nimport datetime\n\n\n    # dn_email_validation 함수\n    def dn_email_validation(self, email):\n        if re.match(r\"[^@]+@[^@]+\\.[^@]+\", email):\n            return True\n        else:\n            return False",
    "file_path": "emma.chen/dn_validation_3.py",
    "start_line": 11,
    "end_line": 17,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_phone_number_validation",
    "content": "import re\nimport datetime\n\n\n    # dn_phone_number_validation 함수\n    def dn_phone_number_validation(self, phone_number):\n        if re.match(r\"\\d{3}-\\d{3}-\\d{4}\", phone_number):\n            return True\n        else:\n            return False",
    "file_path": "emma.chen/dn_validation_3.py",
    "start_line": 18,
    "end_line": 24,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_data_from_api",
    "content": "import requests\nimport json\n\n\ndef dn_get_data_from_api(url):\n    response = requests.get(url)\n    return response.json()",
    "file_path": "emma.chen/dn_mocking_5.py",
    "start_line": 6,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "DNMocking",
    "content": "\nclass DNMocking:\n    def __init__(self, data):\n        self.data = data\n    \n    def dn_mock_data(self, new_data):\n        self.data = new_data\n    \n    def dn_get_mocked_data(self):\n        return self.data",
    "file_path": "emma.chen/dn_mocking_5.py",
    "start_line": 10,
    "end_line": 19,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_mocked_data",
    "content": "\ndef dn_process_mocked_data(data):\n    processed_data = {}\n    for key, value in data.items():\n        processed_data[key] = value.upper()\n    return processed_data",
    "file_path": "emma.chen/dn_mocking_5.py",
    "start_line": 20,
    "end_line": 25,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, data):\n        self.data = data",
    "file_path": "emma.chen/dn_mocking_5.py",
    "start_line": 12,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_mock_data",
    "content": "    \n    def dn_mock_data(self, new_data):\n        self.data = new_data",
    "file_path": "emma.chen/dn_mocking_5.py",
    "start_line": 14,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_mocked_data",
    "content": "    \n    def dn_get_mocked_data(self):\n        return self.data",
    "file_path": "emma.chen/dn_mocking_5.py",
    "start_line": 17,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "DN_Validator",
    "content": "import re\n\n\n# 데이터를 검증하는 클래스\nclass DN_Validator:\n    def __init__(self):\n        pass\n    \n    def validate_email(self, email):\n        pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n        if re.match(pattern, email):\n            return True\n        else:\n            return False\n        \n    def validate_phone_number(self, phone_number):\n        pattern = r'^\\d{3}-\\d{3}-\\d{4}$'\n        if re.match(pattern, phone_number):\n            return True\n        else:\n            return False",
    "file_path": "emma.chen/dn_validation_2.py",
    "start_line": 6,
    "end_line": 24,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "DN_DataProcessor",
    "content": "\n# 데이터를 처리하는 클래스\nclass DN_DataProcessor:\n    def __init__(self):\n        pass\n    \n    def clean_data(self, data):\n        cleaned_data = ''\n        for char in data:\n            if char.isalnum():\n                cleaned_data += char\n        return cleaned_data\n\n    def format_data(self, data):\n        formatted_data = ''\n        for i in range(0, len(data), 2):\n            formatted_data += data[i:i+2] + '-'\n        return formatted_data[:-1]",
    "file_path": "emma.chen/dn_validation_2.py",
    "start_line": 25,
    "end_line": 42,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        pass",
    "file_path": "emma.chen/dn_validation_2.py",
    "start_line": 9,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "validate_email",
    "content": "import re\n\n    \n    def validate_email(self, email):\n        pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n        if re.match(pattern, email):\n            return True\n        else:\n            return False",
    "file_path": "emma.chen/dn_validation_2.py",
    "start_line": 11,
    "end_line": 17,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "validate_phone_number",
    "content": "import re\n\n        \n    def validate_phone_number(self, phone_number):\n        pattern = r'^\\d{3}-\\d{3}-\\d{4}$'\n        if re.match(pattern, phone_number):\n            return True\n        else:\n            return False",
    "file_path": "emma.chen/dn_validation_2.py",
    "start_line": 18,
    "end_line": 24,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        pass",
    "file_path": "emma.chen/dn_validation_2.py",
    "start_line": 28,
    "end_line": 29,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "clean_data",
    "content": "    \n    def clean_data(self, data):\n        cleaned_data = ''\n        for char in data:\n            if char.isalnum():\n                cleaned_data += char\n        return cleaned_data",
    "file_path": "emma.chen/dn_validation_2.py",
    "start_line": 30,
    "end_line": 36,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "format_data",
    "content": "\n    def format_data(self, data):\n        formatted_data = ''\n        for i in range(0, len(data), 2):\n            formatted_data += data[i:i+2] + '-'\n        return formatted_data[:-1]",
    "file_path": "emma.chen/dn_validation_2.py",
    "start_line": 37,
    "end_line": 42,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "DN_MockingDataGenerator",
    "content": "import random\n\n\n# Mocking을 통해 랜덤한 데이터를 생성하는 클래스\nclass DN_MockingDataGenerator:\n    def __init__(self):\n        self.data = []\n\n    def dn_generate_random_data(self, num):\n        for _ in range(num):\n            self.data.append(random.randint(1, 100))\n    \n    def dn_get_data(self):\n        return self.data",
    "file_path": "emma.chen/dn_mocking_1.py",
    "start_line": 5,
    "end_line": 16,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "DN_MockingDataProcessor",
    "content": "\n# Mocking된 데이터를 처리하는 클래스\nclass DN_MockingDataProcessor:\n    def __init__(self, data):\n        self.data = data\n\n    def dn_process_data(self):\n        total = sum(self.data)\n        average = total / len(self.data)\n        return total, average",
    "file_path": "emma.chen/dn_mocking_1.py",
    "start_line": 17,
    "end_line": 26,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_print_data",
    "content": "\n# Mocking된 데이터를 출력하는 함수\ndef dn_print_data(data):\n    for d in data:\n        print(d)",
    "file_path": "emma.chen/dn_mocking_1.py",
    "start_line": 27,
    "end_line": 31,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.data = []",
    "file_path": "emma.chen/dn_mocking_1.py",
    "start_line": 8,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_random_data",
    "content": "import random\n\n\n    def dn_generate_random_data(self, num):\n        for _ in range(num):\n            self.data.append(random.randint(1, 100))",
    "file_path": "emma.chen/dn_mocking_1.py",
    "start_line": 10,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_data",
    "content": "    \n    def dn_get_data(self):\n        return self.data",
    "file_path": "emma.chen/dn_mocking_1.py",
    "start_line": 14,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, data):\n        self.data = data",
    "file_path": "emma.chen/dn_mocking_1.py",
    "start_line": 20,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_data",
    "content": "\n    def dn_process_data(self):\n        total = sum(self.data)\n        average = total / len(self.data)\n        return total, average",
    "file_path": "emma.chen/dn_mocking_1.py",
    "start_line": 22,
    "end_line": 26,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_email",
    "content": "# QA Engineer: emma.chen\n\ndef dn_check_email(email):\n    # Check if the email is valid\n    pass",
    "file_path": "emma.chen/dn_validation_1.py",
    "start_line": 2,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_phone_number",
    "content": "\ndef dn_check_phone_number(phone_number):\n    # Check if the phone number is valid\n    pass",
    "file_path": "emma.chen/dn_validation_1.py",
    "start_line": 7,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "DNValidator",
    "content": "\nclass DNValidator:\n    \n    def __init__(self):\n        pass\n        \n    def dn_validate_input(self, input_data):\n        # Validate the input data\n        pass\n\n    def dn_validate_output(self, output_data):\n        # Validate the output data\n        pass\n\n    def dn_validate_parameters(self, params):\n        # Validate the parameters\n        pass",
    "file_path": "emma.chen/dn_validation_1.py",
    "start_line": 11,
    "end_line": 27,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    \n    def __init__(self):\n        pass",
    "file_path": "emma.chen/dn_validation_1.py",
    "start_line": 13,
    "end_line": 15,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_input",
    "content": "        \n    def dn_validate_input(self, input_data):\n        # Validate the input data\n        pass",
    "file_path": "emma.chen/dn_validation_1.py",
    "start_line": 16,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_output",
    "content": "\n    def dn_validate_output(self, output_data):\n        # Validate the output data\n        pass",
    "file_path": "emma.chen/dn_validation_1.py",
    "start_line": 20,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_parameters",
    "content": "\n    def dn_validate_parameters(self, params):\n        # Validate the parameters\n        pass",
    "file_path": "emma.chen/dn_validation_1.py",
    "start_line": 24,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "DN_Mocking",
    "content": "import requests\n\n\n# Mocking 클래스\nclass DN_Mocking:\n    \n    def __init__(self, url):\n        self.url = url\n    \n    def dn_send_request(self):\n        response = requests.get(self.url)\n        return response\n    \n    def dn_mock_response(self, status_code, content):\n        class MockResponse:\n            def __init__(self, status_code, content):\n                self.status_code = status_code\n                self.content = content\n\n        response = MockResponse(status_code, content)\n        return response",
    "file_path": "emma.chen/dn_mocking_2.py",
    "start_line": 5,
    "end_line": 23,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_mock_data",
    "content": "    \n# Mocking 함수\ndef dn_mock_data(data):\n    mocked_data = data.upper()\n    return mocked_data",
    "file_path": "emma.chen/dn_mocking_2.py",
    "start_line": 24,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    \n    def __init__(self, url):\n        self.url = url",
    "file_path": "emma.chen/dn_mocking_2.py",
    "start_line": 8,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_send_request",
    "content": "import requests\n\n    \n    def dn_send_request(self):\n        response = requests.get(self.url)\n        return response",
    "file_path": "emma.chen/dn_mocking_2.py",
    "start_line": 11,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_mock_response",
    "content": "    \n    def dn_mock_response(self, status_code, content):\n        class MockResponse:\n            def __init__(self, status_code, content):\n                self.status_code = status_code\n                self.content = content\n\n        response = MockResponse(status_code, content)\n        return response",
    "file_path": "emma.chen/dn_mocking_2.py",
    "start_line": 15,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "MockResponse",
    "content": "        class MockResponse:\n            def __init__(self, status_code, content):\n                self.status_code = status_code\n                self.content = content",
    "file_path": "emma.chen/dn_mocking_2.py",
    "start_line": 17,
    "end_line": 20,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "            def __init__(self, status_code, content):\n                self.status_code = status_code\n                self.content = content",
    "file_path": "emma.chen/dn_mocking_2.py",
    "start_line": 18,
    "end_line": 20,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_email",
    "content": "# Validation related functions and classes for Danal's codebase\n\n# Helper function to validate email addresses\ndef dn_validate_email(email):\n    if \"@\" in email:\n        return True\n    else:\n        return False",
    "file_path": "emma.chen/dn_validation_5.py",
    "start_line": 2,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "DNUserValidator",
    "content": "\n# Class for validating user input\nclass DNUserValidator:\n    def __init__(self, username):\n        self.username = username\n\n    def validate_username(self):\n        if len(self.username) >= 5:\n            return True\n        else:\n            return False",
    "file_path": "emma.chen/dn_validation_5.py",
    "start_line": 10,
    "end_line": 20,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_phone_number",
    "content": "\n# Function to validate phone numbers\ndef dn_validate_phone_number(phone_number):\n    if len(phone_number) == 10 and phone_number.isdigit():\n        return True\n    else:\n        return False",
    "file_path": "emma.chen/dn_validation_5.py",
    "start_line": 21,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "DNPasswordValidator",
    "content": "\n# Class for validating passwords\nclass DNPasswordValidator:\n    def __init__(self, password):\n        self.password = password\n\n    def validate_password(self):\n        if len(self.password) >= 8:\n            return True\n        else:\n            return False",
    "file_path": "emma.chen/dn_validation_5.py",
    "start_line": 28,
    "end_line": 38,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, username):\n        self.username = username",
    "file_path": "emma.chen/dn_validation_5.py",
    "start_line": 13,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "validate_username",
    "content": "\n    def validate_username(self):\n        if len(self.username) >= 5:\n            return True\n        else:\n            return False",
    "file_path": "emma.chen/dn_validation_5.py",
    "start_line": 15,
    "end_line": 20,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, password):\n        self.password = password",
    "file_path": "emma.chen/dn_validation_5.py",
    "start_line": 31,
    "end_line": 32,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "validate_password",
    "content": "\n    def validate_password(self):\n        if len(self.password) >= 8:\n            return True\n        else:\n            return False",
    "file_path": "emma.chen/dn_validation_5.py",
    "start_line": 33,
    "end_line": 38,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_mock_response",
    "content": "import requests\nimport json\n\n\ndef dn_generate_mock_response():\n    mock_data = {\n        \"id\": 1,\n        \"name\": \"John Doe\",\n        \"email\": \"john.doe@example.com\"\n    }\n    return json.dumps(mock_data)",
    "file_path": "emma.chen/dn_mocking_3.py",
    "start_line": 6,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "DNMocking",
    "content": "import requests\nimport json\n\n\nclass DNMocking:\n    def __init__(self, url):\n        self.url = url\n\n    def dn_get_data(self):\n        response = requests.get(self.url)\n        if response.status_code == 200:\n            return response.json()\n        else:\n            return None\n\n    def dn_post_data(self, data):\n        response = requests.post(self.url, json=data)\n        return response.status_code",
    "file_path": "emma.chen/dn_mocking_3.py",
    "start_line": 14,
    "end_line": 28,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_mock_api_call",
    "content": "import requests\nimport json\n\n\ndef dn_mock_api_call(url):\n    mock_response = dn_generate_mock_response()\n    \n    class MockResponse:\n        def json(self):\n            return json.loads(mock_response)\n    \n    def mock_get(*args, **kwargs):\n        return MockResponse()\n    \n    def mock_post(*args, **kwargs):\n        class MockResponse:\n            def status_code(self):\n                return 201\n        \n        return MockResponse()\n    \n    if url == \"https://example.com/get\":\n        requests.get = mock_get\n    elif url == \"https://example.com/post\":\n        requests.post = mock_post",
    "file_path": "emma.chen/dn_mocking_3.py",
    "start_line": 29,
    "end_line": 50,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, url):\n        self.url = url",
    "file_path": "emma.chen/dn_mocking_3.py",
    "start_line": 16,
    "end_line": 17,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_data",
    "content": "import requests\nimport json\n\n\n    def dn_get_data(self):\n        response = requests.get(self.url)\n        if response.status_code == 200:\n            return response.json()\n        else:\n            return None",
    "file_path": "emma.chen/dn_mocking_3.py",
    "start_line": 18,
    "end_line": 24,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_post_data",
    "content": "import requests\nimport json\n\n\n    def dn_post_data(self, data):\n        response = requests.post(self.url, json=data)\n        return response.status_code",
    "file_path": "emma.chen/dn_mocking_3.py",
    "start_line": 25,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "MockResponse",
    "content": "import requests\nimport json\n\n    \n    class MockResponse:\n        def json(self):\n            return json.loads(mock_response)",
    "file_path": "emma.chen/dn_mocking_3.py",
    "start_line": 32,
    "end_line": 35,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "mock_get",
    "content": "    \n    def mock_get(*args, **kwargs):\n        return MockResponse()",
    "file_path": "emma.chen/dn_mocking_3.py",
    "start_line": 36,
    "end_line": 38,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "mock_post",
    "content": "    \n    def mock_post(*args, **kwargs):\n        class MockResponse:\n            def status_code(self):\n                return 201\n        \n        return MockResponse()",
    "file_path": "emma.chen/dn_mocking_3.py",
    "start_line": 39,
    "end_line": 45,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "json",
    "content": "import requests\nimport json\n\n        def json(self):\n            return json.loads(mock_response)",
    "file_path": "emma.chen/dn_mocking_3.py",
    "start_line": 34,
    "end_line": 35,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "MockResponse",
    "content": "        class MockResponse:\n            def status_code(self):\n                return 201",
    "file_path": "emma.chen/dn_mocking_3.py",
    "start_line": 41,
    "end_line": 43,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "status_code",
    "content": "            def status_code(self):\n                return 201",
    "file_path": "emma.chen/dn_mocking_3.py",
    "start_line": 42,
    "end_line": 43,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "DNValidation",
    "content": "# Author: emma.chen\n\nclass DNValidation:\n    def __init__(self):\n        self.validations = []\n\n    def add_validation(self, validation_func):\n        self.validations.append(validation_func)\n\n    def validate(self, data):\n        for validation_func in self.validations:\n            if not validation_func(data):\n                return False\n        return True",
    "file_path": "emma.chen/dn_validation_4.py",
    "start_line": 2,
    "end_line": 15,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_integer",
    "content": "\ndef dn_check_integer(data):\n    return isinstance(data, int)",
    "file_path": "emma.chen/dn_validation_4.py",
    "start_line": 16,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_string",
    "content": "\ndef dn_check_string(data):\n    return isinstance(data, str)",
    "file_path": "emma.chen/dn_validation_4.py",
    "start_line": 19,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_positive",
    "content": "\ndef dn_check_positive(data):\n    return data > 0",
    "file_path": "emma.chen/dn_validation_4.py",
    "start_line": 22,
    "end_line": 24,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_range",
    "content": "\ndef dn_check_range(data):\n    return 1 <= data <= 100",
    "file_path": "emma.chen/dn_validation_4.py",
    "start_line": 25,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.validations = []",
    "file_path": "emma.chen/dn_validation_4.py",
    "start_line": 5,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "add_validation",
    "content": "\n    def add_validation(self, validation_func):\n        self.validations.append(validation_func)",
    "file_path": "emma.chen/dn_validation_4.py",
    "start_line": 7,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "validate",
    "content": "\n    def validate(self, data):\n        for validation_func in self.validations:\n            if not validation_func(data):\n                return False\n        return True",
    "file_path": "emma.chen/dn_validation_4.py",
    "start_line": 10,
    "end_line": 15,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_add_numbers",
    "content": "\n# Function to add two numbers\ndef dn_add_numbers(num1, num2):\n    return num1 + num2",
    "file_path": "emma.chen/dn_testing_5.py",
    "start_line": 6,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_multiply_numbers",
    "content": "\n# Function to multiply two numbers\ndef dn_multiply_numbers(num1, num2):\n    return num1 * num2",
    "file_path": "emma.chen/dn_testing_5.py",
    "start_line": 10,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "DNMathTest",
    "content": "\n# Class for testing math functions\nclass DNMathTest:\n    def __init__(self):\n        self.num1 = 5\n        self.num2 = 10\n\n    def test_addition(self):\n        result = dn_add_numbers(self.num1, self.num2)\n        assert result == 15\n\n    def test_multiplication(self):\n        result = dn_multiply_numbers(self.num1, self.num2)\n        assert result == 50",
    "file_path": "emma.chen/dn_testing_5.py",
    "start_line": 14,
    "end_line": 27,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_odd_even",
    "content": "\n# Function to check if a number is odd or even\ndef dn_check_odd_even(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
    "file_path": "emma.chen/dn_testing_5.py",
    "start_line": 28,
    "end_line": 34,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "test_odd_even",
    "content": "\n# Function to test odd or even functionality\ndef test_odd_even():\n    assert dn_check_odd_even(4) == \"Even\"\n    assert dn_check_odd_even(5) == \"Odd\"",
    "file_path": "emma.chen/dn_testing_5.py",
    "start_line": 35,
    "end_line": 39,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.num1 = 5\n        self.num2 = 10",
    "file_path": "emma.chen/dn_testing_5.py",
    "start_line": 17,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "test_addition",
    "content": "\n    def test_addition(self):\n        result = dn_add_numbers(self.num1, self.num2)\n        assert result == 15",
    "file_path": "emma.chen/dn_testing_5.py",
    "start_line": 20,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "test_multiplication",
    "content": "\n    def test_multiplication(self):\n        result = dn_multiply_numbers(self.num1, self.num2)\n        assert result == 50",
    "file_path": "emma.chen/dn_testing_5.py",
    "start_line": 24,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_add",
    "content": "'''\n@dn- \nThis file contains testing related functionalities for Danal project\n'''\n\n\n# Helper function to calculate the sum of two numbers\ndef dn_add(a, b):\n    return a + b",
    "file_path": "emma.chen/dn_testing_4.py",
    "start_line": 5,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_multiply",
    "content": "'''\n@dn- \nThis file contains testing related functionalities for Danal project\n'''\n\n\n# Helper function to calculate the product of two numbers\ndef dn_multiply(a, b):\n    return a * b",
    "file_path": "emma.chen/dn_testing_4.py",
    "start_line": 9,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "ClassDef",
    "name": "DN_Testing",
    "content": "'''\n@dn- \nThis file contains testing related functionalities for Danal project\n'''\n\n\n# Class to perform various testing operations\nclass DN_Testing:\n    def __init__(self, name):\n        self.name = name\n    \n    def dn_check_even(self, num):\n        if num % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def dn_check_prime(self, num):\n        if num > 1:\n            for i in range (2, num):\n                if (num % i) == 0:\n                    return False\n            else:\n                return True\n        else:\n            return False",
    "file_path": "emma.chen/dn_testing_4.py",
    "start_line": 13,
    "end_line": 33,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_run_tests",
    "content": "'''\n@dn- \nThis file contains testing related functionalities for Danal project\n'''\n\n\n# Function to test the functionalities\ndef dn_run_tests():\n    test_obj = DN_Testing(\"Emma\")\n    \n    print(\"Testing the addition function:\")\n    result = test_obj.dn_add(5, 10)\n    print(f\"Result of addition: {result}\")\n    \n    print(\"\\nTesting the multiplication function:\")\n    result = test_obj.dn_multiply(3, 6)\n    print(f\"Result of multiplication: {result}\")\n    \n    print(\"\\nTesting even number check:\")\n    result = test_obj.dn_check_even(7)\n    print(f\"Is the number even? {result}\")\n    \n    print(\"\\nTesting prime number check:\")\n    result = test_obj.dn_check_prime(7)\n    print(f\"Is the number prime? {result}\")",
    "file_path": "emma.chen/dn_testing_4.py",
    "start_line": 34,
    "end_line": 53,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "'''\n@dn- \nThis file contains testing related functionalities for Danal project\n'''\n\n    def __init__(self, name):\n        self.name = name",
    "file_path": "emma.chen/dn_testing_4.py",
    "start_line": 16,
    "end_line": 17,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_even",
    "content": "'''\n@dn- \nThis file contains testing related functionalities for Danal project\n'''\n\n    \n    def dn_check_even(self, num):\n        if num % 2 == 0:\n            return True\n        else:\n            return False",
    "file_path": "emma.chen/dn_testing_4.py",
    "start_line": 18,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_prime",
    "content": "'''\n@dn- \nThis file contains testing related functionalities for Danal project\n'''\n\n    \n    def dn_check_prime(self, num):\n        if num > 1:\n            for i in range (2, num):\n                if (num % i) == 0:\n                    return False\n            else:\n                return True\n        else:\n            return False",
    "file_path": "emma.chen/dn_testing_4.py",
    "start_line": 24,
    "end_line": 33,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "emma.chen"
  },
  {
    "type": "FunctionDef",
    "name": "dn_convert_legacy_data",
    "content": "# Written by david.wilson\n\ndef dn_convert_legacy_data(legacy_data):\n    # Convert legacy data format to new format\n    pass",
    "file_path": "david.wilson/dn_legacy_adapter_4.py",
    "start_line": 2,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "ClassDef",
    "name": "DNLegacyAdapter",
    "content": "\nclass DNLegacyAdapter:\n    def __init__(self, legacy_data):\n        self.legacy_data = legacy_data\n\n    def dn_process_legacy_data(self):\n        # Process legacy data\n        pass",
    "file_path": "david.wilson/dn_legacy_adapter_4.py",
    "start_line": 7,
    "end_line": 14,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_format_legacy_output",
    "content": "\ndef dn_format_legacy_output(output):\n    # Format legacy output for display\n    pass",
    "file_path": "david.wilson/dn_legacy_adapter_4.py",
    "start_line": 15,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_extract_legacy_info",
    "content": "\ndef dn_extract_legacy_info(legacy_data):\n    # Extract specific information from legacy data\n    pass",
    "file_path": "david.wilson/dn_legacy_adapter_4.py",
    "start_line": 19,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, legacy_data):\n        self.legacy_data = legacy_data",
    "file_path": "david.wilson/dn_legacy_adapter_4.py",
    "start_line": 9,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_legacy_data",
    "content": "\n    def dn_process_legacy_data(self):\n        # Process legacy data\n        pass",
    "file_path": "david.wilson/dn_legacy_adapter_4.py",
    "start_line": 11,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "ClassDef",
    "name": "DN_CompatibilityChecker",
    "content": "\n# Compatibility를 제공하는 클래스\nclass DN_CompatibilityChecker:\n    def __init__(self, name):\n        self.name = name\n    \n    def dn_check_platform(self):\n        print(f\"Checking platform compatibility for {self.name}\")\n        # 플랫폼 호환성 확인하는 코드 작성\n        \n    def dn_check_browser(self):\n        print(f\"Checking browser compatibility for {self.name}\")\n        # 브라우저 호환성 확인하는 코드 작성\n        \n    def dn_check_database(self):\n        print(f\"Checking database compatibility for {self.name}\")",
    "file_path": "david.wilson/dn_compatibility_5.py",
    "start_line": 5,
    "end_line": 20,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_test_compatibility",
    "content": "        # 데이터베이스 호환성 확인하는 코드 작성\n        \n# Compatibility를 테스트하는 함수\ndef dn_test_compatibility():\n    name = \"Danal System\"\n    checker = DN_CompatibilityChecker(name)\n    \n    checker.dn_check_platform()\n    checker.dn_check_browser()\n    checker.dn_check_database()",
    "file_path": "david.wilson/dn_compatibility_5.py",
    "start_line": 21,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_main",
    "content": "    \n# Main 함수\ndef dn_main():\n    print(\"Starting compatibility check...\")\n    dn_test_compatibility()\n    print(\"Compatibility check complete.\")",
    "file_path": "david.wilson/dn_compatibility_5.py",
    "start_line": 31,
    "end_line": 36,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, name):\n        self.name = name",
    "file_path": "david.wilson/dn_compatibility_5.py",
    "start_line": 8,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_platform",
    "content": "    \n    def dn_check_platform(self):\n        print(f\"Checking platform compatibility for {self.name}\")",
    "file_path": "david.wilson/dn_compatibility_5.py",
    "start_line": 10,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_browser",
    "content": "        # 플랫폼 호환성 확인하는 코드 작성\n        \n    def dn_check_browser(self):\n        print(f\"Checking browser compatibility for {self.name}\")",
    "file_path": "david.wilson/dn_compatibility_5.py",
    "start_line": 13,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_database",
    "content": "        # 브라우저 호환성 확인하는 코드 작성\n        \n    def dn_check_database(self):\n        print(f\"Checking database compatibility for {self.name}\")",
    "file_path": "david.wilson/dn_compatibility_5.py",
    "start_line": 17,
    "end_line": 20,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_python_version",
    "content": "# This Python file contains compatibility functions for the 'Danal' codebase.\n\ndef dn_check_python_version():\n    \"\"\"\n    Function to check if the Python version meets compatibility requirements.\n    \"\"\"\n    pass",
    "file_path": "david.wilson/dn_compatibility_1.py",
    "start_line": 2,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "ClassDef",
    "name": "DNCompatibilityChecker",
    "content": "\nclass DNCompatibilityChecker:\n    \"\"\"\n    Class to perform compatibility checks for the 'Danal' codebase.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Constructor method for DNCompatibilityChecker class.\n        \"\"\"\n        pass\n\n    def dn_check_module_compatibility(self, module_name):\n        \"\"\"\n        Method to check compatibility of a specific module.\n        \"\"\"\n        pass\n\n    def dn_check_dependencies(self):\n        \"\"\"\n        Method to check compatibility of dependencies.\n        \"\"\"\n        pass",
    "file_path": "david.wilson/dn_compatibility_1.py",
    "start_line": 9,
    "end_line": 31,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "\n    def __init__(self):\n        \"\"\"\n        Constructor method for DNCompatibilityChecker class.\n        \"\"\"\n        pass",
    "file_path": "david.wilson/dn_compatibility_1.py",
    "start_line": 14,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_module_compatibility",
    "content": "\n    def dn_check_module_compatibility(self, module_name):\n        \"\"\"\n        Method to check compatibility of a specific module.\n        \"\"\"\n        pass",
    "file_path": "david.wilson/dn_compatibility_1.py",
    "start_line": 20,
    "end_line": 25,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_dependencies",
    "content": "\n    def dn_check_dependencies(self):\n        \"\"\"\n        Method to check compatibility of dependencies.\n        \"\"\"\n        pass",
    "file_path": "david.wilson/dn_compatibility_1.py",
    "start_line": 26,
    "end_line": 31,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_refactor_legacy_code",
    "content": "# Author: david.wilson\n# Description: This module contains functions and classes for refactoring legacy code in the Danal codebase.\n\n# Function to refactor legacy code\ndef dn_refactor_legacy_code(code):\n    # Refactor the code here\n    pass",
    "file_path": "david.wilson/dn_refactoring_2.py",
    "start_line": 2,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "ClassDef",
    "name": "DNLegacyRefactor",
    "content": "\n# Class for refactoring legacy functions\nclass DNLegacyRefactor:\n    def __init__(self):\n        # Initialize the refactoring class\n        pass\n    \n    def dn_extract_functions(self, code):\n        # Extract legacy functions from the code\n        pass\n    \n    def dn_remove_unused_code(self, code):\n        # Remove unused code from the legacy codebase\n        pass",
    "file_path": "david.wilson/dn_refactoring_2.py",
    "start_line": 9,
    "end_line": 22,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_refactor_legacy_variables",
    "content": "\n# Function to refactor legacy variables\ndef dn_refactor_legacy_variables(variables):\n    # Refactor legacy variables here\n    pass",
    "file_path": "david.wilson/dn_refactoring_2.py",
    "start_line": 23,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "main",
    "content": "\n# Main function to refactor legacy system\ndef main():\n    legacy_code = \"\"\"\n    # Legacy code here\n    def legacy_function():\n        print(\"Legacy function\")\n    \"\"\"\n    \n    dn_refactor_legacy_code(legacy_code)\n    \n    dn_legacy_refactor = DNLegacyRefactor()\n    legacy_functions = dn_legacy_refactor.dn_extract_functions(legacy_code)\n    \n    legacy_variables = ['legacy_var1', 'legacy_var2']\n    dn_refactor_legacy_variables(legacy_variables)",
    "file_path": "david.wilson/dn_refactoring_2.py",
    "start_line": 28,
    "end_line": 43,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        # Initialize the refactoring class\n        pass",
    "file_path": "david.wilson/dn_refactoring_2.py",
    "start_line": 12,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_extract_functions",
    "content": "    \n    def dn_extract_functions(self, code):\n        # Extract legacy functions from the code\n        pass",
    "file_path": "david.wilson/dn_refactoring_2.py",
    "start_line": 15,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_remove_unused_code",
    "content": "    \n    def dn_remove_unused_code(self, code):\n        # Remove unused code from the legacy codebase\n        pass",
    "file_path": "david.wilson/dn_refactoring_2.py",
    "start_line": 19,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "ClassDef",
    "name": "DN_LegacyAdapter",
    "content": "# This module contains functions and classes for legacy system integration\n\nclass DN_LegacyAdapter:\n    def __init__(self, legacy_system):\n        self.legacy_system = legacy_system\n\n    def dn_convert_data(self, data):\n        # Convert data to legacy system format\n        pass\n\n    def dn_send_data(self, data):\n        # Send data to legacy system\n        pass",
    "file_path": "david.wilson/dn_legacy_adapter_5.py",
    "start_line": 2,
    "end_line": 14,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_legacy_data",
    "content": "\ndef dn_process_legacy_data(data):\n    # Process data from legacy system\n    pass",
    "file_path": "david.wilson/dn_legacy_adapter_5.py",
    "start_line": 15,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_transform_legacy_data",
    "content": "\ndef dn_transform_legacy_data(data):\n    # Transform data received from legacy system\n    pass",
    "file_path": "david.wilson/dn_legacy_adapter_5.py",
    "start_line": 19,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, legacy_system):\n        self.legacy_system = legacy_system",
    "file_path": "david.wilson/dn_legacy_adapter_5.py",
    "start_line": 5,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_convert_data",
    "content": "\n    def dn_convert_data(self, data):\n        # Convert data to legacy system format\n        pass",
    "file_path": "david.wilson/dn_legacy_adapter_5.py",
    "start_line": 7,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_send_data",
    "content": "\n    def dn_send_data(self, data):\n        # Send data to legacy system\n        pass",
    "file_path": "david.wilson/dn_legacy_adapter_5.py",
    "start_line": 11,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_compatibility",
    "content": "# This Python file contains compatibility-related functions for Danal codebase\n\n# Compatibility checker function\ndef dn_check_compatibility(module_name):\n    print(f\"Checking compatibility for module: {module_name}\")\n    \n    # Add compatibility checks here\n    if module_name == \"module1\":\n        print(\"Compatibility check for module1: passed\")\n    elif module_name == \"module2\":\n        print(\"Compatibility check for module2: passed\")\n    else:\n        print(\"Compatibility check failed\")",
    "file_path": "david.wilson/dn_compatibility_4.py",
    "start_line": 2,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_update_compatibility",
    "content": "\n# Compatibility updater function\ndef dn_update_compatibility(module_name, version):\n    print(f\"Updating compatibility for module: {module_name} to version {version}\")\n    \n    # Add compatibility update logic here\n    print(\"Compatibility update completed\")",
    "file_path": "david.wilson/dn_compatibility_4.py",
    "start_line": 15,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "ClassDef",
    "name": "DNCompatibility",
    "content": "\n# Compatibility class\nclass DNCompatibility:\n    \n    def __init__(self, module_name):\n        self.module_name = module_name\n        self.compatible = True\n    \n    def dn_check_module_compatibility(self):\n        print(f\"Checking compatibility for module: {self.module_name}\")\n        \n        # Add module-specific compatibility checks here\n        if self.module_name == \"module3\":\n            print(\"Compatibility check for module3: passed\")\n        else:\n            print(\"Compatibility check failed\")\n    \n    def dn_update_module_compatibility(self, version):\n        print(f\"Updating compatibility for module: {self.module_name} to version {version}\")\n        \n        # Add module-specific compatibility update logic here\n        print(\"Compatibility update completed\")",
    "file_path": "david.wilson/dn_compatibility_4.py",
    "start_line": 22,
    "end_line": 43,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "main",
    "content": "\n# Main function to demonstrate compatibility functions\ndef main():\n    dn_check_compatibility(\"module1\")\n    \n    comp = DNCompatibility(\"module3\")\n    comp.dn_check_module_compatibility()\n    comp.dn_update_module_compatibility(\"v2.0\")",
    "file_path": "david.wilson/dn_compatibility_4.py",
    "start_line": 44,
    "end_line": 51,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    \n    def __init__(self, module_name):\n        self.module_name = module_name\n        self.compatible = True",
    "file_path": "david.wilson/dn_compatibility_4.py",
    "start_line": 25,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_module_compatibility",
    "content": "    \n    def dn_check_module_compatibility(self):\n        print(f\"Checking compatibility for module: {self.module_name}\")\n        \n        # Add module-specific compatibility checks here\n        if self.module_name == \"module3\":\n            print(\"Compatibility check for module3: passed\")\n        else:\n            print(\"Compatibility check failed\")",
    "file_path": "david.wilson/dn_compatibility_4.py",
    "start_line": 29,
    "end_line": 37,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_update_module_compatibility",
    "content": "    \n    def dn_update_module_compatibility(self, version):\n        print(f\"Updating compatibility for module: {self.module_name} to version {version}\")\n        \n        # Add module-specific compatibility update logic here\n        print(\"Compatibility update completed\")",
    "file_path": "david.wilson/dn_compatibility_4.py",
    "start_line": 38,
    "end_line": 43,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_fetch_legacy_data",
    "content": "import requests\n\nlegacy_api_url = 'http://legacy-api.com'\n\n\n# Function to fetch data from legacy system\ndef dn_fetch_legacy_data(endpoint):\n    response = requests.get(f'{legacy_api_url}/{endpoint}')\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None",
    "file_path": "david.wilson/dn_legacy_adapter_2.py",
    "start_line": 8,
    "end_line": 15,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 1
    },
    "persona": "david.wilson"
  },
  {
    "type": "ClassDef",
    "name": "DNLegacyDataManipulator",
    "content": "\n# Class to manipulate legacy data\nclass DNLegacyDataManipulator:\n    def __init__(self, data):\n        self.data = data\n    \n    def dn_transform_data(self):\n        transformed_data = {}\n        for key, value in self.data.items():\n            transformed_data[key.upper()] = value\n        return transformed_data",
    "file_path": "david.wilson/dn_legacy_adapter_2.py",
    "start_line": 16,
    "end_line": 26,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_send_data_to_legacy",
    "content": "import requests\n\nlegacy_api_url = 'http://legacy-api.com'\n\n\n# Function to send data to legacy system\ndef dn_send_data_to_legacy(data):\n    response = requests.post(legacy_api_url, json=data)\n    if response.status_code == 200:\n        return True\n    else:\n        return False",
    "file_path": "david.wilson/dn_legacy_adapter_2.py",
    "start_line": 27,
    "end_line": 34,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 1
    },
    "persona": "david.wilson"
  },
  {
    "type": "ClassDef",
    "name": "DNLegacyAdapter",
    "content": "\n# Class to handle legacy system interactions\nclass DNLegacyAdapter:\n    def __init__(self):\n        pass\n    \n    def dn_process_legacy_data(self, endpoint):\n        legacy_data = dn_fetch_legacy_data(endpoint)\n        if legacy_data:\n            manipulator = DNLegacyDataManipulator(legacy_data)\n            transformed_data = manipulator.dn_transform_data()\n            if dn_send_data_to_legacy(transformed_data):\n                return \"Data processed and sent to legacy system successfully\"\n            else:\n                return \"Failed to send data to legacy system\"\n        else:\n            return \"Failed to fetch data from legacy system\"",
    "file_path": "david.wilson/dn_legacy_adapter_2.py",
    "start_line": 35,
    "end_line": 51,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, data):\n        self.data = data",
    "file_path": "david.wilson/dn_legacy_adapter_2.py",
    "start_line": 19,
    "end_line": 20,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_transform_data",
    "content": "    \n    def dn_transform_data(self):\n        transformed_data = {}\n        for key, value in self.data.items():\n            transformed_data[key.upper()] = value\n        return transformed_data",
    "file_path": "david.wilson/dn_legacy_adapter_2.py",
    "start_line": 21,
    "end_line": 26,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        pass",
    "file_path": "david.wilson/dn_legacy_adapter_2.py",
    "start_line": 38,
    "end_line": 39,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_legacy_data",
    "content": "    \n    def dn_process_legacy_data(self, endpoint):\n        legacy_data = dn_fetch_legacy_data(endpoint)\n        if legacy_data:\n            manipulator = DNLegacyDataManipulator(legacy_data)\n            transformed_data = manipulator.dn_transform_data()\n            if dn_send_data_to_legacy(transformed_data):\n                return \"Data processed and sent to legacy system successfully\"\n            else:\n                return \"Failed to send data to legacy system\"\n        else:\n            return \"Failed to fetch data from legacy system\"",
    "file_path": "david.wilson/dn_legacy_adapter_2.py",
    "start_line": 40,
    "end_line": 51,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_find_duplicates",
    "content": "import os\nimport sys\n\n\n# 리팩토링 함수 1\ndef dn_find_duplicates(file_path):\n    \"\"\"\n    파일 경로에서 중복 파일을 찾아 반환하는 함수\n    :param file_path: 중복을 찾을 파일 경로\n    :return: 중복된 파일 리스트\n    \"\"\"\n    files = os.listdir(file_path)\n    file_dict = {}\n    duplicates = []\n\n    for file in files:\n        file_name = os.path.basename(file)\n        if file_name in file_dict:\n            duplicates.append(file_name)\n        else:\n            file_dict[file_name] = file\n\n    return duplicates",
    "file_path": "david.wilson/dn_refactoring_1.py",
    "start_line": 6,
    "end_line": 25,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "ClassDef",
    "name": "DNCodeRefactor",
    "content": "import os\nimport sys\n\n\n# 리팩토링 클래스 1\nclass DNCodeRefactor:\n    def __init__(self, codebase_path):\n        self.codebase_path = codebase_path\n\n    def dn_get_file_count(self):\n        \"\"\"\n        코드베이스 내 파일 수를 반환하는 메서드\n        :return: 파일 수\n        \"\"\"\n        files = os.listdir(self.codebase_path)\n        return len(files)",
    "file_path": "david.wilson/dn_refactoring_1.py",
    "start_line": 26,
    "end_line": 38,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_remove_empty_lines",
    "content": "\n# 리팩토링 함수 2\ndef dn_remove_empty_lines(file_path):\n    \"\"\"\n    파일에서 빈 줄을 제거하는 함수\n    :param file_path: 빈 줄을 제거할 파일 경로\n    :return: None\n    \"\"\"\n    with open(file_path, 'r') as file:\n        lines = file.readlines()\n\n    with open(file_path, 'w') as file:\n        for line in lines:\n            if line.strip():\n                file.write(line)",
    "file_path": "david.wilson/dn_refactoring_1.py",
    "start_line": 39,
    "end_line": 53,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "ClassDef",
    "name": "DNRefactoringTool",
    "content": "\n# 리팩토링 클래스 2\nclass DNRefactoringTool:\n    def __init__(self, file_path):\n        self.file_path = file_path\n\n    def dn_replace_text(self, old_text, new_text):\n        \"\"\"\n        파일 내 특정 문자열을 다른 문자열로 대체하는 메서드\n        :param old_text: 대체할 문자열\n        :param new_text: 새로운 문자열\n        :return: None\n        \"\"\"\n        with open(self.file_path, 'r') as file:\n            file_data = file.read()\n\n        file_data = file_data.replace(old_text, new_text)\n\n        with open(self.file_path, 'w') as file:\n            file.write(file_data)",
    "file_path": "david.wilson/dn_refactoring_1.py",
    "start_line": 54,
    "end_line": 73,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_count_lines_of_code",
    "content": "import os\nimport sys\n\n\n# 리팩토링 함수 3\ndef dn_count_lines_of_code(file_path):\n    \"\"\"\n    코드베이스 내 전체 코드 라인 수를 세는 함수\n    :param file_path: 코드베이스 경로\n    :return: 코드 라인 수\n    \"\"\"\n    total_lines = 0\n\n    for path, _, files in os.walk(file_path):\n        for file in files:\n            if file.endswith('.py'):\n                with open(os.path.join(path, file), 'r') as f:\n                    total_lines += len(f.readlines())\n\n    return total_lines",
    "file_path": "david.wilson/dn_refactoring_1.py",
    "start_line": 74,
    "end_line": 90,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, codebase_path):\n        self.codebase_path = codebase_path",
    "file_path": "david.wilson/dn_refactoring_1.py",
    "start_line": 29,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_file_count",
    "content": "import os\nimport sys\n\n\n    def dn_get_file_count(self):\n        \"\"\"\n        코드베이스 내 파일 수를 반환하는 메서드\n        :return: 파일 수\n        \"\"\"\n        files = os.listdir(self.codebase_path)\n        return len(files)",
    "file_path": "david.wilson/dn_refactoring_1.py",
    "start_line": 31,
    "end_line": 38,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, file_path):\n        self.file_path = file_path",
    "file_path": "david.wilson/dn_refactoring_1.py",
    "start_line": 57,
    "end_line": 58,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_replace_text",
    "content": "\n    def dn_replace_text(self, old_text, new_text):\n        \"\"\"\n        파일 내 특정 문자열을 다른 문자열로 대체하는 메서드\n        :param old_text: 대체할 문자열\n        :param new_text: 새로운 문자열\n        :return: None\n        \"\"\"\n        with open(self.file_path, 'r') as file:\n            file_data = file.read()\n\n        file_data = file_data.replace(old_text, new_text)\n\n        with open(self.file_path, 'w') as file:\n            file.write(file_data)",
    "file_path": "david.wilson/dn_refactoring_1.py",
    "start_line": 59,
    "end_line": 73,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_read_file",
    "content": "\n# Helper Functions\n\ndef dn_read_file(file_path):\n    \"\"\"\n    Read the content of a file and return it as a string.\n    \n    Args:\n    file_path (str): The path to the file to be read.\n    \n    Returns:\n    str: The content of the file.\n    \"\"\"\n    with open(file_path, 'r') as file:\n        content = file.read()\n    return content",
    "file_path": "david.wilson/dn_refactoring_4.py",
    "start_line": 15,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_write_file",
    "content": "\ndef dn_write_file(file_path, content):\n    \"\"\"\n    Write content to a file.\n    \n    Args:\n    file_path (str): The path to the file to write to.\n    content (str): The content to be written to the file.\n    \"\"\"\n    with open(file_path, 'w') as file:\n        file.write(content)",
    "file_path": "david.wilson/dn_refactoring_4.py",
    "start_line": 31,
    "end_line": 41,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "ClassDef",
    "name": "DNRefactor",
    "content": "import os\nimport sys\nimport re\n\nDN_REF_STRING = \"refactor\"\nDN_REF_PREFIX = \"dn_\"\nDN_MAX_REFACTOR_THRESHOLD = 100\n\n\n# Main Refactoring Class\n\nclass DNRefactor:\n    def __init__(self, file_path):\n        self.file_path = file_path\n        self.file_content = dn_read_file(file_path)\n    \n    def dn_count_refactor_instances(self):\n        \"\"\"\n        Count the number of instances of the refactoring string in the file.\n        \n        Returns:\n        int: The number of instances of the refactoring string.\n        \"\"\"\n        ref_count = self.file_content.count(DN_REF_STRING)\n        return ref_count\n    \n    def dn_refactor_code(self):\n        \"\"\"\n        Refactor the code by adding the refactoring prefix to variable names.\n        \"\"\"\n        new_content = re.sub(r'\\b' + DN_REF_STRING + r'\\b', DN_REF_PREFIX + DN_REF_STRING, self.file_content)\n        dn_write_file(self.file_path, new_content)\n        print(\"Refactoring complete.\")\n        \n    def dn_check_refactor_threshold(self):\n        \"\"\"\n        Check if the refactoring threshold has been exceeded.\n        \n        Returns:\n        bool: True if the threshold is exceeded, False otherwise.\n        \"\"\"\n        ref_count = self.dn_count_refactor_instances()\n        if ref_count > DN_MAX_REFACTOR_THRESHOLD:\n            return True\n        else:\n            return False",
    "file_path": "david.wilson/dn_refactoring_4.py",
    "start_line": 42,
    "end_line": 79,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 3,
      "globals_count": 3
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, file_path):\n        self.file_path = file_path\n        self.file_content = dn_read_file(file_path)",
    "file_path": "david.wilson/dn_refactoring_4.py",
    "start_line": 46,
    "end_line": 48,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_count_refactor_instances",
    "content": "DN_REF_STRING = \"refactor\"\nDN_REF_PREFIX = \"dn_\"\nDN_MAX_REFACTOR_THRESHOLD = 100\n\n    \n    def dn_count_refactor_instances(self):\n        \"\"\"\n        Count the number of instances of the refactoring string in the file.\n        \n        Returns:\n        int: The number of instances of the refactoring string.\n        \"\"\"\n        ref_count = self.file_content.count(DN_REF_STRING)\n        return ref_count",
    "file_path": "david.wilson/dn_refactoring_4.py",
    "start_line": 49,
    "end_line": 58,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 3
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_refactor_code",
    "content": "import os\nimport sys\nimport re\n\nDN_REF_STRING = \"refactor\"\nDN_REF_PREFIX = \"dn_\"\nDN_MAX_REFACTOR_THRESHOLD = 100\n\n    \n    def dn_refactor_code(self):\n        \"\"\"\n        Refactor the code by adding the refactoring prefix to variable names.\n        \"\"\"\n        new_content = re.sub(r'\\b' + DN_REF_STRING + r'\\b', DN_REF_PREFIX + DN_REF_STRING, self.file_content)\n        dn_write_file(self.file_path, new_content)\n        print(\"Refactoring complete.\")",
    "file_path": "david.wilson/dn_refactoring_4.py",
    "start_line": 59,
    "end_line": 66,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 3,
      "globals_count": 3
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_refactor_threshold",
    "content": "DN_REF_STRING = \"refactor\"\nDN_REF_PREFIX = \"dn_\"\nDN_MAX_REFACTOR_THRESHOLD = 100\n\n        \n    def dn_check_refactor_threshold(self):\n        \"\"\"\n        Check if the refactoring threshold has been exceeded.\n        \n        Returns:\n        bool: True if the threshold is exceeded, False otherwise.\n        \"\"\"\n        ref_count = self.dn_count_refactor_instances()\n        if ref_count > DN_MAX_REFACTOR_THRESHOLD:\n            return True\n        else:\n            return False",
    "file_path": "david.wilson/dn_refactoring_4.py",
    "start_line": 67,
    "end_line": 79,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 3
    },
    "persona": "david.wilson"
  },
  {
    "type": "ClassDef",
    "name": "DNLegacyAdapter",
    "content": "'''\n@dn- Legacy Adapter Module for Danal Company Codebase\nThis module contains functionality to adapt legacy systems for Danal's codebase.\n\nAuthor: david.wilson\nDate: September 2021\n'''\n\n\n# Legacy Adapter Class\nclass DNLegacyAdapter:\n    \n    def __init__(self):\n        pass\n    \n    def dn_convert_legacy_data(self, legacy_data):\n        converted_data = {}\n        # Convert legacy data to new format\n        return converted_data\n    \n    def dn_process_legacy_request(self, legacy_request):\n        processed_request = {}\n        # Process legacy request\n        return processed_request",
    "file_path": "david.wilson/dn_legacy_adapter_3.py",
    "start_line": 8,
    "end_line": 23,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_legacy_helper_function1",
    "content": "'''\n@dn- Legacy Adapter Module for Danal Company Codebase\nThis module contains functionality to adapt legacy systems for Danal's codebase.\n\nAuthor: david.wilson\nDate: September 2021\n'''\n\n\n# Legacy Helper Functions\ndef dn_legacy_helper_function1(arg1, arg2):\n    result = arg1 + arg2\n    return result",
    "file_path": "david.wilson/dn_legacy_adapter_3.py",
    "start_line": 24,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_legacy_helper_function2",
    "content": "'''\n@dn- Legacy Adapter Module for Danal Company Codebase\nThis module contains functionality to adapt legacy systems for Danal's codebase.\n\nAuthor: david.wilson\nDate: September 2021\n'''\n\n\ndef dn_legacy_helper_function2(data):\n    processed_data = []\n    # Process legacy data\n    return processed_data",
    "file_path": "david.wilson/dn_legacy_adapter_3.py",
    "start_line": 29,
    "end_line": 33,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_main",
    "content": "'''\n@dn- Legacy Adapter Module for Danal Company Codebase\nThis module contains functionality to adapt legacy systems for Danal's codebase.\n\nAuthor: david.wilson\nDate: September 2021\n'''\n\n\n# Main function to demonstrate legacy adapter functionality\ndef dn_main():\n    legacy_adapter = DNLegacyAdapter()\n    legacy_data = {'legacy_key1': 'value1', 'legacy_key2': 'value2'}\n    legacy_request = {'legacy_param1': 'param1', 'legacy_param2': 'param2'}\n    \n    converted_data = legacy_adapter.dn_convert_legacy_data(legacy_data)\n    processed_request = legacy_adapter.dn_process_legacy_request(legacy_request)\n    \n    print(\"Converted Data:\", converted_data)\n    print(\"Processed Request:\", processed_request)\n    \n    result = dn_legacy_helper_function1(10, 20)\n    print(\"Helper Function 1 Result:\", result)\n    \n    legacy_data_list = [1, 2, 3, 4, 5]\n    processed_data = dn_legacy_helper_function2(legacy_data_list)\n    print(\"Helper Function 2 Processed Data:\", processed_data)",
    "file_path": "david.wilson/dn_legacy_adapter_3.py",
    "start_line": 34,
    "end_line": 52,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "'''\n@dn- Legacy Adapter Module for Danal Company Codebase\nThis module contains functionality to adapt legacy systems for Danal's codebase.\n\nAuthor: david.wilson\nDate: September 2021\n'''\n\n    \n    def __init__(self):\n        pass",
    "file_path": "david.wilson/dn_legacy_adapter_3.py",
    "start_line": 11,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_convert_legacy_data",
    "content": "'''\n@dn- Legacy Adapter Module for Danal Company Codebase\nThis module contains functionality to adapt legacy systems for Danal's codebase.\n\nAuthor: david.wilson\nDate: September 2021\n'''\n\n    \n    def dn_convert_legacy_data(self, legacy_data):\n        converted_data = {}\n        # Convert legacy data to new format\n        return converted_data",
    "file_path": "david.wilson/dn_legacy_adapter_3.py",
    "start_line": 14,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_legacy_request",
    "content": "'''\n@dn- Legacy Adapter Module for Danal Company Codebase\nThis module contains functionality to adapt legacy systems for Danal's codebase.\n\nAuthor: david.wilson\nDate: September 2021\n'''\n\n    \n    def dn_process_legacy_request(self, legacy_request):\n        processed_request = {}\n        # Process legacy request\n        return processed_request",
    "file_path": "david.wilson/dn_legacy_adapter_3.py",
    "start_line": 19,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "ClassDef",
    "name": "DN_DBConnector",
    "content": "# Legacy 시스템 전문가 David Wilson 작성\n\n# 데이터베이스 연결을 수행하는 클래스\nclass DN_DBConnector:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n\n    def connect(self):\n        # 데이터베이스 연결 로직\n        pass\n\n    def disconnect(self):\n        # 데이터베이스 연결 해제 로직\n        pass",
    "file_path": "david.wilson/dn_compatibility_2.py",
    "start_line": 2,
    "end_line": 16,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "ClassDef",
    "name": "DN_FileSystemManager",
    "content": "\n# 파일 시스템을 관리하는 클래스\nclass DN_FileSystemManager:\n    def __init__(self, path):\n        self.path = path\n\n    def read_file(self, filename):\n        # 파일 읽기 로직\n        pass\n\n    def write_file(self, filename, data):\n        # 파일 쓰기 로직\n        pass",
    "file_path": "david.wilson/dn_compatibility_2.py",
    "start_line": 17,
    "end_line": 29,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_compatibility",
    "content": "\n# Compatibility 기능 관련 함수\ndef dn_check_compatibility(device1, device2):\n    # 두 장치 간의 호환성 체크 로직\n    pass",
    "file_path": "david.wilson/dn_compatibility_2.py",
    "start_line": 30,
    "end_line": 34,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_update_compatibility_table",
    "content": "\ndef dn_update_compatibility_table(device):\n    # 호환성 테이블 업데이트 로직\n    pass",
    "file_path": "david.wilson/dn_compatibility_2.py",
    "start_line": 35,
    "end_line": 38,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_compatible_devices",
    "content": "\ndef dn_get_compatible_devices(device):\n    # 주어진 장치와 호환되는 장치 목록 반환 로직\n    pass",
    "file_path": "david.wilson/dn_compatibility_2.py",
    "start_line": 39,
    "end_line": 42,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, username, password):\n        self.username = username\n        self.password = password",
    "file_path": "david.wilson/dn_compatibility_2.py",
    "start_line": 6,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "connect",
    "content": "\n    def connect(self):\n        # 데이터베이스 연결 로직\n        pass",
    "file_path": "david.wilson/dn_compatibility_2.py",
    "start_line": 9,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "disconnect",
    "content": "\n    def disconnect(self):\n        # 데이터베이스 연결 해제 로직\n        pass",
    "file_path": "david.wilson/dn_compatibility_2.py",
    "start_line": 13,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, path):\n        self.path = path",
    "file_path": "david.wilson/dn_compatibility_2.py",
    "start_line": 20,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "read_file",
    "content": "\n    def read_file(self, filename):\n        # 파일 읽기 로직\n        pass",
    "file_path": "david.wilson/dn_compatibility_2.py",
    "start_line": 22,
    "end_line": 25,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "FunctionDef",
    "name": "write_file",
    "content": "\n    def write_file(self, filename, data):\n        # 파일 쓰기 로직\n        pass",
    "file_path": "david.wilson/dn_compatibility_2.py",
    "start_line": 26,
    "end_line": 29,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "david.wilson"
  },
  {
    "type": "ClassDef",
    "name": "DN_User",
    "content": "\n# 사용자의 정보를 저장하고 관리하는 클래스\nclass DN_User:\n    def __init__(self, username, email):\n        self.username = username\n        self.email = email\n        self.is_active = True",
    "file_path": "jaewon.lee/dn_user_1.py",
    "start_line": 2,
    "end_line": 8,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "ClassDef",
    "name": "DN_UserManager",
    "content": "\n# 사용자 목록을 관리하는 클래스\nclass DN_UserManager:\n    def __init__(self):\n        self.users = []\n\n    # 새로운 사용자 추가\n    def dn_add_user(self, username, email):\n        user = DN_User(username, email)\n        self.users.append(user)\n\n    # 사용자 정보 업데이트\n    def dn_update_user(self, username, new_email):\n        for user in self.users:\n            if user.username == username:\n                user.email = new_email\n\n    # 사용자 활성화/비활성화\n    def dn_toggle_active(self, username):\n        for user in self.users:\n            if user.username == username:\n                user.is_active = not user.is_active",
    "file_path": "jaewon.lee/dn_user_1.py",
    "start_line": 9,
    "end_line": 30,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, username, email):\n        self.username = username\n        self.email = email\n        self.is_active = True",
    "file_path": "jaewon.lee/dn_user_1.py",
    "start_line": 5,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.users = []",
    "file_path": "jaewon.lee/dn_user_1.py",
    "start_line": 12,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_add_user",
    "content": "\n    # 새로운 사용자 추가\n    def dn_add_user(self, username, email):\n        user = DN_User(username, email)\n        self.users.append(user)",
    "file_path": "jaewon.lee/dn_user_1.py",
    "start_line": 14,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_update_user",
    "content": "\n    # 사용자 정보 업데이트\n    def dn_update_user(self, username, new_email):\n        for user in self.users:\n            if user.username == username:\n                user.email = new_email",
    "file_path": "jaewon.lee/dn_user_1.py",
    "start_line": 19,
    "end_line": 24,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_toggle_active",
    "content": "\n    # 사용자 활성화/비활성화\n    def dn_toggle_active(self, username):\n        for user in self.users:\n            if user.username == username:\n                user.is_active = not user.is_active",
    "file_path": "jaewon.lee/dn_user_1.py",
    "start_line": 25,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "ClassDef",
    "name": "DN_NotificationService",
    "content": "# @dn- Author: jaewon.lee\n# @dn- Date: 2022-01-01\n\nclass DN_NotificationService:\n    def __init__(self):\n        self.notifications = []\n\n    def dn_add_notification(self, message):\n        self.notifications.append(message)\n\n    def dn_get_notifications(self):\n        return self.notifications",
    "file_path": "jaewon.lee/dn_notification_3.py",
    "start_line": 2,
    "end_line": 13,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_send_notification",
    "content": "\ndef dn_send_notification(user, message):\n    print(f\"Sending notification to {user}: {message}\")",
    "file_path": "jaewon.lee/dn_notification_3.py",
    "start_line": 14,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_format_notification",
    "content": "\ndef dn_format_notification(message):\n    return f\"Notification: {message}\"",
    "file_path": "jaewon.lee/dn_notification_3.py",
    "start_line": 17,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.notifications = []",
    "file_path": "jaewon.lee/dn_notification_3.py",
    "start_line": 6,
    "end_line": 7,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_add_notification",
    "content": "\n    def dn_add_notification(self, message):\n        self.notifications.append(message)",
    "file_path": "jaewon.lee/dn_notification_3.py",
    "start_line": 8,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_notifications",
    "content": "\n    def dn_get_notifications(self):\n        return self.notifications",
    "file_path": "jaewon.lee/dn_notification_3.py",
    "start_line": 11,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "ClassDef",
    "name": "DN_NotificationSender",
    "content": "import requests\nimport json\n\n\n# Notification을 전송하는 클래스\nclass DN_NotificationSender:\n    def __init__(self, api_key):\n        self.api_key = api_key\n\n    def send_notification(self, message, recipient):\n        payload = {\n            'message': message,\n            'recipient': recipient\n        }\n\n        headers = { 'Authorization': 'Bearer ' + self.api_key }\n\n        response = requests.post('https://api.notification-service.com/send', data=json.dumps(payload), headers=headers)\n\n        if response.status_code == 200:\n            return True\n        else:\n            return False",
    "file_path": "jaewon.lee/dn_notification_2.py",
    "start_line": 6,
    "end_line": 25,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "ClassDef",
    "name": "DN_NotificationReceiver",
    "content": "\n# Notification을 받아 처리하는 클래스\nclass DN_NotificationReceiver:\n    def __init__(self):\n        self.notifications = []\n\n    def receive_notification(self, notification):\n        self.notifications.append(notification)\n\n    def process_notifications(self):\n        for notification in self.notifications:\n            print(\"Received notification: \" + notification)",
    "file_path": "jaewon.lee/dn_notification_2.py",
    "start_line": 26,
    "end_line": 37,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_main",
    "content": "\n# Main 함수\ndef dn_main():\n    api_key = 'your_api_key'\n    \n    # Notification Sender 사용 예시\n    sender = DN_NotificationSender(api_key)\n    if sender.send_notification('Hello world!', 'john.doe@example.com'):\n        print(\"Notification sent successfully!\")\n    else:\n        print(\"Failed to send notification.\")\n\n    # Notification Receiver 사용 예시\n    receiver = DN_NotificationReceiver()\n    receiver.receive_notification('New message received')\n    receiver.receive_notification('Meeting reminder')\n    receiver.process_notifications()",
    "file_path": "jaewon.lee/dn_notification_2.py",
    "start_line": 38,
    "end_line": 54,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, api_key):\n        self.api_key = api_key",
    "file_path": "jaewon.lee/dn_notification_2.py",
    "start_line": 9,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "send_notification",
    "content": "import requests\nimport json\n\n\n    def send_notification(self, message, recipient):\n        payload = {\n            'message': message,\n            'recipient': recipient\n        }\n\n        headers = { 'Authorization': 'Bearer ' + self.api_key }\n\n        response = requests.post('https://api.notification-service.com/send', data=json.dumps(payload), headers=headers)\n\n        if response.status_code == 200:\n            return True\n        else:\n            return False",
    "file_path": "jaewon.lee/dn_notification_2.py",
    "start_line": 11,
    "end_line": 25,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.notifications = []",
    "file_path": "jaewon.lee/dn_notification_2.py",
    "start_line": 29,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "receive_notification",
    "content": "\n    def receive_notification(self, notification):\n        self.notifications.append(notification)",
    "file_path": "jaewon.lee/dn_notification_2.py",
    "start_line": 31,
    "end_line": 33,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "process_notifications",
    "content": "\n    def process_notifications(self):\n        for notification in self.notifications:\n            print(\"Received notification: \" + notification)",
    "file_path": "jaewon.lee/dn_notification_2.py",
    "start_line": 34,
    "end_line": 37,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "ClassDef",
    "name": "DN_NotificationManager",
    "content": "# This file contains code for the notification feature in the Danal codebase\n\nclass DN_NotificationManager:\n    def __init__(self):\n        self.notifications = []\n\n    def dn_add_notification(self, message):\n        self.notifications.append(message)\n\n    def dn_display_notifications(self):\n        for notification in self.notifications:\n            print(notification)",
    "file_path": "jaewon.lee/dn_notification_5.py",
    "start_line": 2,
    "end_line": 13,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "ClassDef",
    "name": "DN_Notification",
    "content": "\nclass DN_Notification:\n    def __init__(self, message, recipient):\n        self.message = message\n        self.recipient = recipient\n\n    def dn_send_notification(self):\n        print(f\"Notification sent to {self.recipient}: {self.message}\")",
    "file_path": "jaewon.lee/dn_notification_5.py",
    "start_line": 14,
    "end_line": 21,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "ClassDef",
    "name": "DN_NotificationService",
    "content": "\nclass DN_NotificationService:\n    def __init__(self):\n        self.notification_manager = DN_NotificationManager()\n\n    def dn_process_notification(self, message, recipient):\n        new_notification = DN_Notification(message, recipient)\n        new_notification.dn_send_notification()\n        self.notification_manager.dn_add_notification(message)",
    "file_path": "jaewon.lee/dn_notification_5.py",
    "start_line": 22,
    "end_line": 30,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.notifications = []",
    "file_path": "jaewon.lee/dn_notification_5.py",
    "start_line": 5,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_add_notification",
    "content": "\n    def dn_add_notification(self, message):\n        self.notifications.append(message)",
    "file_path": "jaewon.lee/dn_notification_5.py",
    "start_line": 7,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_display_notifications",
    "content": "\n    def dn_display_notifications(self):\n        for notification in self.notifications:\n            print(notification)",
    "file_path": "jaewon.lee/dn_notification_5.py",
    "start_line": 10,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, message, recipient):\n        self.message = message\n        self.recipient = recipient",
    "file_path": "jaewon.lee/dn_notification_5.py",
    "start_line": 16,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_send_notification",
    "content": "\n    def dn_send_notification(self):\n        print(f\"Notification sent to {self.recipient}: {self.message}\")",
    "file_path": "jaewon.lee/dn_notification_5.py",
    "start_line": 19,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.notification_manager = DN_NotificationManager()",
    "file_path": "jaewon.lee/dn_notification_5.py",
    "start_line": 24,
    "end_line": 25,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_notification",
    "content": "\n    def dn_process_notification(self, message, recipient):\n        new_notification = DN_Notification(message, recipient)\n        new_notification.dn_send_notification()\n        self.notification_manager.dn_add_notification(message)",
    "file_path": "jaewon.lee/dn_notification_5.py",
    "start_line": 26,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "ClassDef",
    "name": "DN_Notification",
    "content": "import datetime\n\n\nclass DN_Notification:\n    def __init__(self, message, recipient):\n        self.message = message\n        self.recipient = recipient\n        self.timestamp = datetime.datetime.now()\n\n    def send_notification(self):\n        print(f\"Notification sent to {self.recipient}: {self.message}\")",
    "file_path": "jaewon.lee/dn_notification_1.py",
    "start_line": 5,
    "end_line": 13,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_format_message",
    "content": "\ndef dn_format_message(message):\n    return message.upper()",
    "file_path": "jaewon.lee/dn_notification_1.py",
    "start_line": 14,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_recipient",
    "content": "\ndef dn_check_recipient(recipient):\n    if recipient == 'admin':\n        return True\n    else:\n        return False",
    "file_path": "jaewon.lee/dn_notification_1.py",
    "start_line": 17,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "import datetime\n\n    def __init__(self, message, recipient):\n        self.message = message\n        self.recipient = recipient\n        self.timestamp = datetime.datetime.now()",
    "file_path": "jaewon.lee/dn_notification_1.py",
    "start_line": 7,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "send_notification",
    "content": "\n    def send_notification(self):\n        print(f\"Notification sent to {self.recipient}: {self.message}\")",
    "file_path": "jaewon.lee/dn_notification_1.py",
    "start_line": 11,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "ClassDef",
    "name": "DN_Notification",
    "content": "# Notification 관련 기능을 담당하는 Python 파일\n\nclass DN_Notification:\n    def __init__(self, message, recipient):\n        self.message = message\n        self.recipient = recipient\n    \n    def send_notification(self):\n        print(f\"Notification sent to {self.recipient}: {self.message}\")",
    "file_path": "jaewon.lee/dn_notification_4.py",
    "start_line": 2,
    "end_line": 10,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_format_message",
    "content": "\ndef dn_format_message(message):\n    return message.upper()",
    "file_path": "jaewon.lee/dn_notification_4.py",
    "start_line": 11,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_recipient",
    "content": "\ndef dn_check_recipient(recipient):\n    if recipient:\n        return True\n    else:\n        return False",
    "file_path": "jaewon.lee/dn_notification_4.py",
    "start_line": 14,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_main",
    "content": "\ndef dn_main():\n    message = \"New message for you\"\n    recipient = \"User123\"\n    \n    formatted_message = dn_format_message(message)\n    recipient_valid = dn_check_recipient(recipient)\n    \n    if recipient_valid:\n        notification = DN_Notification(formatted_message, recipient)\n        notification.send_notification()",
    "file_path": "jaewon.lee/dn_notification_4.py",
    "start_line": 20,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, message, recipient):\n        self.message = message\n        self.recipient = recipient",
    "file_path": "jaewon.lee/dn_notification_4.py",
    "start_line": 5,
    "end_line": 7,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "send_notification",
    "content": "    \n    def send_notification(self):\n        print(f\"Notification sent to {self.recipient}: {self.message}\")",
    "file_path": "jaewon.lee/dn_notification_4.py",
    "start_line": 8,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_sum_numbers_in_list",
    "content": "\n# 유틸리티 함수 1: 리스트 안의 모든 숫자를 합산하는 함수\ndef dn_sum_numbers_in_list(input_list):\n    total = 0\n    for num in input_list:\n        if isinstance(num, (int, float)):\n            total += num\n    return total",
    "file_path": "jaewon.lee/dn_utility_5.py",
    "start_line": 2,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_reverse_string",
    "content": "\n# 유틸리티 함수 2: 문자열을 거꾸로 뒤집는 함수\ndef dn_reverse_string(input_string):\n    return input_string[::-1]",
    "file_path": "jaewon.lee/dn_utility_5.py",
    "start_line": 10,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "ClassDef",
    "name": "DNUtil",
    "content": "\n# DNUtil 클래스: 유틸리티 기능을 제공하는 클래스\nclass DNUtil:\n    def __init__(self, name):\n        self.name = name\n\n    def dn_greet(self):\n        return \"Hello, \" + self.name + \"!\"\n\n    def dn_check_palindrome(self, text):\n        text = text.lower().replace(\" \", \"\")\n        return text == text[::-1]",
    "file_path": "jaewon.lee/dn_utility_5.py",
    "start_line": 14,
    "end_line": 25,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, name):\n        self.name = name",
    "file_path": "jaewon.lee/dn_utility_5.py",
    "start_line": 17,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_greet",
    "content": "\n    def dn_greet(self):\n        return \"Hello, \" + self.name + \"!\"",
    "file_path": "jaewon.lee/dn_utility_5.py",
    "start_line": 19,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_check_palindrome",
    "content": "\n    def dn_check_palindrome(self, text):\n        text = text.lower().replace(\" \", \"\")\n        return text == text[::-1]",
    "file_path": "jaewon.lee/dn_utility_5.py",
    "start_line": 22,
    "end_line": 25,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "ClassDef",
    "name": "DNRandom",
    "content": "import random\n\n\n# dn_utility_1.py 파일 시작\n\n# DNRandom 클래스: 랜덤 기능을 제공하는 클래스\nclass DNRandom:\n    def __init__(self):\n        pass\n    \n    def dn_generate_random_number(self, start, end):\n        return random.randint(start, end)\n    \n    def dn_generate_random_string(self, length):\n        letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'\n        return ''.join(random.choice(letters) for _ in range(length))",
    "file_path": "jaewon.lee/dn_utility_1.py",
    "start_line": 6,
    "end_line": 19,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "ClassDef",
    "name": "DNMath",
    "content": "\n# DNMath 클래스: 수학 관련 기능을 제공하는 클래스\nclass DNMath:\n    def __init__(self):\n        pass\n    \n    def dn_calc_square(self, num):\n        return num ** 2\n    \n    def dn_calc_cube(self, num):\n        return num ** 3",
    "file_path": "jaewon.lee/dn_utility_1.py",
    "start_line": 20,
    "end_line": 30,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "ClassDef",
    "name": "DNConverter",
    "content": "\n# DNConverter 클래스: 변환 관련 기능을 제공하는 클래스\nclass DNConverter:\n    def __init__(self):\n        pass\n    \n    def dn_convert_to_binary(self, num):\n        return bin(num)\n    \n    def dn_convert_to_hex(self, num):\n        return hex(num)",
    "file_path": "jaewon.lee/dn_utility_1.py",
    "start_line": 31,
    "end_line": 41,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        pass",
    "file_path": "jaewon.lee/dn_utility_1.py",
    "start_line": 11,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_random_number",
    "content": "import random\n\n    \n    def dn_generate_random_number(self, start, end):\n        return random.randint(start, end)",
    "file_path": "jaewon.lee/dn_utility_1.py",
    "start_line": 13,
    "end_line": 15,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_random_string",
    "content": "import random\n\n    \n    def dn_generate_random_string(self, length):\n        letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'\n        return ''.join(random.choice(letters) for _ in range(length))",
    "file_path": "jaewon.lee/dn_utility_1.py",
    "start_line": 16,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        pass",
    "file_path": "jaewon.lee/dn_utility_1.py",
    "start_line": 23,
    "end_line": 24,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_calc_square",
    "content": "    \n    def dn_calc_square(self, num):\n        return num ** 2",
    "file_path": "jaewon.lee/dn_utility_1.py",
    "start_line": 25,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_calc_cube",
    "content": "    \n    def dn_calc_cube(self, num):\n        return num ** 3",
    "file_path": "jaewon.lee/dn_utility_1.py",
    "start_line": 28,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        pass",
    "file_path": "jaewon.lee/dn_utility_1.py",
    "start_line": 34,
    "end_line": 35,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_convert_to_binary",
    "content": "    \n    def dn_convert_to_binary(self, num):\n        return bin(num)",
    "file_path": "jaewon.lee/dn_utility_1.py",
    "start_line": 36,
    "end_line": 38,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_convert_to_hex",
    "content": "    \n    def dn_convert_to_hex(self, num):\n        return hex(num)",
    "file_path": "jaewon.lee/dn_utility_1.py",
    "start_line": 39,
    "end_line": 41,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "ClassDef",
    "name": "DN_User",
    "content": "# @dn- Danal 회사의 user 기능과 관련된 Python 파일\n\nclass DN_User:\n    def __init__(self, username, email):\n        self.username = username\n        self.email = email\n\n    def get_username(self):\n        return self.username\n\n    def get_email(self):\n        return self.email",
    "file_path": "jaewon.lee/dn_user_3.py",
    "start_line": 2,
    "end_line": 13,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_register_user",
    "content": "\ndef dn_register_user(username, email):\n    new_user = DN_User(username, email)\n    # 신규 사용자를 데이터베이스에 저장하는 로직\n    return new_user",
    "file_path": "jaewon.lee/dn_user_3.py",
    "start_line": 14,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_login",
    "content": "\ndef dn_login(username, email):\n    # 주어진 username과 email로 사용자 로그인 처리하는 로직\n    pass",
    "file_path": "jaewon.lee/dn_user_3.py",
    "start_line": 19,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_reset_password",
    "content": "\ndef dn_reset_password(username, email, new_password):\n    # 비밀번호 재설정 로직\n    pass",
    "file_path": "jaewon.lee/dn_user_3.py",
    "start_line": 23,
    "end_line": 26,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, username, email):\n        self.username = username\n        self.email = email",
    "file_path": "jaewon.lee/dn_user_3.py",
    "start_line": 5,
    "end_line": 7,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "get_username",
    "content": "\n    def get_username(self):\n        return self.username",
    "file_path": "jaewon.lee/dn_user_3.py",
    "start_line": 8,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "get_email",
    "content": "\n    def get_email(self):\n        return self.email",
    "file_path": "jaewon.lee/dn_user_3.py",
    "start_line": 11,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "ClassDef",
    "name": "DNUser",
    "content": "# This file contains the user-related functionality for Danal's codebase.\n\n# User class to represent a user in the system\nclass DNUser:\n    def __init__(self, username, email):\n        self.username = username\n        self.email = email\n\n    def get_username(self):\n        return self.username\n\n    def get_email(self):\n        return self.email",
    "file_path": "jaewon.lee/dn_user_2.py",
    "start_line": 2,
    "end_line": 14,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_create_user",
    "content": "\n# Function to create a new user\ndef dn_create_user(username, email):\n    new_user = DNUser(username, email)\n    return new_user",
    "file_path": "jaewon.lee/dn_user_2.py",
    "start_line": 15,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_update_user",
    "content": "\n# Function to update user information\ndef dn_update_user(user, new_email):\n    user.email = new_email\n    return user",
    "file_path": "jaewon.lee/dn_user_2.py",
    "start_line": 20,
    "end_line": 24,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_delete_user",
    "content": "user_list = []\n\n\n# Function to delete a user\ndef dn_delete_user(user_list, username):\n    for user in user_list:\n        if user.get_username() == username:\n            user_list.remove(user)\n            return True\n    return False",
    "file_path": "jaewon.lee/dn_user_2.py",
    "start_line": 25,
    "end_line": 32,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 1
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, username, email):\n        self.username = username\n        self.email = email",
    "file_path": "jaewon.lee/dn_user_2.py",
    "start_line": 6,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "get_username",
    "content": "\n    def get_username(self):\n        return self.username",
    "file_path": "jaewon.lee/dn_user_2.py",
    "start_line": 9,
    "end_line": 11,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "get_email",
    "content": "\n    def get_email(self):\n        return self.email",
    "file_path": "jaewon.lee/dn_user_2.py",
    "start_line": 12,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_calculate_sum",
    "content": "# Python file for various utility functions related to Danal's codebase\n\n# Helper function to calculate the sum of two numbers\ndef dn_calculate_sum(a, b):\n    return a + b",
    "file_path": "jaewon.lee/dn_utility_4.py",
    "start_line": 2,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "ClassDef",
    "name": "DNStringUtil",
    "content": "\n# Class for working with strings\nclass DNStringUtil:\n    def __init__(self):\n        pass\n\n    # Function to reverse a given string\n    def dn_reverse_string(self, text):\n        return text[::-1]\n\n    # Function to count the number of words in a string\n    def dn_count_words(self, text):\n        words = text.split()\n        return len(words)",
    "file_path": "jaewon.lee/dn_utility_4.py",
    "start_line": 7,
    "end_line": 20,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "ClassDef",
    "name": "DNMathUtil",
    "content": "\n# Class for mathematical operations\nclass DNMathUtil:\n    def __init__(self):\n        pass\n\n    # Function to calculate the square of a number\n    def dn_square_number(self, num):\n        return num ** 2\n\n    # Function to check if a number is prime\n    def dn_is_prime(self, num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True",
    "file_path": "jaewon.lee/dn_utility_4.py",
    "start_line": 21,
    "end_line": 38,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_fibonacci",
    "content": "\n# Function to generate Fibonacci sequence up to a certain limit\ndef dn_generate_fibonacci(limit):\n    fibonacci_sequence = [0, 1]\n    while fibonacci_sequence[-1] + fibonacci_sequence[-2] <= limit:\n        fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2])\n    return fibonacci_sequence",
    "file_path": "jaewon.lee/dn_utility_4.py",
    "start_line": 39,
    "end_line": 45,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "main",
    "content": "\n# Main function for testing the utility functions\ndef main():\n    a = 10\n    b = 5\n    print(f\"Sum of {a} and {b} is: {dn_calculate_sum(a, b)}\")\n\n    string_util = DNStringUtil()\n    text = \"Hello, World!\"\n    print(f\"Reversed string: {string_util.dn_reverse_string(text)}\")\n    print(f\"Number of words in text: {string_util.dn_count_words(text)}\")\n\n    math_util = DNMathUtil()\n    num = 7\n    print(f\"Square of {num}: {math_util.dn_square_number(num)}\")\n    print(f\"{num} is prime: {math_util.dn_is_prime(num)}\")\n\n    limit = 50\n    print(f\"Fibonacci sequence up to {limit}: {dn_generate_fibonacci(limit)}\")",
    "file_path": "jaewon.lee/dn_utility_4.py",
    "start_line": 46,
    "end_line": 64,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        pass",
    "file_path": "jaewon.lee/dn_utility_4.py",
    "start_line": 10,
    "end_line": 11,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_reverse_string",
    "content": "\n    # Function to reverse a given string\n    def dn_reverse_string(self, text):\n        return text[::-1]",
    "file_path": "jaewon.lee/dn_utility_4.py",
    "start_line": 12,
    "end_line": 15,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_count_words",
    "content": "\n    # Function to count the number of words in a string\n    def dn_count_words(self, text):\n        words = text.split()\n        return len(words)",
    "file_path": "jaewon.lee/dn_utility_4.py",
    "start_line": 16,
    "end_line": 20,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        pass",
    "file_path": "jaewon.lee/dn_utility_4.py",
    "start_line": 24,
    "end_line": 25,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_square_number",
    "content": "\n    # Function to calculate the square of a number\n    def dn_square_number(self, num):\n        return num ** 2",
    "file_path": "jaewon.lee/dn_utility_4.py",
    "start_line": 26,
    "end_line": 29,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_is_prime",
    "content": "\n    # Function to check if a number is prime\n    def dn_is_prime(self, num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True",
    "file_path": "jaewon.lee/dn_utility_4.py",
    "start_line": 30,
    "end_line": 38,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "jaewon.lee"
  },
  {
    "type": "FunctionDef",
    "name": "dn_calculate_average",
    "content": "x = [1, 2, 3, 4, 5]\nmax_value = data_analyzer.dn_get_max()\ndata_analyzer = DNDataAnalyzer(data)\ndata = [10, 20, 30, 40, 50]\nmin_value = data_analyzer.dn_get_min()\naverage = dn_calculate_average(data)\ny = [2, 4, 6, 8, 10]\n\n# Written by alex.wong\n\n# Function to calculate the average of a list of numbers\ndef dn_calculate_average(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average",
    "file_path": "alex.wong/dn_analytics_2.py",
    "start_line": 2,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 7
    },
    "persona": "alex.wong"
  },
  {
    "type": "ClassDef",
    "name": "DNDataAnalyzer",
    "content": "x = [1, 2, 3, 4, 5]\nmax_value = data_analyzer.dn_get_max()\ndata_analyzer = DNDataAnalyzer(data)\ndata = [10, 20, 30, 40, 50]\nmin_value = data_analyzer.dn_get_min()\naverage = dn_calculate_average(data)\ny = [2, 4, 6, 8, 10]\n\n\n# Class to analyze and visualize data\nclass DNDataAnalyzer:\n    def __init__(self, data):\n        self.data = data\n    \n    # Method to get the minimum value in the data\n    def dn_get_min(self):\n        return min(self.data)\n    \n    # Method to get the maximum value in the data\n    def dn_get_max(self):\n        return max(self.data)\n    \n    # Method to plot a histogram of the data\n    def dn_plot_histogram(self):\n        import matplotlib.pyplot as plt\n        plt.hist(self.data, bins=10, color='skyblue', edgecolor='black')\n        plt.xlabel('Value')\n        plt.ylabel('Frequency')\n        plt.title('Histogram of Data')\n        plt.show()",
    "file_path": "alex.wong/dn_analytics_2.py",
    "start_line": 9,
    "end_line": 30,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 7
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_linear_regression",
    "content": "x = [1, 2, 3, 4, 5]\nmax_value = data_analyzer.dn_get_max()\ndata_analyzer = DNDataAnalyzer(data)\ndata = [10, 20, 30, 40, 50]\nmin_value = data_analyzer.dn_get_min()\naverage = dn_calculate_average(data)\ny = [2, 4, 6, 8, 10]\n\n\n# Function to perform linear regression on two lists of data\ndef dn_linear_regression(x, y):\n    import numpy as np\n    slope, intercept = np.polyfit(x, y, 1)\n    return slope, intercept",
    "file_path": "alex.wong/dn_analytics_2.py",
    "start_line": 31,
    "end_line": 36,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 7
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "x = [1, 2, 3, 4, 5]\nmax_value = data_analyzer.dn_get_max()\ndata_analyzer = DNDataAnalyzer(data)\ndata = [10, 20, 30, 40, 50]\nmin_value = data_analyzer.dn_get_min()\naverage = dn_calculate_average(data)\ny = [2, 4, 6, 8, 10]\n\n    def __init__(self, data):\n        self.data = data",
    "file_path": "alex.wong/dn_analytics_2.py",
    "start_line": 12,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 7
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_min",
    "content": "x = [1, 2, 3, 4, 5]\nmax_value = data_analyzer.dn_get_max()\ndata_analyzer = DNDataAnalyzer(data)\ndata = [10, 20, 30, 40, 50]\nmin_value = data_analyzer.dn_get_min()\naverage = dn_calculate_average(data)\ny = [2, 4, 6, 8, 10]\n\n    \n    # Method to get the minimum value in the data\n    def dn_get_min(self):\n        return min(self.data)",
    "file_path": "alex.wong/dn_analytics_2.py",
    "start_line": 14,
    "end_line": 17,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 7
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_max",
    "content": "x = [1, 2, 3, 4, 5]\nmax_value = data_analyzer.dn_get_max()\ndata_analyzer = DNDataAnalyzer(data)\ndata = [10, 20, 30, 40, 50]\nmin_value = data_analyzer.dn_get_min()\naverage = dn_calculate_average(data)\ny = [2, 4, 6, 8, 10]\n\n    \n    # Method to get the maximum value in the data\n    def dn_get_max(self):\n        return max(self.data)",
    "file_path": "alex.wong/dn_analytics_2.py",
    "start_line": 18,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 7
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_plot_histogram",
    "content": "x = [1, 2, 3, 4, 5]\nmax_value = data_analyzer.dn_get_max()\ndata_analyzer = DNDataAnalyzer(data)\ndata = [10, 20, 30, 40, 50]\nmin_value = data_analyzer.dn_get_min()\naverage = dn_calculate_average(data)\ny = [2, 4, 6, 8, 10]\n\n    \n    # Method to plot a histogram of the data\n    def dn_plot_histogram(self):\n        import matplotlib.pyplot as plt\n        plt.hist(self.data, bins=10, color='skyblue', edgecolor='black')\n        plt.xlabel('Value')\n        plt.ylabel('Frequency')\n        plt.title('Histogram of Data')\n        plt.show()",
    "file_path": "alex.wong/dn_analytics_2.py",
    "start_line": 22,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 7
    },
    "persona": "alex.wong"
  },
  {
    "type": "ClassDef",
    "name": "DN_DataAnalyzer",
    "content": "\n# 데이터를 분석하기 위한 클래스\nclass DN_DataAnalyzer:\n    def __init__(self, data):\n        self.data = data\n\n    def dn_summary_statistics(self):\n        summary_stats = self.data.describe()\n        return summary_stats\n\n    def dn_missing_values(self):\n        missing_vals = self.data.isnull().sum()\n        return missing_vals\n\n    def dn_correlation_matrix(self):\n        corr_matrix = self.data.corr()\n        return corr_matrix",
    "file_path": "alex.wong/dn_analytics_3.py",
    "start_line": 6,
    "end_line": 22,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "ClassDef",
    "name": "DN_DataVisualizer",
    "content": "\n# 데이터 시각화를 위한 클래스\nclass DN_DataVisualizer:\n    def __init__(self, data):\n        self.data = data\n\n    def dn_plot_histogram(self, column):\n        self.data[column].hist()\n\n    def dn_plot_scatter(self, x, y):\n        self.data.plot.scatter(x=x, y=y)\n\n    def dn_plot_heatmap(self):\n        import seaborn as sns\n        sns.heatmap(self.data.corr(), annot=True)",
    "file_path": "alex.wong/dn_analytics_3.py",
    "start_line": 23,
    "end_line": 37,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, data):\n        self.data = data",
    "file_path": "alex.wong/dn_analytics_3.py",
    "start_line": 9,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_summary_statistics",
    "content": "\n    def dn_summary_statistics(self):\n        summary_stats = self.data.describe()\n        return summary_stats",
    "file_path": "alex.wong/dn_analytics_3.py",
    "start_line": 11,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_missing_values",
    "content": "\n    def dn_missing_values(self):\n        missing_vals = self.data.isnull().sum()\n        return missing_vals",
    "file_path": "alex.wong/dn_analytics_3.py",
    "start_line": 15,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_correlation_matrix",
    "content": "\n    def dn_correlation_matrix(self):\n        corr_matrix = self.data.corr()\n        return corr_matrix",
    "file_path": "alex.wong/dn_analytics_3.py",
    "start_line": 19,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, data):\n        self.data = data",
    "file_path": "alex.wong/dn_analytics_3.py",
    "start_line": 26,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_plot_histogram",
    "content": "\n    def dn_plot_histogram(self, column):\n        self.data[column].hist()",
    "file_path": "alex.wong/dn_analytics_3.py",
    "start_line": 28,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_plot_scatter",
    "content": "\n    def dn_plot_scatter(self, x, y):\n        self.data.plot.scatter(x=x, y=y)",
    "file_path": "alex.wong/dn_analytics_3.py",
    "start_line": 31,
    "end_line": 33,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_plot_heatmap",
    "content": "\n    def dn_plot_heatmap(self):\n        import seaborn as sns\n        sns.heatmap(self.data.corr(), annot=True)",
    "file_path": "alex.wong/dn_analytics_3.py",
    "start_line": 34,
    "end_line": 37,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "ClassDef",
    "name": "DN_ReportGenerator",
    "content": "import pandas as pd\n\n\nclass DN_ReportGenerator:\n    def __init__(self, data):\n        self.data = data\n\n    def dn_generate_report(self):\n        # Generate report based on the provided data\n        report = pd.DataFrame(self.data)\n        return report",
    "file_path": "alex.wong/dn_reporting_4.py",
    "start_line": 6,
    "end_line": 14,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_clean_data",
    "content": "\ndef dn_clean_data(data):\n    # Clean the raw data before generating the report\n    cleaned_data = data.dropna()\n    return cleaned_data",
    "file_path": "alex.wong/dn_reporting_4.py",
    "start_line": 15,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_analyze_data",
    "content": "\ndef dn_analyze_data(data):\n    # Perform analysis on the data\n    analysis_result = data.describe()\n    return analysis_result",
    "file_path": "alex.wong/dn_reporting_4.py",
    "start_line": 20,
    "end_line": 24,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_visualize_data",
    "content": "\ndef dn_visualize_data(data):\n    # Visualize the data for reporting purposes\n    visualization = data.plot()\n    return visualization",
    "file_path": "alex.wong/dn_reporting_4.py",
    "start_line": 25,
    "end_line": 29,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, data):\n        self.data = data",
    "file_path": "alex.wong/dn_reporting_4.py",
    "start_line": 8,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_report",
    "content": "import pandas as pd\n\n\n    def dn_generate_report(self):\n        # Generate report based on the provided data\n        report = pd.DataFrame(self.data)\n        return report",
    "file_path": "alex.wong/dn_reporting_4.py",
    "start_line": 10,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 1,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "ClassDef",
    "name": "DN_DataProcessor",
    "content": "'''\n@author: alex.wong\n\n이 파일은 Danal 회사의 prediction 기능을 수행하는 Python 코드입니다.\n'''\n\n\n# 데이터를 전처리하고 예측을 수행하는 클래스\nclass DN_DataProcessor:\n    \n    def __init__(self, data):\n        self.data = data\n        \n    def dn_preprocess_data(self):\n        # 데이터 전처리 로직 구현\n        pass",
    "file_path": "alex.wong/dn_prediction_3.py",
    "start_line": 6,
    "end_line": 15,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "ClassDef",
    "name": "DN_Visualizer",
    "content": "'''\n@author: alex.wong\n\n이 파일은 Danal 회사의 prediction 기능을 수행하는 Python 코드입니다.\n'''\n\n    \n# 예측 결과를 시각화하는 클래스\nclass DN_Visualizer:\n    \n    def __init__(self, prediction_results):\n        self.prediction_results = prediction_results\n        \n    def dn_plot_results(self):\n        # 예측 결과를 시각화하는 로직 구현\n        pass",
    "file_path": "alex.wong/dn_prediction_3.py",
    "start_line": 16,
    "end_line": 25,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "ClassDef",
    "name": "DN_Predictor",
    "content": "'''\n@author: alex.wong\n\n이 파일은 Danal 회사의 prediction 기능을 수행하는 Python 코드입니다.\n'''\n\n    \n# 예측 모델을 학습하고 예측하는 클래스\nclass DN_Predictor:\n    \n    def __init__(self, model):\n        self.model = model\n        \n    def dn_train_model(self, train_data):\n        # 모델 학습 로직 구현\n        pass\n    \n    def dn_make_prediction(self, test_data):\n        # 모델을 사용하여 예측 수행하는 로직 구현\n        pass",
    "file_path": "alex.wong/dn_prediction_3.py",
    "start_line": 26,
    "end_line": 39,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "'''\n@author: alex.wong\n\n이 파일은 Danal 회사의 prediction 기능을 수행하는 Python 코드입니다.\n'''\n\n    \n    def __init__(self, data):\n        self.data = data",
    "file_path": "alex.wong/dn_prediction_3.py",
    "start_line": 9,
    "end_line": 11,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_preprocess_data",
    "content": "'''\n@author: alex.wong\n\n이 파일은 Danal 회사의 prediction 기능을 수행하는 Python 코드입니다.\n'''\n\n        \n    def dn_preprocess_data(self):\n        # 데이터 전처리 로직 구현\n        pass",
    "file_path": "alex.wong/dn_prediction_3.py",
    "start_line": 12,
    "end_line": 15,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "'''\n@author: alex.wong\n\n이 파일은 Danal 회사의 prediction 기능을 수행하는 Python 코드입니다.\n'''\n\n    \n    def __init__(self, prediction_results):\n        self.prediction_results = prediction_results",
    "file_path": "alex.wong/dn_prediction_3.py",
    "start_line": 19,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_plot_results",
    "content": "'''\n@author: alex.wong\n\n이 파일은 Danal 회사의 prediction 기능을 수행하는 Python 코드입니다.\n'''\n\n        \n    def dn_plot_results(self):\n        # 예측 결과를 시각화하는 로직 구현\n        pass",
    "file_path": "alex.wong/dn_prediction_3.py",
    "start_line": 22,
    "end_line": 25,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "'''\n@author: alex.wong\n\n이 파일은 Danal 회사의 prediction 기능을 수행하는 Python 코드입니다.\n'''\n\n    \n    def __init__(self, model):\n        self.model = model",
    "file_path": "alex.wong/dn_prediction_3.py",
    "start_line": 29,
    "end_line": 31,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_train_model",
    "content": "'''\n@author: alex.wong\n\n이 파일은 Danal 회사의 prediction 기능을 수행하는 Python 코드입니다.\n'''\n\n        \n    def dn_train_model(self, train_data):\n        # 모델 학습 로직 구현\n        pass",
    "file_path": "alex.wong/dn_prediction_3.py",
    "start_line": 32,
    "end_line": 35,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_make_prediction",
    "content": "'''\n@author: alex.wong\n\n이 파일은 Danal 회사의 prediction 기능을 수행하는 Python 코드입니다.\n'''\n\n    \n    def dn_make_prediction(self, test_data):\n        # 모델을 사용하여 예측 수행하는 로직 구현\n        pass",
    "file_path": "alex.wong/dn_prediction_3.py",
    "start_line": 36,
    "end_line": 39,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "ClassDef",
    "name": "DN_ReportGenerator",
    "content": "# 작성자: alex.wong\n\nclass DN_ReportGenerator:\n    def __init__(self, data):\n        self.data = data\n\n    def dn_generate_report(self):\n        # 보고서 생성 로직\n        pass",
    "file_path": "alex.wong/dn_reporting_1.py",
    "start_line": 2,
    "end_line": 10,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_clean_data",
    "content": "\ndef dn_clean_data(data):\n    # 데이터 정제 로직\n    cleaned_data = []\n    for item in data:\n        # 데이터 정제 작업 수행\n        cleaned_data.append(item)\n    return cleaned_data",
    "file_path": "alex.wong/dn_reporting_1.py",
    "start_line": 11,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_visualize_report",
    "content": "\ndef dn_visualize_report(report_data):\n    # 보고서 시각화 로직\n    pass",
    "file_path": "alex.wong/dn_reporting_1.py",
    "start_line": 19,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_data_source",
    "content": "\ndef dn_get_data_source():\n    # 데이터 소스 가져오는 로직\n    data_source = []\n    return data_source",
    "file_path": "alex.wong/dn_reporting_1.py",
    "start_line": 23,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, data):\n        self.data = data",
    "file_path": "alex.wong/dn_reporting_1.py",
    "start_line": 5,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_report",
    "content": "\n    def dn_generate_report(self):\n        # 보고서 생성 로직\n        pass",
    "file_path": "alex.wong/dn_reporting_1.py",
    "start_line": 7,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "ClassDef",
    "name": "DN_PredictionModel",
    "content": "from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\n\n\nclass DN_PredictionModel:\n    def __init__(self):\n        self.model = RandomForestClassifier()\n        \n    def dn_train_model(self, X, y):\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n        self.model.fit(X_train, y_train)\n        \n        y_pred = self.model.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n        return accuracy\n        \n    def dn_make_prediction(self, data):\n        prediction = self.model.predict(data)\n        return prediction",
    "file_path": "alex.wong/dn_prediction_4.py",
    "start_line": 6,
    "end_line": 21,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 3,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_preprocess_data",
    "content": "\ndef dn_preprocess_data(data):\n    # 데이터 전처리 작업 수행\n    processed_data = data # 예시로 그대로 반환\n    return processed_data",
    "file_path": "alex.wong/dn_prediction_4.py",
    "start_line": 22,
    "end_line": 26,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_evaluate_model",
    "content": "from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\n\n\ndef dn_evaluate_model(model, X_test, y_test):\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)\n    return accuracy",
    "file_path": "alex.wong/dn_prediction_4.py",
    "start_line": 27,
    "end_line": 31,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 3,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\n\n    def __init__(self):\n        self.model = RandomForestClassifier()",
    "file_path": "alex.wong/dn_prediction_4.py",
    "start_line": 8,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 3,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_train_model",
    "content": "from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\n\n        \n    def dn_train_model(self, X, y):\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n        self.model.fit(X_train, y_train)\n        \n        y_pred = self.model.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n        return accuracy",
    "file_path": "alex.wong/dn_prediction_4.py",
    "start_line": 10,
    "end_line": 17,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 3,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_make_prediction",
    "content": "        \n    def dn_make_prediction(self, data):\n        prediction = self.model.predict(data)\n        return prediction",
    "file_path": "alex.wong/dn_prediction_4.py",
    "start_line": 18,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_load_data",
    "content": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\n# 데이터를 읽어오는 함수\ndef dn_load_data(file_path):\n    data = pd.read_csv(file_path)\n    return data",
    "file_path": "alex.wong/dn_reporting_2.py",
    "start_line": 6,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_data",
    "content": "\n# 데이터를 가공하는 함수\ndef dn_process_data(data):\n    # 데이터 가공 로직 작성\n    processed_data = data.groupby('category').sum()\n    return processed_data",
    "file_path": "alex.wong/dn_reporting_2.py",
    "start_line": 11,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "ClassDef",
    "name": "DNReportingChart",
    "content": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\n# 차트를 그리는 클래스\nclass DNReportingChart:\n    def __init__(self, data):\n        self.data = data\n\n    def dn_bar_chart(self):\n        plt.figure(figsize=(10, 6))\n        plt.bar(self.data.index, self.data['value'])\n        plt.xlabel('Category')\n        plt.ylabel('Value')\n        plt.title('Bar Chart')\n        plt.show()\n\n    def dn_pie_chart(self):\n        plt.figure(figsize=(8, 8))\n        plt.pie(self.data['value'], labels=self.data.index, autopct='%1.1f%%')\n        plt.title('Pie Chart')\n        plt.show()",
    "file_path": "alex.wong/dn_reporting_2.py",
    "start_line": 17,
    "end_line": 35,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_main",
    "content": "\n# 메인 함수\ndef dn_main():\n    file_path = 'data.csv'\n    data = dn_load_data(file_path)\n    processed_data = dn_process_data(data)\n\n    chart = DNReportingChart(processed_data)\n    chart.dn_bar_chart()\n    chart.dn_pie_chart()",
    "file_path": "alex.wong/dn_reporting_2.py",
    "start_line": 36,
    "end_line": 45,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, data):\n        self.data = data",
    "file_path": "alex.wong/dn_reporting_2.py",
    "start_line": 20,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_bar_chart",
    "content": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\n    def dn_bar_chart(self):\n        plt.figure(figsize=(10, 6))\n        plt.bar(self.data.index, self.data['value'])\n        plt.xlabel('Category')\n        plt.ylabel('Value')\n        plt.title('Bar Chart')\n        plt.show()",
    "file_path": "alex.wong/dn_reporting_2.py",
    "start_line": 22,
    "end_line": 29,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_pie_chart",
    "content": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\n    def dn_pie_chart(self):\n        plt.figure(figsize=(8, 8))\n        plt.pie(self.data['value'], labels=self.data.index, autopct='%1.1f%%')\n        plt.title('Pie Chart')\n        plt.show()",
    "file_path": "alex.wong/dn_reporting_2.py",
    "start_line": 30,
    "end_line": 35,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_preprocess_data",
    "content": "\n# 데이터를 전처리하는 함수\ndef dn_preprocess_data(data):\n    # 데이터 전처리 로직\n    processed_data = data.dropna()\n    return processed_data",
    "file_path": "alex.wong/dn_prediction_5.py",
    "start_line": 5,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "ClassDef",
    "name": "DN_ModelTrainer",
    "content": "\n# 모델을 학습시키는 클래스\nclass DN_ModelTrainer:\n    def __init__(self, model_type):\n        self.model_type = model_type\n\n    def train_model(self, X_train, y_train):\n        # 모델 학습 로직\n        if self.model_type == 'Regression':\n            from sklearn.linear_model import LinearRegression\n            model = LinearRegression()\n        elif self.model_type == 'Classification':\n            from sklearn.ensemble import RandomForestClassifier\n            model = RandomForestClassifier()\n        \n        model.fit(X_train, y_train)\n        return model",
    "file_path": "alex.wong/dn_prediction_5.py",
    "start_line": 11,
    "end_line": 27,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "ClassDef",
    "name": "DN_ModelPredictor",
    "content": "\n# 모델을 사용하여 예측하는 클래스\nclass DN_ModelPredictor:\n    def __init__(self, model):\n        self.model = model\n    \n    def predict(self, X):\n        predictions = self.model.predict(X)\n        return predictions",
    "file_path": "alex.wong/dn_prediction_5.py",
    "start_line": 28,
    "end_line": 36,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, model_type):\n        self.model_type = model_type",
    "file_path": "alex.wong/dn_prediction_5.py",
    "start_line": 14,
    "end_line": 15,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "train_model",
    "content": "\n    def train_model(self, X_train, y_train):\n        # 모델 학습 로직\n        if self.model_type == 'Regression':\n            from sklearn.linear_model import LinearRegression\n            model = LinearRegression()\n        elif self.model_type == 'Classification':\n            from sklearn.ensemble import RandomForestClassifier\n            model = RandomForestClassifier()\n        \n        model.fit(X_train, y_train)\n        return model",
    "file_path": "alex.wong/dn_prediction_5.py",
    "start_line": 16,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, model):\n        self.model = model",
    "file_path": "alex.wong/dn_prediction_5.py",
    "start_line": 31,
    "end_line": 32,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "predict",
    "content": "    \n    def predict(self, X):\n        predictions = self.model.predict(X)\n        return predictions",
    "file_path": "alex.wong/dn_prediction_5.py",
    "start_line": 33,
    "end_line": 36,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "ClassDef",
    "name": "DNReporting",
    "content": "result = dn_process_data(data)\ndata = pd.read_csv('data.csv')\n\n\n# DNReporting 클래스 정의\nclass DNReporting:\n    def __init__(self, data):\n        self.data = data\n\n    def dn_generate_report(self):\n        # 데이터에 기반한 리포트 생성 로직\n        report = self.data.describe()\n        return report",
    "file_path": "alex.wong/dn_reporting_3.py",
    "start_line": 6,
    "end_line": 15,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 2
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_data",
    "content": "result = dn_process_data(data)\ndata = pd.read_csv('data.csv')\n\n\n# DNReporting 클래스를 활용하는 함수\ndef dn_process_data(data):\n    reporter = DNReporting(data)\n    report = reporter.dn_generate_report()\n    return report",
    "file_path": "alex.wong/dn_reporting_3.py",
    "start_line": 16,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 2
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "result = dn_process_data(data)\ndata = pd.read_csv('data.csv')\n\n    def __init__(self, data):\n        self.data = data",
    "file_path": "alex.wong/dn_reporting_3.py",
    "start_line": 9,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 2
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_report",
    "content": "result = dn_process_data(data)\ndata = pd.read_csv('data.csv')\n\n\n    def dn_generate_report(self):\n        # 데이터에 기반한 리포트 생성 로직\n        report = self.data.describe()\n        return report",
    "file_path": "alex.wong/dn_reporting_3.py",
    "start_line": 11,
    "end_line": 15,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 2
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_clean_data",
    "content": "\ndef dn_clean_data(data):\n    \"\"\"\n    Cleans the input data by removing any missing values and duplicates\n    \n    Parameters:\n    data (DataFrame): Input data with potentially missing values or duplicates\n    \n    Returns:\n    cleaned_data (DataFrame): Data without missing values and duplicates\n    \"\"\"\n    cleaned_data = data.dropna().drop_duplicates()\n    return cleaned_data",
    "file_path": "alex.wong/dn_analytics_4.py",
    "start_line": 7,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "ClassDef",
    "name": "DNDataAnalyzer",
    "content": "\nclass DNDataAnalyzer:\n    def __init__(self, data):\n        self.data = data\n        \n    def dn_describe_data(self):\n        \"\"\"\n        Describes the input data by providing summary statistics\n        \n        Returns:\n        summary (DataFrame): Summary statistics of the data\n        \"\"\"\n        summary = self.data.describe()\n        return summary\n    \n    def dn_plot_histogram(self, column):\n        \"\"\"\n        Plots a histogram for the specified column in the data\n        \n        Parameters:\n        column (str): Name of the column to plot\n        \n        Returns:\n        None\n        \"\"\"\n        self.data[column].plot.hist()\n        \n    def dn_correlation_matrix(self):\n        \"\"\"\n        Generates a correlation matrix for the data\n        \n        Returns:\n        correlation_matrix (DataFrame): Correlation matrix of the data\n        \"\"\"\n        correlation_matrix = self.data.corr()\n        return correlation_matrix",
    "file_path": "alex.wong/dn_analytics_4.py",
    "start_line": 20,
    "end_line": 55,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, data):\n        self.data = data",
    "file_path": "alex.wong/dn_analytics_4.py",
    "start_line": 22,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_describe_data",
    "content": "        \n    def dn_describe_data(self):\n        \"\"\"\n        Describes the input data by providing summary statistics\n        \n        Returns:\n        summary (DataFrame): Summary statistics of the data\n        \"\"\"\n        summary = self.data.describe()\n        return summary",
    "file_path": "alex.wong/dn_analytics_4.py",
    "start_line": 24,
    "end_line": 33,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_plot_histogram",
    "content": "    \n    def dn_plot_histogram(self, column):\n        \"\"\"\n        Plots a histogram for the specified column in the data\n        \n        Parameters:\n        column (str): Name of the column to plot\n        \n        Returns:\n        None\n        \"\"\"\n        self.data[column].plot.hist()",
    "file_path": "alex.wong/dn_analytics_4.py",
    "start_line": 34,
    "end_line": 45,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_correlation_matrix",
    "content": "        \n    def dn_correlation_matrix(self):\n        \"\"\"\n        Generates a correlation matrix for the data\n        \n        Returns:\n        correlation_matrix (DataFrame): Correlation matrix of the data\n        \"\"\"\n        correlation_matrix = self.data.corr()\n        return correlation_matrix",
    "file_path": "alex.wong/dn_analytics_4.py",
    "start_line": 46,
    "end_line": 55,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_data_preprocessing",
    "content": "# Written by Alex Wong\n\n# 데이터 전처리 함수\ndef dn_data_preprocessing(data):\n    # 데이터 전처리 작업 수행\n    processed_data = data\n    \n    return processed_data",
    "file_path": "alex.wong/dn_analytics_1.py",
    "start_line": 2,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_statistics_analysis",
    "content": "\n# 통계 분석 함수\ndef dn_statistics_analysis(data):\n    # 데이터에 대한 통계 분석 수행\n    stats = {\n        'mean': data.mean(),\n        'std_dev': data.std(),\n        'max': data.max(),\n        'min': data.min()\n    }\n    \n    return stats",
    "file_path": "alex.wong/dn_analytics_1.py",
    "start_line": 10,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "ClassDef",
    "name": "DNViz",
    "content": "\n# 시각화 클래스\nclass DNViz:\n    def __init__(self, data):\n        self.data = data\n        \n    def plot_histogram(self):\n        # 데이터의 히스토그램을 그리는 기능\n        pass\n    \n    def plot_scatter(self, x, y):\n        # 데이터의 산점도를 그리는 기능\n        pass",
    "file_path": "alex.wong/dn_analytics_1.py",
    "start_line": 22,
    "end_line": 34,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "ClassDef",
    "name": "DNPredictionModel",
    "content": "\n# 예측 모델 클래스\nclass DNPredictionModel:\n    def __init__(self, data):\n        self.data = data\n        \n    def train_model(self):\n        # 데이터를 기반으로 예측 모델을 학습\n        pass\n    \n    def make_prediction(self, new_data):\n        # 학습된 모델을 사용하여 새로운 데이터를 예측\n        pass",
    "file_path": "alex.wong/dn_analytics_1.py",
    "start_line": 35,
    "end_line": 47,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, data):\n        self.data = data",
    "file_path": "alex.wong/dn_analytics_1.py",
    "start_line": 25,
    "end_line": 26,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "plot_histogram",
    "content": "        \n    def plot_histogram(self):\n        # 데이터의 히스토그램을 그리는 기능\n        pass",
    "file_path": "alex.wong/dn_analytics_1.py",
    "start_line": 27,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "plot_scatter",
    "content": "    \n    def plot_scatter(self, x, y):\n        # 데이터의 산점도를 그리는 기능\n        pass",
    "file_path": "alex.wong/dn_analytics_1.py",
    "start_line": 31,
    "end_line": 34,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, data):\n        self.data = data",
    "file_path": "alex.wong/dn_analytics_1.py",
    "start_line": 38,
    "end_line": 39,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "train_model",
    "content": "        \n    def train_model(self):\n        # 데이터를 기반으로 예측 모델을 학습\n        pass",
    "file_path": "alex.wong/dn_analytics_1.py",
    "start_line": 40,
    "end_line": 43,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "make_prediction",
    "content": "    \n    def make_prediction(self, new_data):\n        # 학습된 모델을 사용하여 새로운 데이터를 예측\n        pass",
    "file_path": "alex.wong/dn_analytics_1.py",
    "start_line": 44,
    "end_line": 47,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "alex.wong"
  },
  {
    "type": "FunctionDef",
    "name": "dn_load_data",
    "content": "\n# Functions\ndef dn_load_data():\n    pass",
    "file_path": "mina.kim/dn_dashboard_1.py",
    "start_line": 7,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_display_dashboard",
    "content": "\ndef dn_display_dashboard():\n    pass",
    "file_path": "mina.kim/dn_dashboard_1.py",
    "start_line": 11,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_update_widget",
    "content": "\ndef dn_update_widget(widget_id):\n    pass",
    "file_path": "mina.kim/dn_dashboard_1.py",
    "start_line": 14,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNWidget",
    "content": "\n# Classes\nclass DNWidget:\n    def __init__(self, widget_id, widget_type):\n        self.widget_id = widget_id\n        self.widget_type = widget_type\n        self.data = None\n\n    def dn_render(self):\n        pass",
    "file_path": "mina.kim/dn_dashboard_1.py",
    "start_line": 17,
    "end_line": 26,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNPieChartWidget",
    "content": "\nclass DNPieChartWidget(DNWidget):\n    def __init__(self, widget_id):\n        super().__init__(widget_id, \"pie_chart\")\n\n    def dn_render(self):\n        pass",
    "file_path": "mina.kim/dn_dashboard_1.py",
    "start_line": 27,
    "end_line": 33,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNBarChartWidget",
    "content": "\nclass DNBarChartWidget(DNWidget):\n    def __init__(self, widget_id):\n        super().__init__(widget_id, \"bar_chart\")\n\n    def dn_render(self):\n        pass",
    "file_path": "mina.kim/dn_dashboard_1.py",
    "start_line": 34,
    "end_line": 40,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, widget_id, widget_type):\n        self.widget_id = widget_id\n        self.widget_type = widget_type\n        self.data = None",
    "file_path": "mina.kim/dn_dashboard_1.py",
    "start_line": 20,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_render",
    "content": "\n    def dn_render(self):\n        pass",
    "file_path": "mina.kim/dn_dashboard_1.py",
    "start_line": 24,
    "end_line": 26,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, widget_id):\n        super().__init__(widget_id, \"pie_chart\")",
    "file_path": "mina.kim/dn_dashboard_1.py",
    "start_line": 29,
    "end_line": 30,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_render",
    "content": "\n    def dn_render(self):\n        pass",
    "file_path": "mina.kim/dn_dashboard_1.py",
    "start_line": 31,
    "end_line": 33,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, widget_id):\n        super().__init__(widget_id, \"bar_chart\")",
    "file_path": "mina.kim/dn_dashboard_1.py",
    "start_line": 36,
    "end_line": 37,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_render",
    "content": "\n    def dn_render(self):\n        pass",
    "file_path": "mina.kim/dn_dashboard_1.py",
    "start_line": 38,
    "end_line": 40,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_load_data",
    "content": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\n# Function to load data for the dashboard\ndef dn_load_data(file_path):\n    data = pd.read_csv(file_path)\n    return data",
    "file_path": "mina.kim/dn_dashboard_5.py",
    "start_line": 7,
    "end_line": 11,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNVisualizer",
    "content": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\n# Class to handle dashboard visualizations\nclass DNVisualizer:\n    def __init__(self, data):\n        self.data = data\n\n    def dn_plot_bar_chart(self, x, y, title):\n        plt.figure(figsize=(10, 6))\n        plt.bar(x, y)\n        plt.title(title)\n        plt.xlabel('X-axis Label')\n        plt.ylabel('Y-axis Label')\n        plt.show()\n\n    def dn_plot_line_chart(self, x, y, title):\n        plt.figure(figsize=(10, 6))\n        plt.plot(x, y)\n        plt.title(title)\n        plt.xlabel('X-axis Label')\n        plt.ylabel('Y-axis Label')\n        plt.show()",
    "file_path": "mina.kim/dn_dashboard_5.py",
    "start_line": 12,
    "end_line": 32,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_data",
    "content": "\n# Function to process and analyze data for the dashboard\ndef dn_process_data(data):\n    processed_data = data.copy()\n    # Add data processing and analysis logic here\n    return processed_data",
    "file_path": "mina.kim/dn_dashboard_5.py",
    "start_line": 33,
    "end_line": 38,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_display_metrics",
    "content": "\n# Function to display key metrics on the dashboard\ndef dn_display_metrics(metrics_dict):\n    for key, value in metrics_dict.items():\n        print(f'{key}: {value}')",
    "file_path": "mina.kim/dn_dashboard_5.py",
    "start_line": 39,
    "end_line": 43,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, data):\n        self.data = data",
    "file_path": "mina.kim/dn_dashboard_5.py",
    "start_line": 15,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_plot_bar_chart",
    "content": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\n    def dn_plot_bar_chart(self, x, y, title):\n        plt.figure(figsize=(10, 6))\n        plt.bar(x, y)\n        plt.title(title)\n        plt.xlabel('X-axis Label')\n        plt.ylabel('Y-axis Label')\n        plt.show()",
    "file_path": "mina.kim/dn_dashboard_5.py",
    "start_line": 17,
    "end_line": 24,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_plot_line_chart",
    "content": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\n    def dn_plot_line_chart(self, x, y, title):\n        plt.figure(figsize=(10, 6))\n        plt.plot(x, y)\n        plt.title(title)\n        plt.xlabel('X-axis Label')\n        plt.ylabel('Y-axis Label')\n        plt.show()",
    "file_path": "mina.kim/dn_dashboard_5.py",
    "start_line": 25,
    "end_line": 32,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNFormValidator",
    "content": "# 작성자: mina.kim\n\nclass DNFormValidator:\n    def __init__(self):\n        self.errors = []\n\n    def validate_email(self, email):\n        if '@' not in email:\n            self.errors.append(\"유효한 이메일 주소가 아닙니다.\")\n\n    def validate_password(self, password):\n        if len(password) < 8:\n            self.errors.append(\"비밀번호는 최소 8자 이상이어야 합니다.\")",
    "file_path": "mina.kim/dn_form_4.py",
    "start_line": 2,
    "end_line": 14,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNForm",
    "content": "\nclass DNForm:\n    def __init__(self, data):\n        self.data = data\n\n    def process_form(self):\n        validator = DNFormValidator()\n\n        if 'email' in self.data:\n            validator.validate_email(self.data['email'])\n\n        if 'password' in self.data:\n            validator.validate_password(self.data['password'])\n\n        if validator.errors:\n            return {'success': False, 'errors': validator.errors}\n        else:\n            return {'success': True, 'message': \"폼이 성공적으로 제출되었습니다.\"}",
    "file_path": "mina.kim/dn_form_4.py",
    "start_line": 15,
    "end_line": 32,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_handle_form_submission",
    "content": "\ndef dn_handle_form_submission(data):\n    form = DNForm(data)\n    result = form.process_form()\n    return result",
    "file_path": "mina.kim/dn_form_4.py",
    "start_line": 33,
    "end_line": 37,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.errors = []",
    "file_path": "mina.kim/dn_form_4.py",
    "start_line": 5,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "validate_email",
    "content": "\n    def validate_email(self, email):\n        if '@' not in email:\n            self.errors.append(\"유효한 이메일 주소가 아닙니다.\")",
    "file_path": "mina.kim/dn_form_4.py",
    "start_line": 7,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "validate_password",
    "content": "\n    def validate_password(self, password):\n        if len(password) < 8:\n            self.errors.append(\"비밀번호는 최소 8자 이상이어야 합니다.\")",
    "file_path": "mina.kim/dn_form_4.py",
    "start_line": 11,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, data):\n        self.data = data",
    "file_path": "mina.kim/dn_form_4.py",
    "start_line": 17,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "process_form",
    "content": "\n    def process_form(self):\n        validator = DNFormValidator()\n\n        if 'email' in self.data:\n            validator.validate_email(self.data['email'])\n\n        if 'password' in self.data:\n            validator.validate_password(self.data['password'])\n\n        if validator.errors:\n            return {'success': False, 'errors': validator.errors}\n        else:\n            return {'success': True, 'message': \"폼이 성공적으로 제출되었습니다.\"}",
    "file_path": "mina.kim/dn_form_4.py",
    "start_line": 19,
    "end_line": 32,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNButton",
    "content": "#\n# This file contains the implementation of various UI components for Danal's codebase.\n\nclass DNButton:\n    def __init__(self, text):\n        self.text = text\n\n    def click(self):\n        print(f'Button clicked: {self.text}')",
    "file_path": "mina.kim/dn_ui_component_2.py",
    "start_line": 2,
    "end_line": 10,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_create_button",
    "content": "\ndef dn_create_button(text):\n    return DNButton(text)",
    "file_path": "mina.kim/dn_ui_component_2.py",
    "start_line": 11,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNInput",
    "content": "\nclass DNInput:\n    def __init__(self, placeholder):\n        self.placeholder = placeholder\n\n    def get_input(self):\n        return input(f'Enter text ({self.placeholder}): ')",
    "file_path": "mina.kim/dn_ui_component_2.py",
    "start_line": 14,
    "end_line": 20,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_create_input",
    "content": "\ndef dn_create_input(placeholder):\n    return DNInput(placeholder)",
    "file_path": "mina.kim/dn_ui_component_2.py",
    "start_line": 21,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, text):\n        self.text = text",
    "file_path": "mina.kim/dn_ui_component_2.py",
    "start_line": 6,
    "end_line": 7,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "click",
    "content": "\n    def click(self):\n        print(f'Button clicked: {self.text}')",
    "file_path": "mina.kim/dn_ui_component_2.py",
    "start_line": 8,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, placeholder):\n        self.placeholder = placeholder",
    "file_path": "mina.kim/dn_ui_component_2.py",
    "start_line": 16,
    "end_line": 17,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "get_input",
    "content": "\n    def get_input(self):\n        return input(f'Enter text ({self.placeholder}): ')",
    "file_path": "mina.kim/dn_ui_component_2.py",
    "start_line": 18,
    "end_line": 20,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNUser",
    "content": "# 작성자: mina.kim\n\nclass DNUser:\n    def __init__(self, username, email):\n        self.username = username\n        self.email = email\n\n    def display_info(self):\n        print(f\"사용자 정보 - 이름: {self.username}, 이메일: {self.email}\")",
    "file_path": "mina.kim/dn_dashboard_4.py",
    "start_line": 2,
    "end_line": 10,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_parse_data",
    "content": "\ndef dn_parse_data(data):\n    parsed_data = []\n    for item in data:\n        if item.get('valid'):\n            parsed_data.append(item)\n    return parsed_data",
    "file_path": "mina.kim/dn_dashboard_4.py",
    "start_line": 11,
    "end_line": 17,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_report",
    "content": "\ndef dn_generate_report(user, data):\n    report = f\"{user.username}님의 보고서:\\n\"\n    for item in data:\n        report += f\"{item.get('name')}: {item.get('value')}\\n\"\n    return report",
    "file_path": "mina.kim/dn_dashboard_4.py",
    "start_line": 18,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, username, email):\n        self.username = username\n        self.email = email",
    "file_path": "mina.kim/dn_dashboard_4.py",
    "start_line": 5,
    "end_line": 7,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "display_info",
    "content": "\n    def display_info(self):\n        print(f\"사용자 정보 - 이름: {self.username}, 이메일: {self.email}\")",
    "file_path": "mina.kim/dn_dashboard_4.py",
    "start_line": 8,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNFormValidator",
    "content": "# Python file for form functionality in Danal's codebase\n# Written by mina.kim\n\nclass DNFormValidator:\n    def __init__(self, form_data):\n        self.form_data = form_data\n\n    def dn_validate_email(self, email):\n        # Validation logic for email format\n        pass\n\n    def dn_validate_password(self, password):\n        # Validation logic for password strength\n        pass",
    "file_path": "mina.kim/dn_form_5.py",
    "start_line": 2,
    "end_line": 15,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNFormProcessor",
    "content": "\nclass DNFormProcessor:\n    def __init__(self, form_data):\n        self.form_data = form_data\n\n    def dn_process_form(self):\n        # Processing logic for form submission\n        pass",
    "file_path": "mina.kim/dn_form_5.py",
    "start_line": 16,
    "end_line": 23,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNFormData",
    "content": "\nclass DNFormData:\n    def __init__(self):\n        self.form_data = {}\n\n    def dn_add_field(self, field_name, field_value):\n        # Add a new field to the form data\n        self.form_data[field_name] = field_value\n\n    def dn_remove_field(self, field_name):\n        # Remove a field from the form data\n        if field_name in self.form_data:\n            del self.form_data[field_name]",
    "file_path": "mina.kim/dn_form_5.py",
    "start_line": 24,
    "end_line": 36,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, form_data):\n        self.form_data = form_data",
    "file_path": "mina.kim/dn_form_5.py",
    "start_line": 6,
    "end_line": 7,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_email",
    "content": "\n    def dn_validate_email(self, email):\n        # Validation logic for email format\n        pass",
    "file_path": "mina.kim/dn_form_5.py",
    "start_line": 8,
    "end_line": 11,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_password",
    "content": "\n    def dn_validate_password(self, password):\n        # Validation logic for password strength\n        pass",
    "file_path": "mina.kim/dn_form_5.py",
    "start_line": 12,
    "end_line": 15,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, form_data):\n        self.form_data = form_data",
    "file_path": "mina.kim/dn_form_5.py",
    "start_line": 18,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_form",
    "content": "\n    def dn_process_form(self):\n        # Processing logic for form submission\n        pass",
    "file_path": "mina.kim/dn_form_5.py",
    "start_line": 20,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        self.form_data = {}",
    "file_path": "mina.kim/dn_form_5.py",
    "start_line": 26,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_add_field",
    "content": "\n    def dn_add_field(self, field_name, field_value):\n        # Add a new field to the form data\n        self.form_data[field_name] = field_value",
    "file_path": "mina.kim/dn_form_5.py",
    "start_line": 28,
    "end_line": 31,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_remove_field",
    "content": "\n    def dn_remove_field(self, field_name):\n        # Remove a field from the form data\n        if field_name in self.form_data:\n            del self.form_data[field_name]",
    "file_path": "mina.kim/dn_form_5.py",
    "start_line": 32,
    "end_line": 36,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNFormValidator",
    "content": "\n# 주석이나 문서화가 필요한 경우 적절히 추가해주세요.\n\nclass DNFormValidator:\n    def __init__(self, form_data):\n        self.form_data = form_data\n    \n    def validate(self):\n        # form_data의 유효성을 검사하는 코드 작성\n        pass",
    "file_path": "mina.kim/dn_form_1.py",
    "start_line": 2,
    "end_line": 11,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNFormHandler",
    "content": "\nclass DNFormHandler:\n    def __init__(self, form_data):\n        self.form_data = form_data\n    \n    def process_form(self):\n        # form_data를 처리하는 코드 작성\n        pass",
    "file_path": "mina.kim/dn_form_1.py",
    "start_line": 12,
    "end_line": 19,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_save_form_data",
    "content": "\ndef dn_save_form_data(form_data):\n    # form 데이터를 DB에 저장하는 코드 작성\n    pass",
    "file_path": "mina.kim/dn_form_1.py",
    "start_line": 20,
    "end_line": 23,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_render_form_template",
    "content": "\ndef dn_render_form_template(template_name):\n    # form에 해당하는 HTML 템플릿을 렌더링하는 코드 작성\n    pass",
    "file_path": "mina.kim/dn_form_1.py",
    "start_line": 24,
    "end_line": 27,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, form_data):\n        self.form_data = form_data",
    "file_path": "mina.kim/dn_form_1.py",
    "start_line": 6,
    "end_line": 7,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "validate",
    "content": "    \n    def validate(self):\n        # form_data의 유효성을 검사하는 코드 작성\n        pass",
    "file_path": "mina.kim/dn_form_1.py",
    "start_line": 8,
    "end_line": 11,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, form_data):\n        self.form_data = form_data",
    "file_path": "mina.kim/dn_form_1.py",
    "start_line": 14,
    "end_line": 15,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "process_form",
    "content": "    \n    def process_form(self):\n        # form_data를 처리하는 코드 작성\n        pass",
    "file_path": "mina.kim/dn_form_1.py",
    "start_line": 16,
    "end_line": 19,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_get_data",
    "content": "import requests\nfrom datetime import datetime\n\n\n# Function to get data from API\ndef dn_get_data(api_url):\n    response = requests.get(api_url)\n    data = response.json()\n    return data",
    "file_path": "mina.kim/dn_dashboard_3.py",
    "start_line": 6,
    "end_line": 11,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNDataProcessor",
    "content": "import requests\nfrom datetime import datetime\n\n\n# Class to process and display dashboard data\nclass DNDataProcessor:\n    def __init__(self, data):\n        self.data = data\n    \n    def dn_process_data(self):\n        processed_data = []\n        for item in self.data:\n            processed_item = {\n                'id': item['id'],\n                'name': item['name'],\n                'value': item['value'],\n                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            }\n            processed_data.append(processed_item)\n        return processed_data",
    "file_path": "mina.kim/dn_dashboard_3.py",
    "start_line": 12,
    "end_line": 28,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_display_dashboard",
    "content": "\n# Function to display dashboard\ndef dn_display_dashboard(data):\n    for item in data:\n        print(f\"ID: {item['id']}\")\n        print(f\"Name: {item['name']}\")\n        print(f\"Value: {item['value']}\")\n        print(f\"Timestamp: {item['timestamp']}\")\n        print(\"-------------------------\")",
    "file_path": "mina.kim/dn_dashboard_3.py",
    "start_line": 29,
    "end_line": 37,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, data):\n        self.data = data",
    "file_path": "mina.kim/dn_dashboard_3.py",
    "start_line": 15,
    "end_line": 16,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_data",
    "content": "import requests\nfrom datetime import datetime\n\n    \n    def dn_process_data(self):\n        processed_data = []\n        for item in self.data:\n            processed_item = {\n                'id': item['id'],\n                'name': item['name'],\n                'value': item['value'],\n                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            }\n            processed_data.append(processed_item)\n        return processed_data",
    "file_path": "mina.kim/dn_dashboard_3.py",
    "start_line": 17,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 2,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNUIComponent",
    "content": "# @dn- UI Component 클래스 정의\nclass DNUIComponent:\n    def __init__(self, name):\n        self.name = name\n        \n    def dn_display(self):\n        print(f\"{self.name}을(를) 화면에 표시합니다.\")",
    "file_path": "mina.kim/dn_ui_component_4.py",
    "start_line": 2,
    "end_line": 8,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_update_properties",
    "content": "\n# @dn- UI Component의 속성을 관리하는 함수\ndef dn_update_properties(component, properties):\n    for key, value in properties.items():\n        setattr(component, key, value)",
    "file_path": "mina.kim/dn_ui_component_4.py",
    "start_line": 9,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_handle_event",
    "content": "\n# @dn- UI Component의 이벤트를 처리하는 함수\ndef dn_handle_event(component, event):\n    if event == \"click\":\n        print(f\"{component.name}이 클릭되었습니다.\")\n    elif event == \"hover\":\n        print(f\"{component.name}에 마우스가 올려졌습니다.\")\n    else:\n        print(f\"{component.name}에서 {event} 이벤트가 발생했습니다.\")",
    "file_path": "mina.kim/dn_ui_component_4.py",
    "start_line": 14,
    "end_line": 22,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNStyleManager",
    "content": "\n# @dn- UI Component의 스타일을 변경하는 클래스\nclass DNStyleManager:\n    def dn_apply_style(self, component, styles):\n        for key, value in styles.items():\n            setattr(component, f\"style_{key}\", value)",
    "file_path": "mina.kim/dn_ui_component_4.py",
    "start_line": 23,
    "end_line": 28,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, name):\n        self.name = name",
    "file_path": "mina.kim/dn_ui_component_4.py",
    "start_line": 4,
    "end_line": 5,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_display",
    "content": "        \n    def dn_display(self):\n        print(f\"{self.name}을(를) 화면에 표시합니다.\")",
    "file_path": "mina.kim/dn_ui_component_4.py",
    "start_line": 6,
    "end_line": 8,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_apply_style",
    "content": "    def dn_apply_style(self, component, styles):\n        for key, value in styles.items():\n            setattr(component, f\"style_{key}\", value)",
    "file_path": "mina.kim/dn_ui_component_4.py",
    "start_line": 26,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNFormValidator",
    "content": "\nclass DNFormValidator:\n    def __init__(self):\n        pass\n\n    def dn_validate_email(self, email):\n        # 이메일 유효성 검사 함수\n        pass\n\n    def dn_validate_phone_number(self, phone_number):\n        # 전화번호 유효성 검사 함수\n        pass",
    "file_path": "mina.kim/dn_form_2.py",
    "start_line": 2,
    "end_line": 13,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNFormProcessor",
    "content": "\nclass DNFormProcessor:\n    def __init__(self):\n        pass\n\n    def dn_process_form_data(self, form_data):\n        # 폼 데이터 처리 함수\n        pass",
    "file_path": "mina.kim/dn_form_2.py",
    "start_line": 14,
    "end_line": 21,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_save_form_data",
    "content": "\ndef dn_save_form_data(form_data):\n    # 폼 데이터 저장 함수\n    pass",
    "file_path": "mina.kim/dn_form_2.py",
    "start_line": 22,
    "end_line": 25,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        pass",
    "file_path": "mina.kim/dn_form_2.py",
    "start_line": 4,
    "end_line": 5,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_email",
    "content": "\n    def dn_validate_email(self, email):\n        # 이메일 유효성 검사 함수\n        pass",
    "file_path": "mina.kim/dn_form_2.py",
    "start_line": 6,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_phone_number",
    "content": "\n    def dn_validate_phone_number(self, phone_number):\n        # 전화번호 유효성 검사 함수\n        pass",
    "file_path": "mina.kim/dn_form_2.py",
    "start_line": 10,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self):\n        pass",
    "file_path": "mina.kim/dn_form_2.py",
    "start_line": 16,
    "end_line": 17,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_form_data",
    "content": "\n    def dn_process_form_data(self, form_data):\n        # 폼 데이터 처리 함수\n        pass",
    "file_path": "mina.kim/dn_form_2.py",
    "start_line": 18,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNUiComponent",
    "content": "'''\n@dn- Danal Company\nFrontend Developer: mina.kim\n\nDescription:\nThis Python file contains UI component functions for Danal's code base.\n\n'''\n\n\nclass DNUiComponent:\n    def __init__(self, name):\n        self.name = name\n        \n    def dn_display_component(self):\n        print(f\"Displaying {self.name} component\")",
    "file_path": "mina.kim/dn_ui_component_5.py",
    "start_line": 9,
    "end_line": 15,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_create_button",
    "content": "'''\n@dn- Danal Company\nFrontend Developer: mina.kim\n\nDescription:\nThis Python file contains UI component functions for Danal's code base.\n\n'''\n\n        \ndef dn_create_button(text):\n    return f\"<button>{text}</button>\"",
    "file_path": "mina.kim/dn_ui_component_5.py",
    "start_line": 16,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_generate_table",
    "content": "'''\n@dn- Danal Company\nFrontend Developer: mina.kim\n\nDescription:\nThis Python file contains UI component functions for Danal's code base.\n\n'''\n\n\ndef dn_generate_table(data):\n    table_str = \"<table>\"\n    for row in data:\n        table_str += \"<tr>\"\n        for col in row:\n            table_str += f\"<td>{col}</td>\"\n        table_str += \"</tr>\"\n    table_str += \"</table>\"\n    return table_str",
    "file_path": "mina.kim/dn_ui_component_5.py",
    "start_line": 19,
    "end_line": 28,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "'''\n@dn- Danal Company\nFrontend Developer: mina.kim\n\nDescription:\nThis Python file contains UI component functions for Danal's code base.\n\n'''\n\n    def __init__(self, name):\n        self.name = name",
    "file_path": "mina.kim/dn_ui_component_5.py",
    "start_line": 11,
    "end_line": 12,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_display_component",
    "content": "'''\n@dn- Danal Company\nFrontend Developer: mina.kim\n\nDescription:\nThis Python file contains UI component functions for Danal's code base.\n\n'''\n\n        \n    def dn_display_component(self):\n        print(f\"Displaying {self.name} component\")",
    "file_path": "mina.kim/dn_ui_component_5.py",
    "start_line": 13,
    "end_line": 15,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNFormValidator",
    "content": "\nclass DNFormValidator:\n    def __init__(self, form_data):\n        self.form_data = form_data\n    \n    def dn_validate_form(self):\n        # Form validation logic here\n        pass",
    "file_path": "mina.kim/dn_form_3.py",
    "start_line": 2,
    "end_line": 9,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNFormProcessor",
    "content": "\nclass DNFormProcessor:\n    def __init__(self, form_data):\n        self.form_data = form_data\n    \n    def dn_process_form(self):\n        # Form processing logic here\n        pass",
    "file_path": "mina.kim/dn_form_3.py",
    "start_line": 10,
    "end_line": 17,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_save_form_data",
    "content": "\ndef dn_save_form_data(form_data):\n    # Save form data to database\n    pass",
    "file_path": "mina.kim/dn_form_3.py",
    "start_line": 18,
    "end_line": 21,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_render_form_template",
    "content": "\ndef dn_render_form_template():\n    # Render form template for display\n    pass",
    "file_path": "mina.kim/dn_form_3.py",
    "start_line": 22,
    "end_line": 25,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, form_data):\n        self.form_data = form_data",
    "file_path": "mina.kim/dn_form_3.py",
    "start_line": 4,
    "end_line": 5,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate_form",
    "content": "    \n    def dn_validate_form(self):\n        # Form validation logic here\n        pass",
    "file_path": "mina.kim/dn_form_3.py",
    "start_line": 6,
    "end_line": 9,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, form_data):\n        self.form_data = form_data",
    "file_path": "mina.kim/dn_form_3.py",
    "start_line": 12,
    "end_line": 13,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_process_form",
    "content": "    \n    def dn_process_form(self):\n        # Form processing logic here\n        pass",
    "file_path": "mina.kim/dn_form_3.py",
    "start_line": 14,
    "end_line": 17,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_format_text",
    "content": "# 이 모듈은 Danal 회사의 UI 컴포넌트와 관련된 기능을 정의합니다.\n\ndef dn_format_text(text):\n    # 주어진 텍스트를 형식화하여 반환합니다.\n    return text.upper()",
    "file_path": "mina.kim/dn_ui_component_1.py",
    "start_line": 2,
    "end_line": 6,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNButton",
    "content": "\nclass DNButton:\n    def __init__(self, text):\n        self.text = text\n\n    def dn_click(self):\n        # 버튼을 클릭했을 때의 동작을 정의합니다.\n        print(f'{self.text} 버튼이 클릭되었습니다.')",
    "file_path": "mina.kim/dn_ui_component_1.py",
    "start_line": 7,
    "end_line": 14,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "ClassDef",
    "name": "DNInput",
    "content": "\nclass DNInput:\n    def __init__(self, placeholder):\n        self.placeholder = placeholder\n\n    def dn_validate(self, value):\n        # 입력값을 유효성 검사합니다.\n        if len(value) > 10:\n            return True\n        else:\n            return False",
    "file_path": "mina.kim/dn_ui_component_1.py",
    "start_line": 15,
    "end_line": 25,
    "metadata": {
      "node_type": "ClassDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, text):\n        self.text = text",
    "file_path": "mina.kim/dn_ui_component_1.py",
    "start_line": 9,
    "end_line": 10,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_click",
    "content": "\n    def dn_click(self):\n        # 버튼을 클릭했을 때의 동작을 정의합니다.\n        print(f'{self.text} 버튼이 클릭되었습니다.')",
    "file_path": "mina.kim/dn_ui_component_1.py",
    "start_line": 11,
    "end_line": 14,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "__init__",
    "content": "    def __init__(self, placeholder):\n        self.placeholder = placeholder",
    "file_path": "mina.kim/dn_ui_component_1.py",
    "start_line": 17,
    "end_line": 18,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  },
  {
    "type": "FunctionDef",
    "name": "dn_validate",
    "content": "\n    def dn_validate(self, value):\n        # 입력값을 유효성 검사합니다.\n        if len(value) > 10:\n            return True\n        else:\n            return False",
    "file_path": "mina.kim/dn_ui_component_1.py",
    "start_line": 19,
    "end_line": 25,
    "metadata": {
      "node_type": "FunctionDef",
      "imports_count": 0,
      "globals_count": 0
    },
    "persona": "mina.kim"
  }
]